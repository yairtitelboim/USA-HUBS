{"ast":null,"code":"// index.ts\nimport { distance } from \"@turf/distance\";\nimport { segmentReduce } from \"@turf/meta\";\nfunction length(geojson, options = {}) {\n  return segmentReduce(geojson, (previousValue, segment) => {\n    const coords = segment.geometry.coordinates;\n    return previousValue + distance(coords[0], coords[1], options);\n  }, 0);\n}\nvar turf_length_default = length;\nexport { turf_length_default as default, length };","map":{"version":3,"names":["distance","segmentReduce","length","geojson","options","previousValue","segment","coords","geometry","coordinates","turf_length_default"],"sources":["/Users/yairtitelboim/Documents/Kernel/ALLAPPS/LOGhub/loghub/county-map-app/node_modules/@turf/length/index.ts"],"sourcesContent":["import { Feature, FeatureCollection, GeometryCollection } from \"geojson\";\nimport { distance } from \"@turf/distance\";\nimport { Units } from \"@turf/helpers\";\nimport { segmentReduce } from \"@turf/meta\";\n\n/**\n * Takes a {@link GeoJSON} and measures its length in the specified units, {@link (Multi)Point}'s distance are ignored.\n *\n * @function\n * @param {Feature<LineString|MultiLineString>} geojson GeoJSON to measure\n * @param {Object} [options={}] Optional parameters\n * @param {string} [options.units=kilometers] can be degrees, radians, miles, or kilometers\n * @returns {number} length of GeoJSON\n * @example\n * var line = turf.lineString([[115, -32], [131, -22], [143, -25], [150, -34]]);\n * var length = turf.length(line, {units: 'miles'});\n *\n * //addToMap\n * var addToMap = [line];\n * line.properties.distance = length;\n */\nfunction length(\n  geojson: Feature<any> | FeatureCollection<any> | GeometryCollection,\n  options: {\n    units?: Units;\n  } = {}\n): number {\n  // Calculate distance from 2-vertex line segments\n  return segmentReduce(\n    geojson,\n    (previousValue, segment) => {\n      const coords = segment!.geometry.coordinates;\n      return previousValue! + distance(coords[0], coords[1], options);\n    },\n    0\n  );\n}\n\nexport { length };\nexport default length;\n"],"mappings":";AACA,SAASA,QAAA,QAAgB;AAEzB,SAASC,aAAA,QAAqB;AAkB9B,SAASC,OACPC,OAAA,EACAC,OAAA,GAEI,CAAC,GACG;EAER,OAAOH,aAAA,CACLE,OAAA,EACA,CAACE,aAAA,EAAeC,OAAA,KAAY;IAC1B,MAAMC,MAAA,GAASD,OAAA,CAASE,QAAA,CAASC,WAAA;IACjC,OAAOJ,aAAA,GAAiBL,QAAA,CAASO,MAAA,CAAO,CAAC,GAAGA,MAAA,CAAO,CAAC,GAAGH,OAAO;EAChE,GACA,CACF;AACF;AAGA,IAAOM,mBAAA,GAAQR,MAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}