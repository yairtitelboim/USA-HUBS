{"ast":null,"code":"// index.js\nimport rbush from \"rbush\";\nimport { featureCollection } from \"@turf/helpers\";\nimport { featureEach } from \"@turf/meta\";\nimport { bbox as turfBBox } from \"@turf/bbox\";\nfunction geojsonRbush(maxEntries) {\n  var tree = new rbush(maxEntries);\n  tree.insert = function (feature) {\n    if (feature.type !== \"Feature\") throw new Error(\"invalid feature\");\n    feature.bbox = feature.bbox ? feature.bbox : turfBBox(feature);\n    return rbush.prototype.insert.call(this, feature);\n  };\n  tree.load = function (features) {\n    var load = [];\n    if (Array.isArray(features)) {\n      features.forEach(function (feature) {\n        if (feature.type !== \"Feature\") throw new Error(\"invalid features\");\n        feature.bbox = feature.bbox ? feature.bbox : turfBBox(feature);\n        load.push(feature);\n      });\n    } else {\n      featureEach(features, function (feature) {\n        if (feature.type !== \"Feature\") throw new Error(\"invalid features\");\n        feature.bbox = feature.bbox ? feature.bbox : turfBBox(feature);\n        load.push(feature);\n      });\n    }\n    return rbush.prototype.load.call(this, load);\n  };\n  tree.remove = function (feature, equals) {\n    if (feature.type !== \"Feature\") throw new Error(\"invalid feature\");\n    feature.bbox = feature.bbox ? feature.bbox : turfBBox(feature);\n    return rbush.prototype.remove.call(this, feature, equals);\n  };\n  tree.clear = function () {\n    return rbush.prototype.clear.call(this);\n  };\n  tree.search = function (geojson) {\n    var features = rbush.prototype.search.call(this, this.toBBox(geojson));\n    return featureCollection(features);\n  };\n  tree.collides = function (geojson) {\n    return rbush.prototype.collides.call(this, this.toBBox(geojson));\n  };\n  tree.all = function () {\n    var features = rbush.prototype.all.call(this);\n    return featureCollection(features);\n  };\n  tree.toJSON = function () {\n    return rbush.prototype.toJSON.call(this);\n  };\n  tree.fromJSON = function (json) {\n    return rbush.prototype.fromJSON.call(this, json);\n  };\n  tree.toBBox = function (geojson) {\n    var bbox;\n    if (geojson.bbox) bbox = geojson.bbox;else if (Array.isArray(geojson) && geojson.length === 4) bbox = geojson;else if (Array.isArray(geojson) && geojson.length === 6) bbox = [geojson[0], geojson[1], geojson[3], geojson[4]];else if (geojson.type === \"Feature\") bbox = turfBBox(geojson);else if (geojson.type === \"FeatureCollection\") bbox = turfBBox(geojson);else throw new Error(\"invalid geojson\");\n    return {\n      minX: bbox[0],\n      minY: bbox[1],\n      maxX: bbox[2],\n      maxY: bbox[3]\n    };\n  };\n  return tree;\n}\nvar turf_geojson_rbush_default = geojsonRbush;\nexport { turf_geojson_rbush_default as default, geojsonRbush };","map":{"version":3,"names":["rbush","featureCollection","featureEach","bbox","turfBBox","geojsonRbush","maxEntries","tree","insert","feature","type","Error","prototype","call","load","features","Array","isArray","forEach","push","remove","equals","clear","search","geojson","toBBox","collides","all","toJSON","fromJSON","json","length","minX","minY","maxX","maxY","turf_geojson_rbush_default"],"sources":["/Users/yairtitelboim/Documents/Kernel/ALLAPPS/LOGhub/loghub/county-map-app/node_modules/@turf/geojson-rbush/index.js"],"sourcesContent":["import rbush from \"rbush\";\nimport { featureCollection } from \"@turf/helpers\";\nimport { featureEach } from \"@turf/meta\";\nimport { bbox as turfBBox } from \"@turf/bbox\";\n\n/**\n * @module rbush\n */\n\n/**\n * GeoJSON implementation of [RBush](https://github.com/mourner/rbush#rbush) spatial index.\n *\n * @function rbush\n * @param {number} [maxEntries=9] defines the maximum number of entries in a tree node. 9 (used by default) is a\n * reasonable choice for most applications. Higher value means faster insertion and slower search, and vice versa.\n * @returns {RBush} GeoJSON RBush\n * @example\n * var geojsonRbush = require('geojson-rbush').default;\n * var tree = geojsonRbush();\n */\nfunction geojsonRbush(maxEntries) {\n  var tree = new rbush(maxEntries);\n\n  /**\n   * [insert](https://github.com/mourner/rbush#data-format)\n   *\n   * @memberof rbush\n   * @param {Feature} feature insert single GeoJSON Feature\n   * @returns {RBush} GeoJSON RBush\n   * @example\n   * var poly = turf.polygon([[[-78, 41], [-67, 41], [-67, 48], [-78, 48], [-78, 41]]]);\n   * tree.insert(poly)\n   */\n  tree.insert = function (feature) {\n    if (feature.type !== \"Feature\") throw new Error(\"invalid feature\");\n    feature.bbox = feature.bbox ? feature.bbox : turfBBox(feature);\n    return rbush.prototype.insert.call(this, feature);\n  };\n\n  /**\n   * [load](https://github.com/mourner/rbush#bulk-inserting-data)\n   *\n   * @memberof rbush\n   * @param {FeatureCollection|Array<Feature>} features load entire GeoJSON FeatureCollection\n   * @returns {RBush} GeoJSON RBush\n   * @example\n   * var polys = turf.polygons([\n   *     [[[-78, 41], [-67, 41], [-67, 48], [-78, 48], [-78, 41]]],\n   *     [[[-93, 32], [-83, 32], [-83, 39], [-93, 39], [-93, 32]]]\n   * ]);\n   * tree.load(polys);\n   */\n  tree.load = function (features) {\n    var load = [];\n    // Load an Array of Features\n    if (Array.isArray(features)) {\n      features.forEach(function (feature) {\n        if (feature.type !== \"Feature\") throw new Error(\"invalid features\");\n        feature.bbox = feature.bbox ? feature.bbox : turfBBox(feature);\n        load.push(feature);\n      });\n    } else {\n      // Load a FeatureCollection\n      featureEach(features, function (feature) {\n        if (feature.type !== \"Feature\") throw new Error(\"invalid features\");\n        feature.bbox = feature.bbox ? feature.bbox : turfBBox(feature);\n        load.push(feature);\n      });\n    }\n    return rbush.prototype.load.call(this, load);\n  };\n\n  /**\n   * [remove](https://github.com/mourner/rbush#removing-data)\n   *\n   * @memberof rbush\n   * @param {Feature} feature remove single GeoJSON Feature\n   * @param {Function} equals Pass a custom equals function to compare by value for removal.\n   * @returns {RBush} GeoJSON RBush\n   * @example\n   * var poly = turf.polygon([[[-78, 41], [-67, 41], [-67, 48], [-78, 48], [-78, 41]]]);\n   *\n   * tree.remove(poly);\n   */\n  tree.remove = function (feature, equals) {\n    if (feature.type !== \"Feature\") throw new Error(\"invalid feature\");\n    feature.bbox = feature.bbox ? feature.bbox : turfBBox(feature);\n    return rbush.prototype.remove.call(this, feature, equals);\n  };\n\n  /**\n   * [clear](https://github.com/mourner/rbush#removing-data)\n   *\n   * @memberof rbush\n   * @returns {RBush} GeoJSON Rbush\n   * @example\n   * tree.clear()\n   */\n  tree.clear = function () {\n    return rbush.prototype.clear.call(this);\n  };\n\n  /**\n   * [search](https://github.com/mourner/rbush#search)\n   *\n   * @memberof rbush\n   * @param {BBox|FeatureCollection|Feature} geojson search with GeoJSON\n   * @returns {FeatureCollection} all features that intersects with the given GeoJSON.\n   * @example\n   * var poly = turf.polygon([[[-78, 41], [-67, 41], [-67, 48], [-78, 48], [-78, 41]]]);\n   *\n   * tree.search(poly);\n   */\n  tree.search = function (geojson) {\n    var features = rbush.prototype.search.call(this, this.toBBox(geojson));\n    return featureCollection(features);\n  };\n\n  /**\n   * [collides](https://github.com/mourner/rbush#collisions)\n   *\n   * @memberof rbush\n   * @param {BBox|FeatureCollection|Feature} geojson collides with GeoJSON\n   * @returns {boolean} true if there are any items intersecting the given GeoJSON, otherwise false.\n   * @example\n   * var poly = turf.polygon([[[-78, 41], [-67, 41], [-67, 48], [-78, 48], [-78, 41]]]);\n   *\n   * tree.collides(poly);\n   */\n  tree.collides = function (geojson) {\n    return rbush.prototype.collides.call(this, this.toBBox(geojson));\n  };\n\n  /**\n   * [all](https://github.com/mourner/rbush#search)\n   *\n   * @memberof rbush\n   * @returns {FeatureCollection} all the features in RBush\n   * @example\n   * tree.all()\n   */\n  tree.all = function () {\n    var features = rbush.prototype.all.call(this);\n    return featureCollection(features);\n  };\n\n  /**\n   * [toJSON](https://github.com/mourner/rbush#export-and-import)\n   *\n   * @memberof rbush\n   * @returns {any} export data as JSON object\n   * @example\n   * var exported = tree.toJSON()\n   */\n  tree.toJSON = function () {\n    return rbush.prototype.toJSON.call(this);\n  };\n\n  /**\n   * [fromJSON](https://github.com/mourner/rbush#export-and-import)\n   *\n   * @memberof rbush\n   * @param {any} json import previously exported data\n   * @returns {RBush} GeoJSON RBush\n   * @example\n   * var exported = {\n   *   \"children\": [\n   *     {\n   *       \"type\": \"Feature\",\n   *       \"geometry\": {\n   *         \"type\": \"Point\",\n   *         \"coordinates\": [110, 50]\n   *       },\n   *       \"properties\": {},\n   *       \"bbox\": [110, 50, 110, 50]\n   *     }\n   *   ],\n   *   \"height\": 1,\n   *   \"leaf\": true,\n   *   \"minX\": 110,\n   *   \"minY\": 50,\n   *   \"maxX\": 110,\n   *   \"maxY\": 50\n   * }\n   * tree.fromJSON(exported)\n   */\n  tree.fromJSON = function (json) {\n    return rbush.prototype.fromJSON.call(this, json);\n  };\n\n  /**\n   * Converts GeoJSON to {minX, minY, maxX, maxY} schema\n   *\n   * @memberof rbush\n   * @private\n   * @param {BBox|FeatureCollection|Feature} geojson feature(s) to retrieve BBox from\n   * @returns {Object} converted to {minX, minY, maxX, maxY}\n   */\n  tree.toBBox = function (geojson) {\n    var bbox;\n    if (geojson.bbox) bbox = geojson.bbox;\n    else if (Array.isArray(geojson) && geojson.length === 4) bbox = geojson;\n    else if (Array.isArray(geojson) && geojson.length === 6)\n      bbox = [geojson[0], geojson[1], geojson[3], geojson[4]];\n    else if (geojson.type === \"Feature\") bbox = turfBBox(geojson);\n    else if (geojson.type === \"FeatureCollection\") bbox = turfBBox(geojson);\n    else throw new Error(\"invalid geojson\");\n\n    return {\n      minX: bbox[0],\n      minY: bbox[1],\n      maxX: bbox[2],\n      maxY: bbox[3],\n    };\n  };\n  return tree;\n}\n\nexport { geojsonRbush };\nexport default geojsonRbush;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}