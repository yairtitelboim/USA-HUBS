{"ast":null,"code":"/*!\n* MarchingSquaresJS\n* version 1.3.3\n* https://github.com/RaumZeit/MarchingSquares.js\n*\n* @license GNU Affero General Public License.\n* Copyright (c) 2015-2019 Ronny Lorenz <ronny@tbi.univie.ac.at>\n*/\n\n/*\n *  Compute the distance of a value 'v' from 'a' through linear interpolation\n *  between the values of 'a' and 'b'\n *\n *  Note, that we assume that 'a' and 'b' have unit distance (i.e. 1)\n */\nfunction linear(a, b, v) {\n  if (a < b) return (v - a) / (b - a);\n  return (a - v) / (a - b);\n}\n\n/*\n *  Compute the distance of a pair of values ('v0', 'v1') from 'a' through linear interpolation\n *  between the values of 'a' and 'b'\n *\n *  This function assumes that exactly one value, 'v0' or 'v1', is actually located\n *  between 'a' and 'b', and choses the right one automagically\n *\n *  Note, that we assume that 'a' and 'b' have unit distance (i.e. 1)\n */\nfunction linear_ab(a, b, v0, v1) {\n  var tmp;\n  if (v0 > v1) {\n    tmp = v0;\n    v0 = v1;\n    v1 = tmp;\n  }\n  if (a < b) {\n    if (a < v0) return (v0 - a) / (b - a);else return (v1 - a) / (b - a);\n  } else if (a > v1) {\n    return (a - v1) / (a - b);\n  }\n  return (a - v0) / (a - b);\n}\n\n/*\n *  Compute the distance of a pair of values ('v0', 'v1') from 'a' through linear interpolation\n *  between the values of 'a' and 'b'\n *\n *  This function automagically choses the value 'vN' that is closer to 'a'\n *\n *  Note, that we assume that 'a' and 'b' have unit distance (i.e. 1)\n */\nfunction linear_a(a, b, minV, maxV) {\n  if (a < b) return (minV - a) / (b - a);\n  return (a - maxV) / (a - b);\n}\n\n/*\n *  Compute the distance of a pair of values ('v0', 'v1') from 'a' through linear interpolation\n *  between the values of 'a' and 'b'\n *\n *  This function automagically choses the value 'vN' that is closer to 'b'\n *\n *  Note, that we assume that 'a' and 'b' have unit distance (i.e. 1)\n */\nfunction linear_b(a, b, minV, maxV) {\n  if (a < b) return (maxV - a) / (b - a);\n  return (a - minV) / (a - b);\n}\nfunction Options() {\n  /* Settings common to all implemented algorithms */\n  this.successCallback = null;\n  this.verbose = false;\n  this.polygons = false;\n  this.polygons_full = false;\n  this.linearRing = true;\n  this.noQuadTree = false;\n  this.noFrame = false;\n}\n\n/* Compose settings specific to IsoBands algorithm */\nfunction isoBandOptions(userSettings) {\n  var i, key, val, bandOptions, optionKeys;\n  bandOptions = new Options();\n  userSettings = userSettings ? userSettings : {};\n  optionKeys = Object.keys(bandOptions);\n  for (i = 0; i < optionKeys.length; i++) {\n    key = optionKeys[i];\n    val = userSettings[key];\n    if (typeof val !== 'undefined' && val !== null) bandOptions[key] = val;\n  }\n\n  /* restore compatibility */\n  bandOptions.polygons_full = !bandOptions.polygons;\n\n  /* add interpolation functions (not yet user customizable) */\n  bandOptions.interpolate = linear_ab;\n  bandOptions.interpolate_a = linear_a;\n  bandOptions.interpolate_b = linear_b;\n  return bandOptions;\n}\n\n/* Compose settings specific to IsoLines algorithm */\nfunction isoLineOptions(userSettings) {\n  var i, key, val, lineOptions, optionKeys;\n  lineOptions = new Options();\n  userSettings = userSettings ? userSettings : {};\n  optionKeys = Object.keys(lineOptions);\n  for (i = 0; i < optionKeys.length; i++) {\n    key = optionKeys[i];\n    val = userSettings[key];\n    if (typeof val !== 'undefined' && val !== null) lineOptions[key] = val;\n  }\n\n  /* restore compatibility */\n  lineOptions.polygons_full = !lineOptions.polygons;\n\n  /* add interpolation functions (not yet user customizable) */\n  lineOptions.interpolate = linear;\n  return lineOptions;\n}\nfunction cell2Polygons(cell, x, y, settings) {\n  var polygons = [];\n  cell.polygons.forEach(function (p) {\n    p.forEach(function (pp) {\n      pp[0] += x;\n      pp[1] += y;\n    });\n    if (settings.linearRing) p.push(p[0]);\n    polygons.push(p);\n  });\n  return polygons;\n}\nfunction entry_coordinate(x, y, mode, path) {\n  if (mode === 0) {\n    /* down */\n    x += 1;\n    y += path[0][1];\n  } else if (mode === 1) {\n    /* left */\n    x += path[0][0];\n  } else if (mode === 2) {\n    /* up */\n    y += path[0][1];\n  } else if (mode === 3) {\n    /* right */\n    x += path[0][0];\n    y += 1;\n  }\n  return [x, y];\n}\nfunction skip_coordinate(x, y, mode) {\n  if (mode === 0) {\n    /* down */\n    x++;\n  } else if (mode === 1) ;else if (mode === 2) {\n    /* up */\n    y++;\n  } else if (mode === 3) {\n    /* right */\n    x++;\n    y++;\n  }\n  return [x, y];\n}\nfunction requireFrame(data, lowerBound, upperBound) {\n  var frameRequired, cols, rows, i, j;\n  frameRequired = true;\n  cols = data[0].length;\n  rows = data.length;\n  for (j = 0; j < rows; j++) {\n    if (data[j][0] < lowerBound || data[j][0] > upperBound || data[j][cols - 1] < lowerBound || data[j][cols - 1] > upperBound) {\n      frameRequired = false;\n      break;\n    }\n  }\n  if (frameRequired && (data[rows - 1][0] < lowerBound || data[rows - 1][0] > upperBound || data[rows - 1][cols - 1] < lowerBound || data[rows - 1][cols - 1] > upperBound)) {\n    frameRequired = false;\n  }\n  if (frameRequired) for (i = 0; i < cols - 1; i++) {\n    if (data[0][i] < lowerBound || data[0][i] > upperBound || data[rows - 1][i] < lowerBound || data[rows - 1][i] > upperBound) {\n      frameRequired = false;\n      break;\n    }\n  }\n  return frameRequired;\n}\nfunction requireLineFrame(data, threshold) {\n  var frameRequired, cols, rows, i, j;\n  frameRequired = true;\n  cols = data[0].length;\n  rows = data.length;\n  for (j = 0; j < rows; j++) {\n    if (data[j][0] >= threshold || data[j][cols - 1] >= threshold) {\n      frameRequired = false;\n      break;\n    }\n  }\n  if (frameRequired && (data[rows - 1][0] >= threshold || data[rows - 1][cols - 1] >= threshold)) {\n    frameRequired = false;\n  }\n  if (frameRequired) for (i = 0; i < cols - 1; i++) {\n    if (data[0][i] >= threshold || data[rows - 1][i] > threshold) {\n      frameRequired = false;\n      break;\n    }\n  }\n  return frameRequired;\n}\nfunction traceBandPaths(data, cellGrid, settings) {\n  var nextedge, path, e, ee, s, ve, enter, x, y, finalized, origin, cc, dir, count, point, found_entry;\n  var polygons = [];\n  var rows = data.length - 1;\n  var cols = data[0].length - 1;\n\n  /*\n   * directions for out-of-grid moves are:\n   * 0 ... \"down\",\n   * 1 ... \"left\",\n   * 2 ... \"up\",\n   * 3 ... \"right\"\n   */\n  var valid_entries = [['rt', 'rb'], /* down */\n  ['br', 'bl'], /* left */\n  ['lb', 'lt'], /* up */\n  ['tl', 'tr'] /* right */];\n  var add_x = [0, -1, 0, 1];\n  var add_y = [-1, 0, 1, 0];\n  var available_starts = ['bl', 'lb', 'lt', 'tl', 'tr', 'rt', 'rb', 'br'];\n  var entry_dir = {\n    bl: 1,\n    br: 1,\n    lb: 2,\n    lt: 2,\n    tl: 3,\n    tr: 3,\n    rt: 0,\n    rb: 0\n  };\n  if (requireFrame(data, settings.minV, settings.maxV)) {\n    if (settings.linearRing) polygons.push([[0, 0], [0, rows], [cols, rows], [cols, 0], [0, 0]]);else polygons.push([[0, 0], [0, rows], [cols, rows], [cols, 0]]);\n  }\n\n  /* finally, start tracing back first polygon(s) */\n  cellGrid.forEach(function (a, i) {\n    a.forEach(function (cell, j) {\n      nextedge = null;\n\n      /* trace paths for all available edges that go through this cell */\n      for (e = 0; e < 8; e++) {\n        nextedge = available_starts[e];\n        if (typeof cell.edges[nextedge] !== 'object') continue;\n\n        /* start a new, full path */\n        path = [];\n        ee = cell.edges[nextedge];\n        enter = nextedge;\n        x = i;\n        y = j;\n        finalized = false;\n        origin = [i + ee.path[0][0], j + ee.path[0][1]];\n\n        /* add start coordinate */\n        path.push(origin);\n\n        /* start traceback */\n        while (!finalized) {\n          cc = cellGrid[x][y];\n          if (typeof cc.edges[enter] !== 'object') break;\n          ee = cc.edges[enter];\n\n          /* remove edge from cell */\n          delete cc.edges[enter];\n\n          /* add last point of edge to path arra, since we extend a polygon */\n          point = ee.path[1];\n          point[0] += x;\n          point[1] += y;\n          path.push(point);\n          enter = ee.move.enter;\n          x = x + ee.move.x;\n          y = y + ee.move.y;\n\n          /* handle out-of-grid moves */\n          if (typeof cellGrid[x] === 'undefined' || typeof cellGrid[x][y] === 'undefined') {\n            dir = 0;\n            count = 0;\n            if (x === cols) {\n              x--;\n              dir = 0; /* move downwards */\n            } else if (x < 0) {\n              x++;\n              dir = 2; /* move upwards */\n            } else if (y === rows) {\n              y--;\n              dir = 3; /* move right */\n            } else if (y < 0) {\n              y++;\n              dir = 1; /* move left */\n            } else {\n              throw new Error('Left the grid somewhere in the interior!');\n            }\n            if (x === i && y === j && dir === entry_dir[nextedge]) {\n              finalized = true;\n              enter = nextedge;\n              break;\n            }\n            while (1) {\n              found_entry = false;\n              if (count > 4) throw new Error('Direction change counter overflow! This should never happen!');\n              if (!(typeof cellGrid[x] === 'undefined' || typeof cellGrid[x][y] === 'undefined')) {\n                cc = cellGrid[x][y];\n\n                /* check for re-entry */\n                for (s = 0; s < valid_entries[dir].length; s++) {\n                  ve = valid_entries[dir][s];\n                  if (typeof cc.edges[ve] === 'object') {\n                    /* found re-entry */\n                    ee = cc.edges[ve];\n                    path.push(entry_coordinate(x, y, dir, ee.path));\n                    enter = ve;\n                    found_entry = true;\n                    break;\n                  }\n                }\n              }\n              if (found_entry) {\n                break;\n              } else {\n                path.push(skip_coordinate(x, y, dir));\n                x += add_x[dir];\n                y += add_y[dir];\n\n                /* change direction if we'e moved out of grid again */\n                if (typeof cellGrid[x] === 'undefined' || typeof cellGrid[x][y] === 'undefined') {\n                  if (dir === 0 && y < 0 || dir === 1 && x < 0 || dir === 2 && y === rows || dir === 3 && x === cols) {\n                    x -= add_x[dir];\n                    y -= add_y[dir];\n                    dir = (dir + 1) % 4;\n                    count++;\n                  }\n                }\n                if (x === i && y === j && dir === entry_dir[nextedge]) {\n                  /* we are back where we started off, so finalize the polygon */\n                  finalized = true;\n                  enter = nextedge;\n                  break;\n                }\n              }\n            }\n          }\n        }\n        if (settings.linearRing && (path[path.length - 1][0] !== origin[0] || path[path.length - 1][1] !== origin[1])) path.push(origin);\n        polygons.push(path);\n      } /* end forall entry sites */\n    }); /* end foreach i */\n  }); /* end foreach j */\n\n  return polygons;\n}\nfunction traceLinePaths(data, cellGrid, settings) {\n  var nextedge, e, ee, cc, path, enter, x, y, finalized, origin, point, dir, count, found_entry, ve;\n  var polygons = [];\n  var rows = data.length - 1;\n  var cols = data[0].length - 1;\n\n  /*\n   * directions for out-of-grid moves are:\n   * 0 ... \"down\",\n   * 1 ... \"left\",\n   * 2 ... \"up\",\n   * 3 ... \"right\"\n   */\n  var valid_entries = ['right', /* down */\n  'bottom', /* left */\n  'left', /* up */\n  'top' /* right */];\n  var add_x = [0, -1, 0, 1];\n  var add_y = [-1, 0, 1, 0];\n  var entry_dir = {\n    bottom: 1,\n    left: 2,\n    top: 3,\n    right: 0\n  };\n\n  /* first, detect whether we need any outer frame */\n  if (!settings.noFrame) if (requireLineFrame(data, settings.threshold)) {\n    if (settings.linearRing) polygons.push([[0, 0], [0, rows], [cols, rows], [cols, 0], [0, 0]]);else polygons.push([[0, 0], [0, rows], [cols, rows], [cols, 0]]);\n  }\n\n  /* finally, start tracing back first polygon(s) */\n\n  cellGrid.forEach(function (a, i) {\n    a.forEach(function (cell, j) {\n      nextedge = null;\n\n      /* trace paths for all available edges that go through this cell */\n      for (e = 0; e < 4; e++) {\n        nextedge = valid_entries[e];\n        if (typeof cell.edges[nextedge] !== 'object') continue;\n\n        /* start a new, full path */\n        path = [];\n        ee = cell.edges[nextedge];\n        enter = nextedge;\n        x = i;\n        y = j;\n        finalized = false;\n        origin = [i + ee.path[0][0], j + ee.path[0][1]];\n\n        /* add start coordinate */\n        path.push(origin);\n\n        /* start traceback */\n        while (!finalized) {\n          cc = cellGrid[x][y];\n          if (typeof cc.edges[enter] !== 'object') break;\n          ee = cc.edges[enter];\n\n          /* remove edge from cell */\n          delete cc.edges[enter];\n\n          /* add last point of edge to path arra, since we extend a polygon */\n          point = ee.path[1];\n          point[0] += x;\n          point[1] += y;\n          path.push(point);\n          enter = ee.move.enter;\n          x = x + ee.move.x;\n          y = y + ee.move.y;\n\n          /* handle out-of-grid moves */\n          if (typeof cellGrid[x] === 'undefined' || typeof cellGrid[x][y] === 'undefined') {\n            if (!settings.linearRing) break;\n            dir = 0;\n            count = 0;\n            if (x === cols) {\n              x--;\n              dir = 0; /* move downwards */\n            } else if (x < 0) {\n              x++;\n              dir = 2; /* move upwards */\n            } else if (y === rows) {\n              y--;\n              dir = 3; /* move right */\n            } else if (y < 0) {\n              y++;\n              dir = 1; /* move left */\n            }\n            if (x === i && y === j && dir === entry_dir[nextedge]) {\n              finalized = true;\n              enter = nextedge;\n              break;\n            }\n            while (1) {\n              found_entry = false;\n              if (count > 4) throw new Error('Direction change counter overflow! This should never happen!');\n              if (!(typeof cellGrid[x] === 'undefined' || typeof cellGrid[x][y] === 'undefined')) {\n                cc = cellGrid[x][y];\n\n                /* check for re-entry */\n                ve = valid_entries[dir];\n                if (typeof cc.edges[ve] === 'object') {\n                  /* found re-entry */\n                  ee = cc.edges[ve];\n                  path.push(entry_coordinate(x, y, dir, ee.path));\n                  enter = ve;\n                  found_entry = true;\n                  break;\n                }\n              }\n              if (found_entry) {\n                break;\n              } else {\n                path.push(skip_coordinate(x, y, dir));\n                x += add_x[dir];\n                y += add_y[dir];\n\n                /* change direction if we'e moved out of grid again */\n                if (typeof cellGrid[x] === 'undefined' || typeof cellGrid[x][y] === 'undefined') {\n                  if (dir === 0 && y < 0 || dir === 1 && x < 0 || dir === 2 && y === rows || dir === 3 && x === cols) {\n                    x -= add_x[dir];\n                    y -= add_y[dir];\n                    dir = (dir + 1) % 4;\n                    count++;\n                  }\n                }\n                if (x === i && y === j && dir === entry_dir[nextedge]) {\n                  /* we are back where we started off, so finalize the polygon */\n                  finalized = true;\n                  enter = nextedge;\n                  break;\n                }\n              }\n            }\n          }\n        }\n        if (settings.linearRing && (path[path.length - 1][0] !== origin[0] || path[path.length - 1][1] !== origin[1])) path.push(origin);\n        polygons.push(path);\n      } /* end forall entry sites */\n    }); /* end foreach i */\n  }); /* end foreach j */\n\n  return polygons;\n}\n\n/* quadTree node constructor */\nfunction TreeNode(data, x, y, dx, dy) {\n  var dx_tmp = dx,\n    dy_tmp = dy,\n    msb_x = 0,\n    msb_y = 0;\n\n  /* left-bottom corner of current quadrant */\n  this.x = x;\n  this.y = y;\n\n  /* minimum value in subtree under this node */\n  this.lowerBound = null;\n  /* maximum value in subtree under this node */\n  this.upperBound = null;\n\n  /*\n   *  child nodes are layed out in the following way:\n   *\n   *  (x, y + 1) ---- (x + 1, y + 1)\n   *  |             |              |\n   *  |      D      |      C       |\n   *  |             |              |\n   *  |----------------------------|\n   *  |             |              |\n   *  |      A      |      B       |\n   *  |             |              |\n   *  (x, y) ------------ (x + 1, y)\n   */\n  this.childA = null;\n  this.childB = null;\n  this.childC = null;\n  this.childD = null;\n  if (dx === 1 && dy === 1) {\n    /* do not further subdivision */\n    this.lowerBound = Math.min(data[y][x], data[y][x + 1], data[y + 1][x + 1], data[y + 1][x]);\n    this.upperBound = Math.max(data[y][x], data[y][x + 1], data[y + 1][x + 1], data[y + 1][x]);\n  } else {\n    /* get most significant bit from dx */\n    if (dx > 1) {\n      while (dx_tmp !== 0) {\n        dx_tmp = dx_tmp >> 1;\n        msb_x++;\n      }\n      if (dx === 1 << msb_x - 1) msb_x--;\n      dx_tmp = 1 << msb_x - 1;\n    }\n\n    /* get most significant bit from dx */\n    if (dy > 1) {\n      while (dy_tmp !== 0) {\n        dy_tmp = dy_tmp >> 1;\n        msb_y++;\n      }\n      if (dy === 1 << msb_y - 1) msb_y--;\n      dy_tmp = 1 << msb_y - 1;\n    }\n    this.childA = new TreeNode(data, x, y, dx_tmp, dy_tmp);\n    this.lowerBound = this.childA.lowerBound;\n    this.upperBound = this.childA.upperBound;\n    if (dx - dx_tmp > 0) {\n      this.childB = new TreeNode(data, x + dx_tmp, y, dx - dx_tmp, dy_tmp);\n      this.lowerBound = Math.min(this.lowerBound, this.childB.lowerBound);\n      this.upperBound = Math.max(this.upperBound, this.childB.upperBound);\n      if (dy - dy_tmp > 0) {\n        this.childC = new TreeNode(data, x + dx_tmp, y + dy_tmp, dx - dx_tmp, dy - dy_tmp);\n        this.lowerBound = Math.min(this.lowerBound, this.childC.lowerBound);\n        this.upperBound = Math.max(this.upperBound, this.childC.upperBound);\n      }\n    }\n    if (dy - dy_tmp > 0) {\n      this.childD = new TreeNode(data, x, y + dy_tmp, dx_tmp, dy - dy_tmp);\n      this.lowerBound = Math.min(this.lowerBound, this.childD.lowerBound);\n      this.upperBound = Math.max(this.upperBound, this.childD.upperBound);\n    }\n  }\n}\n\n/**\n *  Retrieve a list of cells within a particular range of values by\n *  recursivly traversing the quad tree to it's leaves.\n *\n *  @param  subsumed  If 'true' include all cells that are completely\n *                    subsumed within the specified range. Otherwise,\n *                    return only cells where at least one corner is\n *                    outside the specified range.\n *\n *  @return   An array of objects 'o' where each object has exactly two\n *            properties: 'o.x' and 'o.y' denoting the left-bottom corner\n *            of the corresponding cell.\n */\nTreeNode.prototype.cellsInBand = function (lowerBound, upperBound, subsumed) {\n  var cells = [];\n  subsumed = typeof subsumed === 'undefined' ? true : subsumed;\n  if (this.lowerBound > upperBound || this.upperBound < lowerBound) return cells;\n  if (!(this.childA || this.childB || this.childC || this.childD)) {\n    if (subsumed || this.lowerBound <= lowerBound || this.upperBound >= upperBound) {\n      cells.push({\n        x: this.x,\n        y: this.y\n      });\n    }\n  } else {\n    if (this.childA) cells = cells.concat(this.childA.cellsInBand(lowerBound, upperBound, subsumed));\n    if (this.childB) cells = cells.concat(this.childB.cellsInBand(lowerBound, upperBound, subsumed));\n    if (this.childD) cells = cells.concat(this.childD.cellsInBand(lowerBound, upperBound, subsumed));\n    if (this.childC) cells = cells.concat(this.childC.cellsInBand(lowerBound, upperBound, subsumed));\n  }\n  return cells;\n};\nTreeNode.prototype.cellsBelowThreshold = function (threshold, subsumed) {\n  var cells = [];\n  subsumed = typeof subsumed === 'undefined' ? true : subsumed;\n  if (this.lowerBound > threshold) return cells;\n  if (!(this.childA || this.childB || this.childC || this.childD)) {\n    if (subsumed || this.upperBound >= threshold) {\n      cells.push({\n        x: this.x,\n        y: this.y\n      });\n    }\n  } else {\n    if (this.childA) cells = cells.concat(this.childA.cellsBelowThreshold(threshold, subsumed));\n    if (this.childB) cells = cells.concat(this.childB.cellsBelowThreshold(threshold, subsumed));\n    if (this.childD) cells = cells.concat(this.childD.cellsBelowThreshold(threshold, subsumed));\n    if (this.childC) cells = cells.concat(this.childC.cellsBelowThreshold(threshold, subsumed));\n  }\n  return cells;\n};\n\n/*\n * Given a scalar field `data` construct a QuadTree\n * to efficiently lookup those parts of the scalar\n * field where values are within a particular\n * range of [lowerbound, upperbound] limits.\n */\nfunction QuadTree(data) {\n  var i, cols;\n\n  /* do some input checking */\n  if (!data) throw new Error('data is required');\n  if (!Array.isArray(data) || !Array.isArray(data[0])) throw new Error('data must be scalar field, i.e. array of arrays');\n  if (data.length < 2) throw new Error('data must contain at least two rows');\n\n  /* check if we've got a regular grid */\n  cols = data[0].length;\n  if (cols < 2) throw new Error('data must contain at least two columns');\n  for (i = 1; i < data.length; i++) {\n    if (!Array.isArray(data[i])) throw new Error('Row ' + i + ' is not an array');\n    if (data[i].length != cols) throw new Error('unequal row lengths detected, please provide a regular grid');\n  }\n\n  /* create pre-processing object */\n  this.data = data;\n  /* root node, i.e. entry to the data */\n  this.root = new TreeNode(data, 0, 0, data[0].length - 1, data.length - 1);\n}\n\n/* eslint no-console: [\"error\", { allow: [\"log\"] }] */\n\n/*\n * Compute the iso lines for a scalar 2D field given\n * a certain threshold by applying the Marching Squares\n * Algorithm. The function returns a list of path coordinates\n */\n\nfunction isoLines(input, threshold, options) {\n  var settings,\n    i,\n    j,\n    useQuadTree = false,\n    multiLine = false,\n    tree = null,\n    root = null,\n    data = null,\n    cellGrid = null,\n    linePolygons = null,\n    ret = [];\n\n  /* validation */\n  if (!input) throw new Error('data is required');\n  if (threshold === undefined || threshold === null) throw new Error('threshold is required');\n  if (!!options && typeof options !== 'object') throw new Error('options must be an object');\n\n  /* process options */\n  settings = isoLineOptions(options);\n\n  /* check for input data */\n  if (input instanceof QuadTree) {\n    tree = input;\n    root = input.root;\n    data = input.data;\n    if (!settings.noQuadTree) useQuadTree = true;\n  } else if (Array.isArray(input) && Array.isArray(input[0])) {\n    data = input;\n  } else {\n    throw new Error('input is neither array of arrays nor object retrieved from \\'QuadTree()\\'');\n  }\n\n  /* check and prepare input threshold(s) */\n  if (Array.isArray(threshold)) {\n    multiLine = true;\n\n    /* activate QuadTree optimization if not explicitly forbidden by user settings */\n    if (!settings.noQuadTree) useQuadTree = true;\n\n    /* check if all minV are numbers */\n    for (i = 0; i < threshold.length; i++) if (isNaN(+threshold[i])) throw new Error('threshold[' + i + '] is not a number');\n  } else {\n    if (isNaN(+threshold)) throw new Error('threshold must be a number or array of numbers');\n    threshold = [threshold];\n  }\n\n  /* create QuadTree root node if not already present */\n  if (useQuadTree && !root) {\n    tree = new QuadTree(data);\n    root = tree.root;\n    data = tree.data;\n  }\n  if (settings.verbose) {\n    if (settings.polygons) console.log('MarchingSquaresJS-isoLines: returning single lines (polygons) for each grid cell');else console.log('MarchingSquaresJS-isoLines: returning line paths (polygons) for entire data grid');\n    if (multiLine) console.log('MarchingSquaresJS-isoLines: multiple lines requested, returning array of line paths instead of lines for a single threshold');\n  }\n\n  /* Done with all input validation, now let's start computing stuff */\n\n  /* loop over all threhsold values */\n  threshold.forEach(function (t, i) {\n    linePolygons = [];\n\n    /* store bounds for current computation in settings object */\n    settings.threshold = t;\n    if (settings.verbose) console.log('MarchingSquaresJS-isoLines: computing iso lines for threshold ' + t);\n    if (settings.polygons) {\n      /* compose list of polygons for each single cell */\n      if (useQuadTree) {\n        /* go through list of cells retrieved from QuadTree */\n        root.cellsBelowThreshold(settings.threshold, true).forEach(function (c) {\n          linePolygons = linePolygons.concat(cell2Polygons(prepareCell(data, c.x, c.y, settings), c.x, c.y, settings));\n        });\n      } else {\n        /* go through entire array of input data */\n        for (j = 0; j < data.length - 1; ++j) {\n          for (i = 0; i < data[0].length - 1; ++i) linePolygons = linePolygons.concat(cell2Polygons(prepareCell(data, i, j, settings), i, j, settings));\n        }\n      }\n    } else {\n      /* sparse grid of input data cells */\n      cellGrid = [];\n      for (i = 0; i < data[0].length - 1; ++i) cellGrid[i] = [];\n\n      /* compose list of polygons for entire input grid */\n      if (useQuadTree) {\n        /* collect the cells */\n        root.cellsBelowThreshold(settings.threshold, false).forEach(function (c) {\n          cellGrid[c.x][c.y] = prepareCell(data, c.x, c.y, settings);\n        });\n      } else {\n        /* prepare cells */\n        for (i = 0; i < data[0].length - 1; ++i) {\n          for (j = 0; j < data.length - 1; ++j) {\n            cellGrid[i][j] = prepareCell(data, i, j, settings);\n          }\n        }\n      }\n      linePolygons = traceLinePaths(data, cellGrid, settings);\n    }\n\n    /* finally, add polygons to output array */\n    if (multiLine) ret.push(linePolygons);else ret = linePolygons;\n    if (typeof settings.successCallback === 'function') settings.successCallback(ret, t);\n  });\n  return ret;\n}\n\n/*\n * Thats all for the public interface, below follows the actual\n * implementation\n */\n\n/*\n * ################################\n * Isocontour implementation below\n * ################################\n */\n\nfunction prepareCell(grid, x, y, settings) {\n  var left, right, top, bottom, average, cell;\n  var cval = 0;\n  var x3 = grid[y + 1][x];\n  var x2 = grid[y + 1][x + 1];\n  var x1 = grid[y][x + 1];\n  var x0 = grid[y][x];\n  var threshold = settings.threshold;\n\n  /*\n   * Note that missing data within the grid will result\n   * in horribly failing to trace full polygon paths\n   */\n  if (isNaN(x0) || isNaN(x1) || isNaN(x2) || isNaN(x3)) {\n    return;\n  }\n\n  /*\n   * Here we detect the type of the cell\n   *\n   * x3 ---- x2\n   * |      |\n   * |      |\n   * x0 ---- x1\n   *\n   * with edge points\n   *\n   * x0 = (x,y),\n   * x1 = (x + 1, y),\n   * x2 = (x + 1, y + 1), and\n   * x3 = (x, y + 1)\n   *\n   * and compute the polygon intersections with the edges\n   * of the cell. Each edge value may be (i) smaller, or (ii)\n   * greater or equal to the iso line threshold. We encode\n   * this property using 1 bit of information, where\n   *\n   * 0 ... below,\n   * 1 ... above or equal\n   *\n   * Then we store the cells value as vector\n   *\n   * cval = (x0, x1, x2, x3)\n   *\n   * where x0 is the least significant bit (0th),\n   * x1 the 2nd bit, and so on. This essentially\n   * enables us to work with a single integer number\n   */\n\n  cval |= x3 >= threshold ? 8 : 0;\n  cval |= x2 >= threshold ? 4 : 0;\n  cval |= x1 >= threshold ? 2 : 0;\n  cval |= x0 >= threshold ? 1 : 0;\n\n  /* make sure cval is a number */\n  cval = +cval;\n\n  /* compose the cell object */\n  cell = {\n    cval: cval,\n    polygons: [],\n    edges: {},\n    x0: x0,\n    x1: x1,\n    x2: x2,\n    x3: x3\n  };\n\n  /*\n   * Compute interpolated intersections of the polygon(s)\n   * with the cell borders and (i) add edges for polygon\n   * trace-back, or (ii) a list of small closed polygons\n   */\n  switch (cval) {\n    case 0:\n      if (settings.polygons) cell.polygons.push([[0, 0], [0, 1], [1, 1], [1, 0]]);\n      break;\n    case 15:\n      /* cell is outside (above) threshold, no polygons */\n      break;\n    case 14:\n      /* 1110 */\n      left = settings.interpolate(x0, x3, threshold);\n      bottom = settings.interpolate(x0, x1, threshold);\n      if (settings.polygons_full) {\n        cell.edges.left = {\n          path: [[0, left], [bottom, 0]],\n          move: {\n            x: 0,\n            y: -1,\n            enter: 'top'\n          }\n        };\n      }\n      if (settings.polygons) cell.polygons.push([[0, 0], [0, left], [bottom, 0]]);\n      break;\n    case 13:\n      /* 1101 */\n      bottom = settings.interpolate(x0, x1, threshold);\n      right = settings.interpolate(x1, x2, threshold);\n      if (settings.polygons_full) {\n        cell.edges.bottom = {\n          path: [[bottom, 0], [1, right]],\n          move: {\n            x: 1,\n            y: 0,\n            enter: 'left'\n          }\n        };\n      }\n      if (settings.polygons) cell.polygons.push([[bottom, 0], [1, right], [1, 0]]);\n      break;\n    case 11:\n      /* 1011 */\n      right = settings.interpolate(x1, x2, threshold);\n      top = settings.interpolate(x3, x2, threshold);\n      if (settings.polygons_full) {\n        cell.edges.right = {\n          path: [[1, right], [top, 1]],\n          move: {\n            x: 0,\n            y: 1,\n            enter: 'bottom'\n          }\n        };\n      }\n      if (settings.polygons) cell.polygons.push([[1, right], [top, 1], [1, 1]]);\n      break;\n    case 7:\n      /* 0111 */\n      left = settings.interpolate(x0, x3, threshold);\n      top = settings.interpolate(x3, x2, threshold);\n      if (settings.polygons_full) {\n        cell.edges.top = {\n          path: [[top, 1], [0, left]],\n          move: {\n            x: -1,\n            y: 0,\n            enter: 'right'\n          }\n        };\n      }\n      if (settings.polygons) cell.polygons.push([[top, 1], [0, left], [0, 1]]);\n      break;\n    case 1:\n      /* 0001 */\n      left = settings.interpolate(x0, x3, threshold);\n      bottom = settings.interpolate(x0, x1, threshold);\n      if (settings.polygons_full) {\n        cell.edges.bottom = {\n          path: [[bottom, 0], [0, left]],\n          move: {\n            x: -1,\n            y: 0,\n            enter: 'right'\n          }\n        };\n      }\n      if (settings.polygons) cell.polygons.push([[bottom, 0], [0, left], [0, 1], [1, 1], [1, 0]]);\n      break;\n    case 2:\n      /* 0010 */\n      bottom = settings.interpolate(x0, x1, threshold);\n      right = settings.interpolate(x1, x2, threshold);\n      if (settings.polygons_full) {\n        cell.edges.right = {\n          path: [[1, right], [bottom, 0]],\n          move: {\n            x: 0,\n            y: -1,\n            enter: 'top'\n          }\n        };\n      }\n      if (settings.polygons) cell.polygons.push([[0, 0], [0, 1], [1, 1], [1, right], [bottom, 0]]);\n      break;\n    case 4:\n      /* 0100 */\n      right = settings.interpolate(x1, x2, threshold);\n      top = settings.interpolate(x3, x2, threshold);\n      if (settings.polygons_full) {\n        cell.edges.top = {\n          path: [[top, 1], [1, right]],\n          move: {\n            x: 1,\n            y: 0,\n            enter: 'left'\n          }\n        };\n      }\n      if (settings.polygons) cell.polygons.push([[0, 0], [0, 1], [top, 1], [1, right], [1, 0]]);\n      break;\n    case 8:\n      /* 1000 */\n      left = settings.interpolate(x0, x3, threshold);\n      top = settings.interpolate(x3, x2, threshold);\n      if (settings.polygons_full) {\n        cell.edges.left = {\n          path: [[0, left], [top, 1]],\n          move: {\n            x: 0,\n            y: 1,\n            enter: 'bottom'\n          }\n        };\n      }\n      if (settings.polygons) cell.polygons.push([[0, 0], [0, left], [top, 1], [1, 1], [1, 0]]);\n      break;\n    case 12:\n      /* 1100 */\n      left = settings.interpolate(x0, x3, threshold);\n      right = settings.interpolate(x1, x2, threshold);\n      if (settings.polygons_full) {\n        cell.edges.left = {\n          path: [[0, left], [1, right]],\n          move: {\n            x: 1,\n            y: 0,\n            enter: 'left'\n          }\n        };\n      }\n      if (settings.polygons) cell.polygons.push([[0, 0], [0, left], [1, right], [1, 0]]);\n      break;\n    case 9:\n      /* 1001 */\n      bottom = settings.interpolate(x0, x1, threshold);\n      top = settings.interpolate(x3, x2, threshold);\n      if (settings.polygons_full) {\n        cell.edges.bottom = {\n          path: [[bottom, 0], [top, 1]],\n          move: {\n            x: 0,\n            y: 1,\n            enter: 'bottom'\n          }\n        };\n      }\n      if (settings.polygons) cell.polygons.push([[bottom, 0], [top, 1], [1, 1], [1, 0]]);\n      break;\n    case 3:\n      /* 0011 */\n      left = settings.interpolate(x0, x3, threshold);\n      right = settings.interpolate(x1, x2, threshold);\n      if (settings.polygons_full) {\n        cell.edges.right = {\n          path: [[1, right], [0, left]],\n          move: {\n            x: -1,\n            y: 0,\n            enter: 'right'\n          }\n        };\n      }\n      if (settings.polygons) cell.polygons.push([[0, left], [0, 1], [1, 1], [1, right]]);\n      break;\n    case 6:\n      /* 0110 */\n      bottom = settings.interpolate(x0, x1, threshold);\n      top = settings.interpolate(x3, x2, threshold);\n      if (settings.polygons_full) {\n        cell.edges.top = {\n          path: [[top, 1], [bottom, 0]],\n          move: {\n            x: 0,\n            y: -1,\n            enter: 'top'\n          }\n        };\n      }\n      if (settings.polygons) cell.polygons.push([[0, 0], [0, 1], [top, 1], [bottom, 0]]);\n      break;\n    case 10:\n      /* 1010 */\n      left = settings.interpolate(x0, x3, threshold);\n      right = settings.interpolate(x1, x2, threshold);\n      bottom = settings.interpolate(x0, x1, threshold);\n      top = settings.interpolate(x3, x2, threshold);\n      average = (x0 + x1 + x2 + x3) / 4;\n      if (settings.polygons_full) {\n        if (average < threshold) {\n          cell.edges.left = {\n            path: [[0, left], [top, 1]],\n            move: {\n              x: 0,\n              y: 1,\n              enter: 'bottom'\n            }\n          };\n          cell.edges.right = {\n            path: [[1, right], [bottom, 0]],\n            move: {\n              x: 0,\n              y: -1,\n              enter: 'top'\n            }\n          };\n        } else {\n          cell.edges.right = {\n            path: [[1, right], [top, 1]],\n            move: {\n              x: 0,\n              y: 1,\n              enter: 'bottom'\n            }\n          };\n          cell.edges.left = {\n            path: [[0, left], [bottom, 0]],\n            move: {\n              x: 0,\n              y: -1,\n              enter: 'top'\n            }\n          };\n        }\n      }\n      if (settings.polygons) {\n        if (average < threshold) {\n          cell.polygons.push([[0, 0], [0, left], [top, 1], [1, 1], [1, right], [bottom, 0]]);\n        } else {\n          cell.polygons.push([[0, 0], [0, left], [bottom, 0]]);\n          cell.polygons.push([[top, 1], [1, 1], [1, right]]);\n        }\n      }\n      break;\n    case 5:\n      /* 0101 */\n      left = settings.interpolate(x0, x3, threshold);\n      right = settings.interpolate(x1, x2, threshold);\n      bottom = settings.interpolate(x0, x1, threshold);\n      top = settings.interpolate(x3, x2, threshold);\n      average = (x0 + x1 + x2 + x3) / 4;\n      if (settings.polygons_full) {\n        if (average < threshold) {\n          cell.edges.bottom = {\n            path: [[bottom, 0], [0, left]],\n            move: {\n              x: -1,\n              y: 0,\n              enter: 'right'\n            }\n          };\n          cell.edges.top = {\n            path: [[top, 1], [1, right]],\n            move: {\n              x: 1,\n              y: 0,\n              enter: 'left'\n            }\n          };\n        } else {\n          cell.edges.top = {\n            path: [[top, 1], [0, left]],\n            move: {\n              x: -1,\n              y: 0,\n              enter: 'right'\n            }\n          };\n          cell.edges.bottom = {\n            path: [[bottom, 0], [1, right]],\n            move: {\n              x: 1,\n              y: 0,\n              enter: 'left'\n            }\n          };\n        }\n      }\n      if (settings.polygons) {\n        if (average < threshold) {\n          cell.polygons.push([[0, left], [0, 1], [top, 1], [1, right], [1, 0], [bottom, 0]]);\n        } else {\n          cell.polygons.push([[0, left], [0, 1], [top, 1]]);\n          cell.polygons.push([[bottom, 0], [1, right], [1, 0]]);\n        }\n      }\n      break;\n  }\n  return cell;\n}\n\n/* eslint no-console: [\"error\", { allow: [\"log\"] }] */\n\n/*\n * lookup table to generate polygon paths or edges required to\n * trace the full polygon(s)\n */\nvar shapeCoordinates = {\n  square: function (cell, x0, x1, x2, x3, opt) {\n    if (opt.polygons) cell.polygons.push([[0, 0], [0, 1], [1, 1], [1, 0]]);\n  },\n  triangle_bl: function (cell, x0, x1, x2, x3, opt) {\n    var bottomleft = opt.interpolate(x0, x1, opt.minV, opt.maxV);\n    var leftbottom = opt.interpolate(x0, x3, opt.minV, opt.maxV);\n    if (opt.polygons_full) {\n      cell.edges.lb = {\n        path: [[0, leftbottom], [bottomleft, 0]],\n        move: {\n          x: 0,\n          y: -1,\n          enter: 'tl'\n        }\n      };\n    }\n    if (opt.polygons) cell.polygons.push([[0, leftbottom], [bottomleft, 0], [0, 0]]);\n  },\n  triangle_br: function (cell, x0, x1, x2, x3, opt) {\n    var bottomright = opt.interpolate(x0, x1, opt.minV, opt.maxV);\n    var rightbottom = opt.interpolate(x1, x2, opt.minV, opt.maxV);\n    if (opt.polygons_full) {\n      cell.edges.br = {\n        path: [[bottomright, 0], [1, rightbottom]],\n        move: {\n          x: 1,\n          y: 0,\n          enter: 'lb'\n        }\n      };\n    }\n    if (opt.polygons) cell.polygons.push([[bottomright, 0], [1, rightbottom], [1, 0]]);\n  },\n  triangle_tr: function (cell, x0, x1, x2, x3, opt) {\n    var righttop = opt.interpolate(x1, x2, opt.minV, opt.maxV);\n    var topright = opt.interpolate(x3, x2, opt.minV, opt.maxV);\n    if (opt.polygons_full) {\n      cell.edges.rt = {\n        path: [[1, righttop], [topright, 1]],\n        move: {\n          x: 0,\n          y: 1,\n          enter: 'br'\n        }\n      };\n    }\n    if (opt.polygons) cell.polygons.push([[1, righttop], [topright, 1], [1, 1]]);\n  },\n  triangle_tl: function (cell, x0, x1, x2, x3, opt) {\n    var topleft = opt.interpolate(x3, x2, opt.minV, opt.maxV);\n    var lefttop = opt.interpolate(x0, x3, opt.minV, opt.maxV);\n    if (opt.polygons_full) {\n      cell.edges.tl = {\n        path: [[topleft, 1], [0, lefttop]],\n        move: {\n          x: -1,\n          y: 0,\n          enter: 'rt'\n        }\n      };\n    }\n    if (opt.polygons) cell.polygons.push([[0, lefttop], [0, 1], [topleft, 1]]);\n  },\n  tetragon_t: function (cell, x0, x1, x2, x3, opt) {\n    var righttop = opt.interpolate(x1, x2, opt.minV, opt.maxV);\n    var lefttop = opt.interpolate(x0, x3, opt.minV, opt.maxV);\n    if (opt.polygons_full) {\n      cell.edges.rt = {\n        path: [[1, righttop], [0, lefttop]],\n        move: {\n          x: -1,\n          y: 0,\n          enter: 'rt'\n        }\n      };\n    }\n    if (opt.polygons) cell.polygons.push([[0, lefttop], [0, 1], [1, 1], [1, righttop]]);\n  },\n  tetragon_r: function (cell, x0, x1, x2, x3, opt) {\n    var bottomright = opt.interpolate(x0, x1, opt.minV, opt.maxV);\n    var topright = opt.interpolate(x3, x2, opt.minV, opt.maxV);\n    if (opt.polygons_full) {\n      cell.edges.br = {\n        path: [[bottomright, 0], [topright, 1]],\n        move: {\n          x: 0,\n          y: 1,\n          enter: 'br'\n        }\n      };\n    }\n    if (opt.polygons) cell.polygons.push([[bottomright, 0], [topright, 1], [1, 1], [1, 0]]);\n  },\n  tetragon_b: function (cell, x0, x1, x2, x3, opt) {\n    var leftbottom = opt.interpolate(x0, x3, opt.minV, opt.maxV);\n    var rightbottom = opt.interpolate(x1, x2, opt.minV, opt.maxV);\n    if (opt.polygons_full) {\n      cell.edges.lb = {\n        path: [[0, leftbottom], [1, rightbottom]],\n        move: {\n          x: 1,\n          y: 0,\n          enter: 'lb'\n        }\n      };\n    }\n    if (opt.polygons) cell.polygons.push([[0, 0], [0, leftbottom], [1, rightbottom], [1, 0]]);\n  },\n  tetragon_l: function (cell, x0, x1, x2, x3, opt) {\n    var topleft = opt.interpolate(x3, x2, opt.minV, opt.maxV);\n    var bottomleft = opt.interpolate(x0, x1, opt.minV, opt.maxV);\n    if (opt.polygons_full) {\n      cell.edges.tl = {\n        path: [[topleft, 1], [bottomleft, 0]],\n        move: {\n          x: 0,\n          y: -1,\n          enter: 'tl'\n        }\n      };\n    }\n    if (opt.polygons) cell.polygons.push([[0, 0], [0, 1], [topleft, 1], [bottomleft, 0]]);\n  },\n  tetragon_bl: function (cell, x0, x1, x2, x3, opt) {\n    var bottomleft = opt.interpolate_a(x0, x1, opt.minV, opt.maxV);\n    var bottomright = opt.interpolate_b(x0, x1, opt.minV, opt.maxV);\n    var leftbottom = opt.interpolate_a(x0, x3, opt.minV, opt.maxV);\n    var lefttop = opt.interpolate_b(x0, x3, opt.minV, opt.maxV);\n    if (opt.polygons_full) {\n      cell.edges.bl = {\n        path: [[bottomleft, 0], [0, leftbottom]],\n        move: {\n          x: -1,\n          y: 0,\n          enter: 'rb'\n        }\n      };\n      cell.edges.lt = {\n        path: [[0, lefttop], [bottomright, 0]],\n        move: {\n          x: 0,\n          y: -1,\n          enter: 'tr'\n        }\n      };\n    }\n    if (opt.polygons) cell.polygons.push([[bottomleft, 0], [0, leftbottom], [0, lefttop], [bottomright, 0]]);\n  },\n  tetragon_br: function (cell, x0, x1, x2, x3, opt) {\n    var bottomleft = opt.interpolate_a(x0, x1, opt.minV, opt.maxV);\n    var bottomright = opt.interpolate_b(x0, x1, opt.minV, opt.maxV);\n    var rightbottom = opt.interpolate_a(x1, x2, opt.minV, opt.maxV);\n    var righttop = opt.interpolate_b(x1, x2, opt.minV, opt.maxV);\n    if (opt.polygons_full) {\n      cell.edges.bl = {\n        path: [[bottomleft, 0], [1, righttop]],\n        move: {\n          x: 1,\n          y: 0,\n          enter: 'lt'\n        }\n      };\n      cell.edges.rb = {\n        path: [[1, rightbottom], [bottomright, 0]],\n        move: {\n          x: 0,\n          y: -1,\n          enter: 'tr'\n        }\n      };\n    }\n    if (opt.polygons) cell.polygons.push([[bottomleft, 0], [1, righttop], [1, rightbottom], [bottomright, 0]]);\n  },\n  tetragon_tr: function (cell, x0, x1, x2, x3, opt) {\n    var topleft = opt.interpolate_a(x3, x2, opt.minV, opt.maxV);\n    var topright = opt.interpolate_b(x3, x2, opt.minV, opt.maxV);\n    var righttop = opt.interpolate_b(x1, x2, opt.minV, opt.maxV);\n    var rightbottom = opt.interpolate_a(x1, x2, opt.minV, opt.maxV);\n    if (opt.polygons_full) {\n      cell.edges.rb = {\n        path: [[1, rightbottom], [topleft, 1]],\n        move: {\n          x: 0,\n          y: 1,\n          enter: 'bl'\n        }\n      };\n      cell.edges.tr = {\n        path: [[topright, 1], [1, righttop]],\n        move: {\n          x: 1,\n          y: 0,\n          enter: 'lt'\n        }\n      };\n    }\n    if (opt.polygons) cell.polygons.push([[1, rightbottom], [topleft, 1], [topright, 1], [1, righttop]]);\n  },\n  tetragon_tl: function (cell, x0, x1, x2, x3, opt) {\n    var topleft = opt.interpolate_a(x3, x2, opt.minV, opt.maxV);\n    var topright = opt.interpolate_b(x3, x2, opt.minV, opt.maxV);\n    var lefttop = opt.interpolate_b(x0, x3, opt.minV, opt.maxV);\n    var leftbottom = opt.interpolate_a(x0, x3, opt.minV, opt.maxV);\n    if (opt.polygons_full) {\n      cell.edges.tr = {\n        path: [[topright, 1], [0, leftbottom]],\n        move: {\n          x: -1,\n          y: 0,\n          enter: 'rb'\n        }\n      };\n      cell.edges.lt = {\n        path: [[0, lefttop], [topleft, 1]],\n        move: {\n          x: 0,\n          y: 1,\n          enter: 'bl'\n        }\n      };\n    }\n    if (opt.polygons) cell.polygons.push([[topright, 1], [0, leftbottom], [0, lefttop], [topleft, 1]]);\n  },\n  tetragon_lr: function (cell, x0, x1, x2, x3, opt) {\n    var leftbottom = opt.interpolate_a(x0, x3, opt.minV, opt.maxV);\n    var lefttop = opt.interpolate_b(x0, x3, opt.minV, opt.maxV);\n    var righttop = opt.interpolate_b(x1, x2, opt.minV, opt.maxV);\n    var rightbottom = opt.interpolate_a(x1, x2, opt.minV, opt.maxV);\n    if (opt.polygons_full) {\n      cell.edges.lt = {\n        path: [[0, lefttop], [1, righttop]],\n        move: {\n          x: 1,\n          y: 0,\n          enter: 'lt'\n        }\n      };\n      cell.edges.rb = {\n        path: [[1, rightbottom], [0, leftbottom]],\n        move: {\n          x: -1,\n          y: 0,\n          enter: 'rb'\n        }\n      };\n    }\n    if (opt.polygons) cell.polygons.push([[0, leftbottom], [0, lefttop], [1, righttop], [1, rightbottom]]);\n  },\n  tetragon_tb: function (cell, x0, x1, x2, x3, opt) {\n    var topleft = opt.interpolate_a(x3, x2, opt.minV, opt.maxV);\n    var topright = opt.interpolate_b(x3, x2, opt.minV, opt.maxV);\n    var bottomright = opt.interpolate_b(x0, x1, opt.minV, opt.maxV);\n    var bottomleft = opt.interpolate_a(x0, x1, opt.minV, opt.maxV);\n    if (opt.polygons_full) {\n      cell.edges.tr = {\n        path: [[topright, 1], [bottomright, 0]],\n        move: {\n          x: 0,\n          y: -1,\n          enter: 'tr'\n        }\n      };\n      cell.edges.bl = {\n        path: [[bottomleft, 0], [topleft, 1]],\n        move: {\n          x: 0,\n          y: 1,\n          enter: 'bl'\n        }\n      };\n    }\n    if (opt.polygons) cell.polygons.push([[bottomleft, 0], [topleft, 1], [topright, 1], [bottomright, 0]]);\n  },\n  pentagon_tr: function (cell, x0, x1, x2, x3, opt) {\n    var topleft = opt.interpolate(x3, x2, opt.minV, opt.maxV);\n    var rightbottom = opt.interpolate(x1, x2, opt.minV, opt.maxV);\n    if (opt.polygons_full) {\n      cell.edges.tl = {\n        path: [[topleft, 1], [1, rightbottom]],\n        move: {\n          x: 1,\n          y: 0,\n          enter: 'lb'\n        }\n      };\n    }\n    if (opt.polygons) cell.polygons.push([[0, 0], [0, 1], [topleft, 1], [1, rightbottom], [1, 0]]);\n  },\n  pentagon_tl: function (cell, x0, x1, x2, x3, opt) {\n    var leftbottom = opt.interpolate(x0, x3, opt.minV, opt.maxV);\n    var topright = opt.interpolate(x3, x2, opt.minV, opt.maxV);\n    if (opt.polygons_full) {\n      cell.edges.lb = {\n        path: [[0, leftbottom], [topright, 1]],\n        move: {\n          x: 0,\n          y: 1,\n          enter: 'br'\n        }\n      };\n    }\n    if (opt.polygons) cell.polygons.push([[0, 0], [0, leftbottom], [topright, 1], [1, 1], [1, 0]]);\n  },\n  pentagon_br: function (cell, x0, x1, x2, x3, opt) {\n    var bottomleft = opt.interpolate(x0, x1, opt.minV, opt.maxV);\n    var righttop = opt.interpolate(x1, x2, opt.minV, opt.maxV);\n    if (opt.polygons_full) {\n      cell.edges.rt = {\n        path: [[1, righttop], [bottomleft, 0]],\n        move: {\n          x: 0,\n          y: -1,\n          enter: 'tl'\n        }\n      };\n    }\n    if (opt.polygons) cell.polygons.push([[0, 0], [0, 1], [1, 1], [1, righttop], [bottomleft, 0]]);\n  },\n  pentagon_bl: function (cell, x0, x1, x2, x3, opt) {\n    var lefttop = opt.interpolate(x0, x3, opt.minV, opt.maxV);\n    var bottomright = opt.interpolate(x0, x1, opt.minV, opt.maxV);\n    if (opt.polygons_full) {\n      cell.edges.br = {\n        path: [[bottomright, 0], [0, lefttop]],\n        move: {\n          x: -1,\n          y: 0,\n          enter: 'rt'\n        }\n      };\n    }\n    if (opt.polygons) cell.polygons.push([[0, lefttop], [0, 1], [1, 1], [1, 0], [bottomright, 0]]);\n  },\n  pentagon_tr_rl: function (cell, x0, x1, x2, x3, opt) {\n    var lefttop = opt.interpolate(x0, x3, opt.minV, opt.maxV);\n    var topleft = opt.interpolate(x3, x2, opt.minV, opt.maxV);\n    var righttop = opt.interpolate_b(x1, x2, opt.minV, opt.maxV);\n    var rightbottom = opt.interpolate_a(x1, x2, opt.minV, opt.maxV);\n    if (opt.polygons_full) {\n      cell.edges.tl = {\n        path: [[topleft, 1], [1, righttop]],\n        move: {\n          x: 1,\n          y: 0,\n          enter: 'lt'\n        }\n      };\n      cell.edges.rb = {\n        path: [[1, rightbottom], [0, lefttop]],\n        move: {\n          x: -1,\n          y: 0,\n          enter: 'rt'\n        }\n      };\n    }\n    if (opt.polygons) cell.polygons.push([[0, lefttop], [0, 1], [topleft, 1], [1, righttop], [1, rightbottom]]);\n  },\n  pentagon_rb_bt: function (cell, x0, x1, x2, x3, opt) {\n    var righttop = opt.interpolate(x1, x2, opt.minV, opt.maxV);\n    var bottomright = opt.interpolate_b(x0, x1, opt.minV, opt.maxV);\n    var bottomleft = opt.interpolate_a(x0, x1, opt.minV, opt.maxV);\n    var topright = opt.interpolate(x3, x2, opt.minV, opt.maxV);\n    if (opt.polygons_full) {\n      cell.edges.rt = {\n        path: [[1, righttop], [bottomright, 0]],\n        move: {\n          x: 0,\n          y: -1,\n          enter: 'tr'\n        }\n      };\n      cell.edges.bl = {\n        path: [[bottomleft, 0], [topright, 1]],\n        move: {\n          x: 0,\n          y: 1,\n          enter: 'br'\n        }\n      };\n    }\n    if (opt.polygons) cell.polygons.push([[topright, 1], [1, 1], [1, righttop], [bottomright, 0], [bottomleft, 0]]);\n  },\n  pentagon_bl_lr: function (cell, x0, x1, x2, x3, opt) {\n    var bottomright = opt.interpolate(x0, x1, opt.minV, opt.maxV);\n    var leftbottom = opt.interpolate_a(x0, x3, opt.minV, opt.maxV);\n    var lefttop = opt.interpolate_b(x0, x3, opt.minV, opt.maxV);\n    var rightbottom = opt.interpolate(x1, x2, opt.minV, opt.maxV);\n    if (opt.polygons_full) {\n      cell.edges.br = {\n        path: [[bottomright, 0], [0, leftbottom]],\n        move: {\n          x: -1,\n          y: 0,\n          enter: 'rb'\n        }\n      };\n      cell.edges.lt = {\n        path: [[0, lefttop], [1, rightbottom]],\n        move: {\n          x: 1,\n          y: 0,\n          enter: 'lb'\n        }\n      };\n    }\n    if (opt.polygons) cell.polygons.push([[bottomright, 0], [0, leftbottom], [0, lefttop], [1, rightbottom], [1, 0]]);\n  },\n  pentagon_lt_tb: function (cell, x0, x1, x2, x3, opt) {\n    var leftbottom = opt.interpolate(x0, x3, opt.minV, opt.maxV);\n    var topleft = opt.interpolate_a(x3, x2, opt.minV, opt.maxV);\n    var topright = opt.interpolate_b(x3, x2, opt.minV, opt.maxV);\n    var bottomleft = opt.interpolate(x0, x1, opt.minV, opt.maxV);\n    if (opt.polygons_full) {\n      cell.edges.lb = {\n        path: [[0, leftbottom], [topleft, 1]],\n        move: {\n          x: 0,\n          y: 1,\n          enter: 'bl'\n        }\n      };\n      cell.edges.tr = {\n        path: [[topright, 1], [bottomleft, 0]],\n        move: {\n          x: 0,\n          y: -1,\n          enter: 'tl'\n        }\n      };\n    }\n    if (opt.polygons) cell.polygons.push([[0, 0], [0, leftbottom], [topleft, 1], [topright, 1], [bottomleft, 0]]);\n  },\n  pentagon_bl_tb: function (cell, x0, x1, x2, x3, opt) {\n    var lefttop = opt.interpolate(x0, x3, opt.minV, opt.maxV);\n    var topleft = opt.interpolate(x3, x2, opt.minV, opt.maxV);\n    var bottomright = opt.interpolate_b(x0, x1, opt.minV, opt.maxV);\n    var bottomleft = opt.interpolate_a(x0, x1, opt.minV, opt.maxV);\n    if (opt.polygons_full) {\n      cell.edges.bl = {\n        path: [[bottomleft, 0], [0, lefttop]],\n        move: {\n          x: -1,\n          y: 0,\n          enter: 'rt'\n        }\n      };\n      cell.edges.tl = {\n        path: [[topleft, 1], [bottomright, 0]],\n        move: {\n          x: 0,\n          y: -1,\n          enter: 'tr'\n        }\n      };\n    }\n    if (opt.polygons) cell.polygons.push([[0, lefttop], [0, 1], [topleft, 1], [bottomright, 0], [bottomleft, 0]]);\n  },\n  pentagon_lt_rl: function (cell, x0, x1, x2, x3, opt) {\n    var leftbottom = opt.interpolate_a(x0, x3, opt.minV, opt.maxV);\n    var lefttop = opt.interpolate_b(x0, x3, opt.minV, opt.maxV);\n    var topright = opt.interpolate(x3, x2, opt.minV, opt.maxV);\n    var righttop = opt.interpolate(x1, x3, opt.minV, opt.maxV);\n    if (opt.polygons_full) {\n      cell.edges.lt = {\n        path: [[0, lefttop], [topright, 1]],\n        move: {\n          x: 0,\n          y: 1,\n          enter: 'br'\n        }\n      };\n      cell.edges.rt = {\n        path: [[1, righttop], [0, leftbottom]],\n        move: {\n          x: -1,\n          y: 0,\n          enter: 'rb'\n        }\n      };\n    }\n    if (opt.polygons) cell.polygons.push([[0, leftbottom], [0, lefttop], [topright, 1], [1, 1], [1, righttop]]);\n  },\n  pentagon_tr_bt: function (cell, x0, x1, x2, x3, opt) {\n    var topleft = opt.interpolate_a(x3, x2, opt.minV, opt.maxV);\n    var topright = opt.interpolate_b(x3, x2, opt.minV, opt.maxV);\n    var rightbottom = opt.interpolate(x1, x2, opt.minV, opt.maxV);\n    var bottomright = opt.interpolate(x0, x1, opt.minV, opt.maxV);\n    if (opt.polygons_full) {\n      cell.edges.br = {\n        path: [[bottomright, 0], [topleft, 1]],\n        move: {\n          x: 0,\n          y: 1,\n          enter: 'bl'\n        }\n      };\n      cell.edges.tr = {\n        path: [[topright, 1], [1, rightbottom]],\n        move: {\n          x: 1,\n          y: 0,\n          enter: 'lb'\n        }\n      };\n    }\n    if (opt.polygons) cell.polygons.push([[topleft, 1], [topright, 1], [1, rightbottom], [1, 0], [bottomright, 0]]);\n  },\n  pentagon_rb_lr: function (cell, x0, x1, x2, x3, opt) {\n    var leftbottom = opt.interpolate(x0, x3, opt.minV, opt.maxV);\n    var righttop = opt.interpolate_b(x1, x2, opt.minV, opt.maxV);\n    var rightbottom = opt.interpolate_a(x1, x2, opt.minV, opt.maxV);\n    var bottomleft = opt.interpolate(x0, x1, opt.minV, opt.maxV);\n    if (opt.polygons_full) {\n      cell.edges.lb = {\n        path: [[0, leftbottom], [1, righttop]],\n        move: {\n          x: 1,\n          y: 0,\n          enter: 'lt'\n        }\n      };\n      cell.edges.rb = {\n        path: [[1, rightbottom], [bottomleft, 0]],\n        move: {\n          x: 0,\n          y: -1,\n          enter: 'tl'\n        }\n      };\n    }\n    if (opt.polygons) cell.polygons.push([[0, 0], [0, leftbottom], [1, righttop], [1, rightbottom], [bottomleft, 0]]);\n  },\n  hexagon_lt_tr: function (cell, x0, x1, x2, x3, opt) {\n    var leftbottom = opt.interpolate(x0, x3, opt.minV, opt.maxV);\n    var topleft = opt.interpolate_a(x3, x2, opt.minV, opt.maxV);\n    var topright = opt.interpolate_b(x3, x2, opt.minV, opt.maxV);\n    var rightbottom = opt.interpolate(x1, x2, opt.minV, opt.maxV);\n    if (opt.polygons_full) {\n      cell.edges.lb = {\n        path: [[0, leftbottom], [topleft, 1]],\n        move: {\n          x: 0,\n          y: 1,\n          enter: 'bl'\n        }\n      };\n      cell.edges.tr = {\n        path: [[topright, 1], [1, rightbottom]],\n        move: {\n          x: 1,\n          y: 0,\n          enter: 'lb'\n        }\n      };\n    }\n    if (opt.polygons) cell.polygons.push([[0, 0], [0, leftbottom], [topleft, 1], [topright, 1], [1, rightbottom], [1, 0]]);\n  },\n  hexagon_bl_lt: function (cell, x0, x1, x2, x3, opt) {\n    var bottomright = opt.interpolate(x0, x1, opt.minV, opt.maxV);\n    var leftbottom = opt.interpolate_a(x0, x3, opt.minV, opt.maxV);\n    var lefttop = opt.interpolate_b(x0, x3, opt.minV, opt.maxV);\n    var topright = opt.interpolate(x3, x2, opt.minV, opt.maxV);\n    if (opt.polygons_full) {\n      cell.edges.br = {\n        path: [[bottomright, 0], [0, leftbottom]],\n        move: {\n          x: -1,\n          y: 0,\n          enter: 'rb'\n        }\n      };\n      cell.edges.lt = {\n        path: [[0, lefttop], [topright, 1]],\n        move: {\n          x: 0,\n          y: 1,\n          enter: 'br'\n        }\n      };\n    }\n    if (opt.polygons) cell.polygons.push([[bottomright, 0], [0, leftbottom], [0, lefttop], [topright, 1], [1, 1], [1, 0]]);\n  },\n  hexagon_bl_rb: function (cell, x0, x1, x2, x3, opt) {\n    var bottomleft = opt.interpolate_a(x0, x1, opt.minV, opt.maxV);\n    var bottomright = opt.interpolate_b(x0, x1, opt.minV, opt.maxV);\n    var lefttop = opt.interpolate(x0, x3, opt.minV, opt.maxV);\n    var righttop = opt.interpolate(x1, x2, opt.minV, opt.maxV);\n    if (opt.polygons_full) {\n      cell.edges.bl = {\n        path: [[bottomleft, 0], [0, lefttop]],\n        move: {\n          x: -1,\n          y: 0,\n          enter: 'rt'\n        }\n      };\n      cell.edges.rt = {\n        path: [[1, righttop], [bottomright, 0]],\n        move: {\n          x: 0,\n          y: -1,\n          enter: 'tr'\n        }\n      };\n    }\n    if (opt.polygons) cell.polygons.push([[bottomleft, 0], [0, lefttop], [0, 1], [1, 1], [1, righttop], [bottomright, 0]]);\n  },\n  hexagon_tr_rb: function (cell, x0, x1, x2, x3, opt) {\n    var bottomleft = opt.interpolate(x0, x1, opt.minV, opt.maxV);\n    var topleft = opt.interpolate(x3, x2, opt.minV, opt.maxV);\n    var righttop = opt.interpolate_b(x1, x2, opt.minV, opt.maxV);\n    var rightbottom = opt.interpolate_a(x1, x2, opt.minV, opt.maxV);\n    if (opt.polygons_full) {\n      cell.edges.tl = {\n        path: [[topleft, 1], [1, righttop]],\n        move: {\n          x: 1,\n          y: 0,\n          enter: 'lt'\n        }\n      };\n      cell.edges.rb = {\n        path: [[1, rightbottom], [bottomleft, 0]],\n        move: {\n          x: 0,\n          y: -1,\n          enter: 'tl'\n        }\n      };\n    }\n    if (opt.polygons) cell.polygons.push([[0, 0], [0, 1], [topleft, 1], [1, righttop], [1, rightbottom], [bottomleft, 0]]);\n  },\n  hexagon_lt_rb: function (cell, x0, x1, x2, x3, opt) {\n    var leftbottom = opt.interpolate(x0, x3, opt.minV, opt.maxV);\n    var topright = opt.interpolate(x3, x2, opt.minV, opt.maxV);\n    var righttop = opt.interpolate(x1, x2, opt.minV, opt.maxV);\n    var bottomleft = opt.interpolate(x0, x1, opt.minV, opt.maxV);\n    if (opt.polygons_full) {\n      cell.edges.lb = {\n        path: [[0, leftbottom], [topright, 1]],\n        move: {\n          x: 0,\n          y: 1,\n          enter: 'br'\n        }\n      };\n      cell.edges.rt = {\n        path: [[1, righttop], [bottomleft, 0]],\n        move: {\n          x: 0,\n          y: -1,\n          enter: 'tl'\n        }\n      };\n    }\n    if (opt.polygons) cell.polygons.push([[0, 0], [0, leftbottom], [topright, 1], [1, 1], [1, righttop], [bottomleft, 0]]);\n  },\n  hexagon_bl_tr: function (cell, x0, x1, x2, x3, opt) {\n    var bottomright = opt.interpolate(x0, x1, opt.minV, opt.maxV);\n    var lefttop = opt.interpolate(x0, x3, opt.minV, opt.maxV);\n    var topleft = opt.interpolate(x3, x2, opt.minV, opt.maxV);\n    var rightbottom = opt.interpolate(x1, x2, opt.minV, opt.maxV);\n    if (opt.polygons_full) {\n      cell.edges.br = {\n        path: [[bottomright, 0], [0, lefttop]],\n        move: {\n          x: -1,\n          y: 0,\n          enter: 'rt'\n        }\n      };\n      cell.edges.tl = {\n        path: [[topleft, 1], [1, rightbottom]],\n        move: {\n          x: 1,\n          y: 0,\n          enter: 'lb'\n        }\n      };\n    }\n    if (opt.polygons) cell.polygons.push([[bottomright, 0], [0, lefttop], [0, 1], [topleft, 1], [1, rightbottom], [1, 0]]);\n  },\n  heptagon_tr: function (cell, x0, x1, x2, x3, opt) {\n    var bottomleft = opt.interpolate_a(x0, x1, opt.minV, opt.maxV);\n    var bottomright = opt.interpolate_b(x0, x1, opt.minV, opt.maxV);\n    var leftbottom = opt.interpolate_a(x0, x3, opt.minV, opt.maxV);\n    var lefttop = opt.interpolate_b(x0, x3, opt.minV, opt.maxV);\n    var topright = opt.interpolate(x3, x2, opt.minV, opt.maxV);\n    var righttop = opt.interpolate(x1, x2, opt.minV, opt.maxV);\n    if (opt.polygons_full) {\n      cell.edges.bl = {\n        path: [[bottomleft, 0], [0, leftbottom]],\n        move: {\n          x: -1,\n          y: 0,\n          enter: 'rb'\n        }\n      };\n      cell.edges.lt = {\n        path: [[0, lefttop], [topright, 1]],\n        move: {\n          x: 0,\n          y: 1,\n          enter: 'br'\n        }\n      };\n      cell.edges.rt = {\n        path: [[1, righttop], [bottomright, 0]],\n        move: {\n          x: 0,\n          y: -1,\n          enter: 'tr'\n        }\n      };\n    }\n    if (opt.polygons) cell.polygons.push([[bottomleft, 0], [0, leftbottom], [0, lefttop], [topright, 1], [1, 1], [1, righttop], [bottomright, 0]]);\n  },\n  heptagon_bl: function (cell, x0, x1, x2, x3, opt) {\n    var bottomleft = opt.interpolate(x0, x1, opt.minV, opt.maxV);\n    var leftbottom = opt.interpolate(x0, x3, opt.minV, opt.maxV);\n    var topleft = opt.interpolate_a(x3, x2, opt.minV, opt.maxV);\n    var topright = opt.interpolate_b(x3, x2, opt.minV, opt.maxV);\n    var righttop = opt.interpolate_b(x1, x2, opt.minV, opt.maxV);\n    var rightbottom = opt.interpolate_a(x1, x2, opt.minV, opt.maxV);\n    if (opt.polygons_full) {\n      cell.edges.lb = {\n        path: [[0, leftbottom], [topleft, 1]],\n        move: {\n          x: 0,\n          y: 1,\n          enter: 'bl'\n        }\n      };\n      cell.edges.tr = {\n        path: [[topright, 1], [1, righttop]],\n        move: {\n          x: 1,\n          y: 0,\n          enter: 'lt'\n        }\n      };\n      cell.edges.rb = {\n        path: [[1, rightbottom], [bottomleft, 0]],\n        move: {\n          x: 0,\n          y: -1,\n          enter: 'tl'\n        }\n      };\n    }\n    if (opt.polygons) cell.polygons.push([[0, 0], [0, leftbottom], [topleft, 1], [topright, 1], [1, righttop], [1, rightbottom], [bottomleft, 0]]);\n  },\n  heptagon_tl: function (cell, x0, x1, x2, x3, opt) {\n    var bottomleft = opt.interpolate_a(x0, x1, opt.minV, opt.maxV);\n    var bottomright = opt.interpolate_b(x0, x1, opt.minV, opt.maxV);\n    var lefttop = opt.interpolate(x0, x3, opt.minV, opt.maxV);\n    var topleft = opt.interpolate(x3, x2, opt.minV, opt.maxV);\n    var righttop = opt.interpolate_b(x1, x2, opt.minV, opt.maxV);\n    var rightbottom = opt.interpolate_a(x1, x2, opt.minV, opt.maxV);\n    if (opt.polygons_full) {\n      cell.edges.bl = {\n        path: [[bottomleft, 0], [0, lefttop]],\n        move: {\n          x: -1,\n          y: 0,\n          enter: 'rt'\n        }\n      };\n      cell.edges.tl = {\n        path: [[topleft, 1], [1, righttop]],\n        move: {\n          x: 1,\n          y: 0,\n          enter: 'lt'\n        }\n      };\n      cell.edges.rb = {\n        path: [[1, rightbottom], [bottomright, 0]],\n        move: {\n          x: 0,\n          y: -1,\n          enter: 'tr'\n        }\n      };\n    }\n    if (opt.polygons) cell.polygons.push([[bottomleft, 0], [0, lefttop], [0, 1], [topleft, 1], [1, righttop], [1, rightbottom], [bottomright, 0]]);\n  },\n  heptagon_br: function (cell, x0, x1, x2, x3, opt) {\n    var bottomright = opt.interpolate(x0, x1, opt.minV, opt.maxV);\n    var leftbottom = opt.interpolate_a(x0, x3, opt.minV, opt.maxV);\n    var lefttop = opt.interpolate_b(x0, x3, opt.minV, opt.maxV);\n    var topleft = opt.interpolate_a(x3, x2, opt.minV, opt.maxV);\n    var topright = opt.interpolate_b(x3, x2, opt.minV, opt.maxV);\n    var rightbottom = opt.interpolate(x1, x2, opt.minV, opt.maxV);\n    if (opt.polygons_full) {\n      cell.edges.br = {\n        path: [[bottomright, 0], [0, leftbottom]],\n        move: {\n          x: -1,\n          y: 0,\n          enter: 'rb'\n        }\n      };\n      cell.edges.lt = {\n        path: [[0, lefttop], [topleft, 1]],\n        move: {\n          x: 0,\n          y: 1,\n          enter: 'bl'\n        }\n      };\n      cell.edges.tr = {\n        path: [[topright, 1], [1, rightbottom]],\n        move: {\n          x: 1,\n          y: 0,\n          enter: 'lb'\n        }\n      };\n    }\n    if (opt.polygons) cell.polygons.push([[bottomright, 0], [0, leftbottom], [0, lefttop], [topleft, 1], [topright, 1], [1, rightbottom], [1, 0]]);\n  },\n  octagon: function (cell, x0, x1, x2, x3, opt) {\n    var bottomleft = opt.interpolate_a(x0, x1, opt.minV, opt.maxV);\n    var bottomright = opt.interpolate_b(x0, x1, opt.minV, opt.maxV);\n    var leftbottom = opt.interpolate_a(x0, x3, opt.minV, opt.maxV);\n    var lefttop = opt.interpolate_b(x0, x3, opt.minV, opt.maxV);\n    var topleft = opt.interpolate_a(x3, x2, opt.minV, opt.maxV);\n    var topright = opt.interpolate_b(x3, x2, opt.minV, opt.maxV);\n    var righttop = opt.interpolate_b(x1, x2, opt.minV, opt.maxV);\n    var rightbottom = opt.interpolate_a(x1, x2, opt.minV, opt.maxV);\n    if (opt.polygons_full) {\n      cell.edges.bl = {\n        path: [[bottomleft, 0], [0, leftbottom]],\n        move: {\n          x: -1,\n          y: 0,\n          enter: 'rb'\n        }\n      };\n      cell.edges.lt = {\n        path: [[0, lefttop], [topleft, 1]],\n        move: {\n          x: 0,\n          y: 1,\n          enter: 'bl'\n        }\n      };\n      cell.edges.tr = {\n        path: [[topright, 1], [1, righttop]],\n        move: {\n          x: 1,\n          y: 0,\n          enter: 'lt'\n        }\n      };\n      cell.edges.rb = {\n        path: [[1, rightbottom], [bottomright, 0]],\n        move: {\n          x: 0,\n          y: -1,\n          enter: 'tr'\n        }\n      };\n    }\n    if (opt.polygons) cell.polygons.push([[bottomleft, 0], [0, leftbottom], [0, lefttop], [topleft, 1], [topright, 1], [1, righttop], [1, rightbottom], [bottomright, 0]]);\n  }\n};\n\n/*\n * Compute isobands(s) for a scalar 2D field given a certain\n * threshold and a bandwidth by applying the Marching Squares\n * Algorithm. The function returns a list of path coordinates\n * either for individual polygons within each grid cell, or the\n * outline of connected polygons.\n */\nfunction isoBands(input, minV, bandWidth, options) {\n  var i,\n    j,\n    settings,\n    useQuadTree = false,\n    tree = null,\n    root = null,\n    data = null,\n    cellGrid = null,\n    multiBand = false,\n    bw = [],\n    bandPolygons = [],\n    ret = [];\n\n  /* basic input validation */\n  if (!input) throw new Error('data is required');\n  if (minV === undefined || minV === null) throw new Error('lowerBound is required');\n  if (bandWidth === undefined || bandWidth === null) throw new Error('bandWidth is required');\n  if (!!options && typeof options !== 'object') throw new Error('options must be an object');\n  settings = isoBandOptions(options);\n\n  /* check for input data */\n  if (input instanceof QuadTree) {\n    tree = input;\n    root = input.root;\n    data = input.data;\n    if (!settings.noQuadTree) useQuadTree = true;\n  } else if (Array.isArray(input) && Array.isArray(input[0])) {\n    data = input;\n  } else {\n    throw new Error('input is neither array of arrays nor object retrieved from \\'QuadTree()\\'');\n  }\n\n  /* check and prepare input thresholds */\n  if (Array.isArray(minV)) {\n    multiBand = true;\n\n    /* activate QuadTree optimization if not explicitly forbidden by user settings */\n    if (!settings.noQuadTree) useQuadTree = true;\n\n    /* check if all minV are numbers */\n    for (i = 0; i < minV.length; i++) if (isNaN(+minV[i])) throw new Error('lowerBound[' + i + '] is not a number');\n    if (Array.isArray(bandWidth)) {\n      if (minV.length !== bandWidth.length) throw new Error('lowerBound and bandWidth have unequal lengths');\n\n      /* check bandwidth values */\n      for (i = 0; i < bandWidth.length; i++) if (isNaN(+bandWidth[i])) throw new Error('bandWidth[' + i + '] is not a number');\n    } else {\n      if (isNaN(+bandWidth)) throw new Error('bandWidth must be a number');\n      bw = [];\n      for (i = 0; i < minV.length; i++) {\n        bw.push(bandWidth);\n      }\n      bandWidth = bw;\n    }\n  } else {\n    if (isNaN(+minV)) throw new Error('lowerBound must be a number');\n    minV = [minV];\n    if (isNaN(+bandWidth)) throw new Error('bandWidth must be a number');\n    bandWidth = [bandWidth];\n  }\n\n  /* create QuadTree root node if not already present */\n  if (useQuadTree && !root) {\n    tree = new QuadTree(data);\n    root = tree.root;\n    data = tree.data;\n  }\n  if (settings.verbose) {\n    if (settings.polygons) console.log('MarchingSquaresJS-isoBands: returning single polygons for each grid cell');else console.log('MarchingSquaresJS-isoBands: returning polygon paths for entire data grid');\n    if (multiBand) console.log('MarchingSquaresJS-isoBands: multiple bands requested, returning array of band polygons instead of polygons for a single band');\n  }\n\n  /* Done with all input validation, now let's start computing stuff */\n\n  /* loop over all minV values */\n  minV.forEach(function (lowerBound, b) {\n    bandPolygons = [];\n\n    /* store bounds for current computation in settings object */\n    settings.minV = lowerBound;\n    settings.maxV = lowerBound + bandWidth[b];\n    if (settings.verbose) console.log('MarchingSquaresJS-isoBands: computing isobands for [' + lowerBound + ':' + (lowerBound + bandWidth[b]) + ']');\n    if (settings.polygons) {\n      /* compose list of polygons for each single cell */\n      if (useQuadTree) {\n        /* go through list of cells retrieved from QuadTree */\n        root.cellsInBand(settings.minV, settings.maxV, true).forEach(function (c) {\n          bandPolygons = bandPolygons.concat(cell2Polygons(prepareCell$1(data, c.x, c.y, settings), c.x, c.y, settings));\n        });\n      } else {\n        /* go through entire array of input data */\n        for (j = 0; j < data.length - 1; ++j) {\n          for (i = 0; i < data[0].length - 1; ++i) bandPolygons = bandPolygons.concat(cell2Polygons(prepareCell$1(data, i, j, settings), i, j, settings));\n        }\n      }\n    } else {\n      /* sparse grid of input data cells */\n      cellGrid = [];\n      for (i = 0; i < data[0].length - 1; ++i) cellGrid[i] = [];\n\n      /* compose list of polygons for entire input grid */\n      if (useQuadTree) {\n        /* collect the cells */\n        root.cellsInBand(settings.minV, settings.maxV, false).forEach(function (c) {\n          cellGrid[c.x][c.y] = prepareCell$1(data, c.x, c.y, settings);\n        });\n      } else {\n        /* prepare cells */\n        for (i = 0; i < data[0].length - 1; ++i) {\n          for (j = 0; j < data.length - 1; ++j) {\n            cellGrid[i][j] = prepareCell$1(data, i, j, settings);\n          }\n        }\n      }\n      bandPolygons = traceBandPaths(data, cellGrid, settings);\n    }\n\n    /* finally, add polygons to output array */\n    if (multiBand) ret.push(bandPolygons);else ret = bandPolygons;\n    if (typeof settings.successCallback === 'function') settings.successCallback(ret, lowerBound, bandWidth[b]);\n  });\n  return ret;\n}\n\n/*\n * Thats all for the public interface, below follows the actual\n * implementation\n */\n\n/*\n *  For isoBands, each square is defined by the three states\n * of its corner points. However, since computers use power-2\n * values, we use 2bits per trit, i.e.:\n *\n * 00 ... below minV\n * 01 ... between minV and maxV\n * 10 ... above maxV\n *\n * Hence we map the 4-trit configurations as follows:\n *\n * 0000 => 0\n * 0001 => 1\n * 0002 => 2\n * 0010 => 4\n * 0011 => 5\n * 0012 => 6\n * 0020 => 8\n * 0021 => 9\n * 0022 => 10\n * 0100 => 16\n * 0101 => 17\n * 0102 => 18\n * 0110 => 20\n * 0111 => 21\n * 0112 => 22\n * 0120 => 24\n * 0121 => 25\n * 0122 => 26\n * 0200 => 32\n * 0201 => 33\n * 0202 => 34\n * 0210 => 36\n * 0211 => 37\n * 0212 => 38\n * 0220 => 40\n * 0221 => 41\n * 0222 => 42\n * 1000 => 64\n * 1001 => 65\n * 1002 => 66\n * 1010 => 68\n * 1011 => 69\n * 1012 => 70\n * 1020 => 72\n * 1021 => 73\n * 1022 => 74\n * 1100 => 80\n * 1101 => 81\n * 1102 => 82\n * 1110 => 84\n * 1111 => 85\n * 1112 => 86\n * 1120 => 88\n * 1121 => 89\n * 1122 => 90\n * 1200 => 96\n * 1201 => 97\n * 1202 => 98\n * 1210 => 100\n * 1211 => 101\n * 1212 => 102\n * 1220 => 104\n * 1221 => 105\n * 1222 => 106\n * 2000 => 128\n * 2001 => 129\n * 2002 => 130\n * 2010 => 132\n * 2011 => 133\n * 2012 => 134\n * 2020 => 136\n * 2021 => 137\n * 2022 => 138\n * 2100 => 144\n * 2101 => 145\n * 2102 => 146\n * 2110 => 148\n * 2111 => 149\n * 2112 => 150\n * 2120 => 152\n * 2121 => 153\n * 2122 => 154\n * 2200 => 160\n * 2201 => 161\n * 2202 => 162\n * 2210 => 164\n * 2211 => 165\n * 2212 => 166\n * 2220 => 168\n * 2221 => 169\n * 2222 => 170\n */\n\n/*\n * ####################################\n * Some small helper functions\n * ####################################\n */\n\nfunction computeCenterAverage(bl, br, tr, tl, minV, maxV) {\n  var average = (tl + tr + br + bl) / 4;\n  if (average > maxV) return 2; /* above isoband limits */\n\n  if (average < minV) return 0; /* below isoband limits */\n\n  return 1; /* within isoband limits */\n}\nfunction prepareCell$1(grid, x, y, opt) {\n  var cell, center_avg;\n\n  /*  compose the 4-trit corner representation */\n  var cval = 0;\n  var x3 = grid[y + 1][x];\n  var x2 = grid[y + 1][x + 1];\n  var x1 = grid[y][x + 1];\n  var x0 = grid[y][x];\n  var minV = opt.minV;\n  var maxV = opt.maxV;\n\n  /*\n   * Note that missing data within the grid will result\n   * in horribly failing to trace full polygon paths\n   */\n  if (isNaN(x0) || isNaN(x1) || isNaN(x2) || isNaN(x3)) {\n    return;\n  }\n\n  /*\n   * Here we detect the type of the cell\n   *\n   * x3 ---- x2\n   * |      |\n   * |      |\n   * x0 ---- x1\n   *\n   * with edge points\n   *\n   * x0 = (x,y),\n   * x1 = (x + 1, y),\n   * x2 = (x + 1, y + 1), and\n   * x3 = (x, y + 1)\n   *\n   * and compute the polygon intersections with the edges\n   * of the cell. Each edge value may be (i) below, (ii) within,\n   * or (iii) above the values of the isoband limits. We\n   * encode this property using 2 bits of information, where\n   *\n   * 00 ... below,\n   * 01 ... within, and\n   * 10 ... above\n   *\n   * Then we store the cells value as vector\n   *\n   * cval = (x0, x1, x2, x3)\n   *\n   * where x0 are the two least significant bits (0th, 1st),\n   * x1 the 2nd and 3rd bit, and so on. This essentially\n   * enables us to work with a single integer number\n   */\n\n  cval |= x3 < minV ? 0 : x3 > maxV ? 128 : 64;\n  cval |= x2 < minV ? 0 : x2 > maxV ? 32 : 16;\n  cval |= x1 < minV ? 0 : x1 > maxV ? 8 : 4;\n  cval |= x0 < minV ? 0 : x0 > maxV ? 2 : 1;\n\n  /* make sure cval is a number */\n  cval = +cval;\n\n  /*\n   * cell center average trit for ambiguous cases, where\n   * 0 ... below iso band\n   * 1 ... within iso band\n   * 2 ... above isoband\n   */\n  center_avg = 0;\n  cell = {\n    cval: cval,\n    polygons: [],\n    edges: {},\n    x0: x0,\n    x1: x1,\n    x2: x2,\n    x3: x3,\n    x: x,\n    y: y\n  };\n\n  /*\n   * Compute interpolated intersections of the polygon(s)\n   * with the cell borders and (i) add edges for polygon\n   * trace-back, or (ii) a list of small closed polygons\n   * according to look-up table\n   */\n  switch (cval) {\n    case 85:\n      /* 1111 */\n      shapeCoordinates.square(cell, x0, x1, x2, x3, opt);\n    /* fall through */\n    case 0: /* 0000 */\n    /* fall through */\n    case 170:\n      /* 2222 */\n      break;\n\n    /* single triangle cases */\n\n    case 169:\n      /* 2221 */\n      shapeCoordinates.triangle_bl(cell, x0, x1, x2, x3, opt);\n      break;\n    case 166:\n      /* 2212 */\n      shapeCoordinates.triangle_br(cell, x0, x1, x2, x3, opt);\n      break;\n    case 154:\n      /* 2122 */\n      shapeCoordinates.triangle_tr(cell, x0, x1, x2, x3, opt);\n      break;\n    case 106:\n      /* 1222 */\n      shapeCoordinates.triangle_tl(cell, x0, x1, x2, x3, opt);\n      break;\n    case 1:\n      /* 0001 */\n      shapeCoordinates.triangle_bl(cell, x0, x1, x2, x3, opt);\n      break;\n    case 4:\n      /* 0010 */\n      shapeCoordinates.triangle_br(cell, x0, x1, x2, x3, opt);\n      break;\n    case 16:\n      /* 0100 */\n      shapeCoordinates.triangle_tr(cell, x0, x1, x2, x3, opt);\n      break;\n    case 64:\n      /* 1000 */\n      shapeCoordinates.triangle_tl(cell, x0, x1, x2, x3, opt);\n      break;\n\n    /* single trapezoid cases */\n\n    case 168:\n      /* 2220 */\n      shapeCoordinates.tetragon_bl(cell, x0, x1, x2, x3, opt);\n      break;\n    case 162:\n      /* 2202 */\n      shapeCoordinates.tetragon_br(cell, x0, x1, x2, x3, opt);\n      break;\n    case 138:\n      /* 2022 */\n      shapeCoordinates.tetragon_tr(cell, x0, x1, x2, x3, opt);\n      break;\n    case 42:\n      /* 0222 */\n      shapeCoordinates.tetragon_tl(cell, x0, x1, x2, x3, opt);\n      break;\n    case 2:\n      /* 0002 */\n      shapeCoordinates.tetragon_bl(cell, x0, x1, x2, x3, opt);\n      break;\n    case 8:\n      /* 0020 */\n      shapeCoordinates.tetragon_br(cell, x0, x1, x2, x3, opt);\n      break;\n    case 32:\n      /* 0200 */\n      shapeCoordinates.tetragon_tr(cell, x0, x1, x2, x3, opt);\n      break;\n    case 128:\n      /* 2000 */\n      shapeCoordinates.tetragon_tl(cell, x0, x1, x2, x3, opt);\n      break;\n\n    /* single rectangle cases */\n\n    case 5:\n      /* 0011 */\n      shapeCoordinates.tetragon_b(cell, x0, x1, x2, x3, opt);\n      break;\n    case 20:\n      /* 0110 */\n      shapeCoordinates.tetragon_r(cell, x0, x1, x2, x3, opt);\n      break;\n    case 80:\n      /* 1100 */\n      shapeCoordinates.tetragon_t(cell, x0, x1, x2, x3, opt);\n      break;\n    case 65:\n      /* 1001 */\n      shapeCoordinates.tetragon_l(cell, x0, x1, x2, x3, opt);\n      break;\n    case 165:\n      /* 2211 */\n      shapeCoordinates.tetragon_b(cell, x0, x1, x2, x3, opt);\n      break;\n    case 150:\n      /* 2112 */\n      shapeCoordinates.tetragon_r(cell, x0, x1, x2, x3, opt);\n      break;\n    case 90:\n      /* 1122 */\n      shapeCoordinates.tetragon_t(cell, x0, x1, x2, x3, opt);\n      break;\n    case 105:\n      /* 1221 */\n      shapeCoordinates.tetragon_l(cell, x0, x1, x2, x3, opt);\n      break;\n    case 160:\n      /* 2200 */\n      shapeCoordinates.tetragon_lr(cell, x0, x1, x2, x3, opt);\n      break;\n    case 130:\n      /* 2002 */\n      shapeCoordinates.tetragon_tb(cell, x0, x1, x2, x3, opt);\n      break;\n    case 10:\n      /* 0022 */\n      shapeCoordinates.tetragon_lr(cell, x0, x1, x2, x3, opt);\n      break;\n    case 40:\n      /* 0220 */\n      shapeCoordinates.tetragon_tb(cell, x0, x1, x2, x3, opt);\n      break;\n\n    /* single pentagon cases */\n\n    case 101:\n      /* 1211 */\n      shapeCoordinates.pentagon_tr(cell, x0, x1, x2, x3, opt);\n      break;\n    case 149:\n      /* 2111 */\n      shapeCoordinates.pentagon_tl(cell, x0, x1, x2, x3, opt);\n      break;\n    case 86:\n      /* 1112 */\n      shapeCoordinates.pentagon_bl(cell, x0, x1, x2, x3, opt);\n      break;\n    case 89:\n      /* 1121 */\n      shapeCoordinates.pentagon_br(cell, x0, x1, x2, x3, opt);\n      break;\n    case 69:\n      /* 1011 */\n      shapeCoordinates.pentagon_tr(cell, x0, x1, x2, x3, opt);\n      break;\n    case 21:\n      /* 0111 */\n      shapeCoordinates.pentagon_tl(cell, x0, x1, x2, x3, opt);\n      break;\n    case 84:\n      /* 1110 */\n      shapeCoordinates.pentagon_bl(cell, x0, x1, x2, x3, opt);\n      break;\n    case 81:\n      /* 1101 */\n      shapeCoordinates.pentagon_br(cell, x0, x1, x2, x3, opt);\n      break;\n    case 96:\n      /* 1200 */\n      shapeCoordinates.pentagon_tr_rl(cell, x0, x1, x2, x3, opt);\n      break;\n    case 24:\n      /* 0120 */\n      shapeCoordinates.pentagon_rb_bt(cell, x0, x1, x2, x3, opt);\n      break;\n    case 6:\n      /* 0012 */\n      shapeCoordinates.pentagon_bl_lr(cell, x0, x1, x2, x3, opt);\n      break;\n    case 129:\n      /* 2001 */\n      shapeCoordinates.pentagon_lt_tb(cell, x0, x1, x2, x3, opt);\n      break;\n    case 74:\n      /* 1022 */\n      shapeCoordinates.pentagon_tr_rl(cell, x0, x1, x2, x3, opt);\n      break;\n    case 146:\n      /* 2102 */\n      shapeCoordinates.pentagon_rb_bt(cell, x0, x1, x2, x3, opt);\n      break;\n    case 164:\n      /* 2210 */\n      shapeCoordinates.pentagon_bl_lr(cell, x0, x1, x2, x3, opt);\n      break;\n    case 41:\n      /* 0221 */\n      shapeCoordinates.pentagon_lt_tb(cell, x0, x1, x2, x3, opt);\n      break;\n    case 66:\n      /* 1002 */\n      shapeCoordinates.pentagon_bl_tb(cell, x0, x1, x2, x3, opt);\n      break;\n    case 144:\n      /* 2100 */\n      shapeCoordinates.pentagon_lt_rl(cell, x0, x1, x2, x3, opt);\n      break;\n    case 36:\n      /* 0210 */\n      shapeCoordinates.pentagon_tr_bt(cell, x0, x1, x2, x3, opt);\n      break;\n    case 9:\n      /* 0021 */\n      shapeCoordinates.pentagon_rb_lr(cell, x0, x1, x2, x3, opt);\n      break;\n    case 104:\n      /* 1220 */\n      shapeCoordinates.pentagon_bl_tb(cell, x0, x1, x2, x3, opt);\n      break;\n    case 26:\n      /* 0122 */\n      shapeCoordinates.pentagon_lt_rl(cell, x0, x1, x2, x3, opt);\n      break;\n    case 134:\n      /* 2012 */\n      shapeCoordinates.pentagon_tr_bt(cell, x0, x1, x2, x3, opt);\n      break;\n    case 161:\n      /* 2201 */\n      shapeCoordinates.pentagon_rb_lr(cell, x0, x1, x2, x3, opt);\n      break;\n\n    /* single hexagon cases */\n\n    case 37:\n      /* 0211 */\n      shapeCoordinates.hexagon_lt_tr(cell, x0, x1, x2, x3, opt);\n      break;\n    case 148:\n      /* 2110 */\n      shapeCoordinates.hexagon_bl_lt(cell, x0, x1, x2, x3, opt);\n      break;\n    case 82:\n      /* 1102 */\n      shapeCoordinates.hexagon_bl_rb(cell, x0, x1, x2, x3, opt);\n      break;\n    case 73:\n      /* 1021 */\n      shapeCoordinates.hexagon_tr_rb(cell, x0, x1, x2, x3, opt);\n      break;\n    case 133:\n      /* 2011 */\n      shapeCoordinates.hexagon_lt_tr(cell, x0, x1, x2, x3, opt);\n      break;\n    case 22:\n      /* 0112 */\n      shapeCoordinates.hexagon_bl_lt(cell, x0, x1, x2, x3, opt);\n      break;\n    case 88:\n      /* 1120 */\n      shapeCoordinates.hexagon_bl_rb(cell, x0, x1, x2, x3, opt);\n      break;\n    case 97:\n      /* 1201 */\n      shapeCoordinates.hexagon_tr_rb(cell, x0, x1, x2, x3, opt);\n      break;\n    case 145:\n      /* 2101 */\n      shapeCoordinates.hexagon_lt_rb(cell, x0, x1, x2, x3, opt);\n      break;\n    case 25:\n      /* 0121 */\n      shapeCoordinates.hexagon_lt_rb(cell, x0, x1, x2, x3, opt);\n      break;\n    case 70:\n      /* 1012 */\n      shapeCoordinates.hexagon_bl_tr(cell, x0, x1, x2, x3, opt);\n      break;\n    case 100:\n      /* 1210 */\n      shapeCoordinates.hexagon_bl_tr(cell, x0, x1, x2, x3, opt);\n      break;\n\n    /* 6-sided saddles */\n\n    case 17:\n      /* 0101 */\n      center_avg = computeCenterAverage(x0, x1, x2, x3, minV, maxV);\n      /* should never be center_avg === 2 */\n      if (center_avg === 0) {\n        shapeCoordinates.triangle_bl(cell, x0, x1, x2, x3, opt);\n        shapeCoordinates.triangle_tr(cell, x0, x1, x2, x3, opt);\n      } else {\n        shapeCoordinates.hexagon_lt_rb(cell, x0, x1, x2, x3, opt);\n      }\n      break;\n    case 68:\n      /* 1010 */\n      center_avg = computeCenterAverage(x0, x1, x2, x3, minV, maxV);\n      /* should never be center_avg === 2 */\n      if (center_avg === 0) {\n        shapeCoordinates.triangle_tl(cell, x0, x1, x2, x3, opt);\n        shapeCoordinates.triangle_br(cell, x0, x1, x2, x3, opt);\n      } else {\n        shapeCoordinates.hexagon_bl_tr(cell, x0, x1, x2, x3, opt);\n      }\n      break;\n    case 153:\n      /* 2121 */\n      center_avg = computeCenterAverage(x0, x1, x2, x3, minV, maxV);\n      /* should never be center_avg === 0 */\n      if (center_avg === 2) {\n        shapeCoordinates.triangle_bl(cell, x0, x1, x2, x3, opt);\n        shapeCoordinates.triangle_tr(cell, x0, x1, x2, x3, opt);\n      } else {\n        shapeCoordinates.hexagon_lt_rb(cell, x0, x1, x2, x3, opt);\n      }\n      break;\n    case 102:\n      /* 1212 */\n      center_avg = computeCenterAverage(x0, x1, x2, x3, minV, maxV);\n      /* should never be center_avg === 0 */\n      if (center_avg === 2) {\n        shapeCoordinates.triangle_tl(cell, x0, x1, x2, x3, opt);\n        shapeCoordinates.triangle_br(cell, x0, x1, x2, x3, opt);\n      } else {\n        shapeCoordinates.hexagon_bl_tr(cell, x0, x1, x2, x3, opt);\n      }\n      break;\n\n    /* 7-sided saddles */\n\n    case 152:\n      /* 2120 */\n\n      center_avg = computeCenterAverage(x0, x1, x2, x3, minV, maxV);\n      /* should never be center_avg === 0 */\n      if (center_avg === 2) {\n        shapeCoordinates.triangle_tr(cell, x0, x1, x2, x3, opt);\n        shapeCoordinates.tetragon_bl(cell, x0, x1, x2, x3, opt);\n      } else {\n        shapeCoordinates.heptagon_tr(cell, x0, x1, x2, x3, opt);\n      }\n      break;\n    case 137:\n      /* 2021 */\n      center_avg = computeCenterAverage(x0, x1, x2, x3, minV, maxV);\n      /* should never be center_avg === 0 */\n      if (center_avg === 2) {\n        shapeCoordinates.triangle_bl(cell, x0, x1, x2, x3, opt);\n        shapeCoordinates.tetragon_tr(cell, x0, x1, x2, x3, opt);\n      } else {\n        shapeCoordinates.heptagon_bl(cell, x0, x1, x2, x3, opt);\n      }\n      break;\n    case 98:\n      /* 1202 */\n      center_avg = computeCenterAverage(x0, x1, x2, x3, minV, maxV);\n      /* should never be center_avg === 0 */\n      if (center_avg === 2) {\n        shapeCoordinates.triangle_tl(cell, x0, x1, x2, x3, opt);\n        shapeCoordinates.tetragon_br(cell, x0, x1, x2, x3, opt);\n      } else {\n        shapeCoordinates.heptagon_tl(cell, x0, x1, x2, x3, opt);\n      }\n      break;\n    case 38:\n      /* 0212 */\n      center_avg = computeCenterAverage(x0, x1, x2, x3, minV, maxV);\n      /* should never be center_avg === 0 */\n      if (center_avg === 2) {\n        shapeCoordinates.triangle_br(cell, x0, x1, x2, x3, opt);\n        shapeCoordinates.tetragon_tl(cell, x0, x1, x2, x3, opt);\n      } else {\n        shapeCoordinates.heptagon_br(cell, x0, x1, x2, x3, opt);\n      }\n      break;\n    case 18:\n      /* 0102 */\n      center_avg = computeCenterAverage(x0, x1, x2, x3, minV, maxV);\n      /* should never be center_avg === 2 */\n      if (center_avg === 0) {\n        shapeCoordinates.triangle_tr(cell, x0, x1, x2, x3, opt);\n        shapeCoordinates.tetragon_bl(cell, x0, x1, x2, x3, opt);\n      } else {\n        shapeCoordinates.heptagon_tr(cell, x0, x1, x2, x3, opt);\n      }\n      break;\n    case 33:\n      /* 0201 */\n      center_avg = computeCenterAverage(x0, x1, x2, x3, minV, maxV);\n      /* should never be center_avg === 2 */\n      if (center_avg === 0) {\n        shapeCoordinates.triangle_bl(cell, x0, x1, x2, x3, opt);\n        shapeCoordinates.tetragon_tr(cell, x0, x1, x2, x3, opt);\n      } else {\n        shapeCoordinates.heptagon_bl(cell, x0, x1, x2, x3, opt);\n      }\n      break;\n    case 72:\n      /* 1020 */\n      center_avg = computeCenterAverage(x0, x1, x2, x3, minV, maxV);\n      /* should never be center_avg === 2 */\n      if (center_avg === 0) {\n        shapeCoordinates.triangle_tl(cell, x0, x1, x2, x3, opt);\n        shapeCoordinates.tetragon_br(cell, x0, x1, x2, x3, opt);\n      } else {\n        shapeCoordinates.heptagon_tl(cell, x0, x1, x2, x3, opt);\n      }\n      break;\n    case 132:\n      /* 2010 */\n      center_avg = computeCenterAverage(x0, x1, x2, x3, minV, maxV);\n      /* should never be center_avg === 2 */\n      if (center_avg === 0) {\n        shapeCoordinates.triangle_br(cell, x0, x1, x2, x3, opt);\n        shapeCoordinates.tetragon_tl(cell, x0, x1, x2, x3, opt);\n      } else {\n        shapeCoordinates.heptagon_br(cell, x0, x1, x2, x3, opt);\n      }\n      break;\n\n    /* 8-sided saddles */\n\n    case 136:\n      /* 2020 */\n      center_avg = computeCenterAverage(x0, x1, x2, x3, minV, maxV);\n      if (center_avg === 0) {\n        shapeCoordinates.tetragon_tl(cell, x0, x1, x2, x3, opt);\n        shapeCoordinates.tetragon_br(cell, x0, x1, x2, x3, opt);\n      } else if (center_avg === 1) {\n        shapeCoordinates.octagon(cell, x0, x1, x2, x3, opt);\n      } else {\n        shapeCoordinates.tetragon_bl(cell, x0, x1, x2, x3, opt);\n        shapeCoordinates.tetragon_tr(cell, x0, x1, x2, x3, opt);\n      }\n      break;\n    case 34:\n      /* 0202 */\n      center_avg = computeCenterAverage(x0, x1, x2, x3, minV, maxV);\n      if (center_avg === 0) {\n        shapeCoordinates.tetragon_bl(cell, x0, x1, x2, x3, opt);\n        shapeCoordinates.tetragon_tr(cell, x0, x1, x2, x3, opt);\n      } else if (center_avg === 1) {\n        shapeCoordinates.octagon(cell, x0, x1, x2, x3, opt);\n      } else {\n        shapeCoordinates.tetragon_tl(cell, x0, x1, x2, x3, opt);\n        shapeCoordinates.tetragon_br(cell, x0, x1, x2, x3, opt);\n      }\n      break;\n  }\n  return cell;\n}\nexport { isoLines, isoLines as isoContours, isoBands, QuadTree, QuadTree as quadTree };","map":{"version":3,"names":["linear","a","b","v","linear_ab","v0","v1","tmp","linear_a","minV","maxV","linear_b","Options","successCallback","verbose","polygons","polygons_full","linearRing","noQuadTree","noFrame","isoBandOptions","userSettings","i","key","val","bandOptions","optionKeys","Object","keys","length","interpolate","interpolate_a","interpolate_b","isoLineOptions","lineOptions","cell2Polygons","cell","x","y","settings","forEach","p","pp","push","entry_coordinate","mode","path","skip_coordinate","requireFrame","data","lowerBound","upperBound","frameRequired","cols","rows","j","requireLineFrame","threshold","traceBandPaths","cellGrid","nextedge","e","ee","s","ve","enter","finalized","origin","cc","dir","count","point","found_entry","valid_entries","add_x","add_y","available_starts","entry_dir","bl","br","lb","lt","tl","tr","rt","rb","edges","move","Error","traceLinePaths","bottom","left","top","right","TreeNode","dx","dy","dx_tmp","dy_tmp","msb_x","msb_y","childA","childB","childC","childD","Math","min","max","prototype","cellsInBand","subsumed","cells","concat","cellsBelowThreshold","QuadTree","Array","isArray","root","isoLines","input","options","useQuadTree","multiLine","tree","linePolygons","ret","undefined","isNaN","console","log","t","c","prepareCell","grid","average","cval","x3","x2","x1","x0","shapeCoordinates","square","opt","triangle_bl","bottomleft","leftbottom","triangle_br","bottomright","rightbottom","triangle_tr","righttop","topright","triangle_tl","topleft","lefttop","tetragon_t","tetragon_r","tetragon_b","tetragon_l","tetragon_bl","tetragon_br","tetragon_tr","tetragon_tl","tetragon_lr","tetragon_tb","pentagon_tr","pentagon_tl","pentagon_br","pentagon_bl","pentagon_tr_rl","pentagon_rb_bt","pentagon_bl_lr","pentagon_lt_tb","pentagon_bl_tb","pentagon_lt_rl","pentagon_tr_bt","pentagon_rb_lr","hexagon_lt_tr","hexagon_bl_lt","hexagon_bl_rb","hexagon_tr_rb","hexagon_lt_rb","hexagon_bl_tr","heptagon_tr","heptagon_bl","heptagon_tl","heptagon_br","octagon","isoBands","bandWidth","multiBand","bw","bandPolygons","prepareCell$1","computeCenterAverage","center_avg","isoContours","quadTree"],"sources":["/Users/yairtitelboim/Documents/Kernel/ALLAPPS/LOGhub/loghub/county-map-app/node_modules/marchingsquares/dist/marchingsquares-esm.js"],"sourcesContent":["/*!\n* MarchingSquaresJS\n* version 1.3.3\n* https://github.com/RaumZeit/MarchingSquares.js\n*\n* @license GNU Affero General Public License.\n* Copyright (c) 2015-2019 Ronny Lorenz <ronny@tbi.univie.ac.at>\n*/\n\n\n/*\n *  Compute the distance of a value 'v' from 'a' through linear interpolation\n *  between the values of 'a' and 'b'\n *\n *  Note, that we assume that 'a' and 'b' have unit distance (i.e. 1)\n */\nfunction linear(a, b, v) {\n  if (a < b)\n    return (v - a) / (b - a);\n\n  return (a - v) / (a - b);\n}\n\n\n/*\n *  Compute the distance of a pair of values ('v0', 'v1') from 'a' through linear interpolation\n *  between the values of 'a' and 'b'\n *\n *  This function assumes that exactly one value, 'v0' or 'v1', is actually located\n *  between 'a' and 'b', and choses the right one automagically\n *\n *  Note, that we assume that 'a' and 'b' have unit distance (i.e. 1)\n */\nfunction linear_ab(a, b, v0, v1) {\n  var tmp;\n\n  if (v0 > v1) {\n    tmp = v0;\n    v0  = v1;\n    v1  = tmp;\n  }\n\n  if (a < b) {\n    if (a < v0)\n      return (v0 - a) / (b - a);\n    else\n      return (v1 - a) / (b - a);\n  } else if (a > v1) {\n    return (a - v1) / (a - b);\n  }\n\n  return (a - v0) / (a - b);\n}\n\n\n/*\n *  Compute the distance of a pair of values ('v0', 'v1') from 'a' through linear interpolation\n *  between the values of 'a' and 'b'\n *\n *  This function automagically choses the value 'vN' that is closer to 'a'\n *\n *  Note, that we assume that 'a' and 'b' have unit distance (i.e. 1)\n */\nfunction linear_a(a, b, minV, maxV) {\n  if (a < b)\n    return (minV - a) / (b - a);\n\n  return (a - maxV) / (a - b);\n}\n\n\n/*\n *  Compute the distance of a pair of values ('v0', 'v1') from 'a' through linear interpolation\n *  between the values of 'a' and 'b'\n *\n *  This function automagically choses the value 'vN' that is closer to 'b'\n *\n *  Note, that we assume that 'a' and 'b' have unit distance (i.e. 1)\n */\nfunction linear_b(a, b, minV, maxV) {\n  if (a < b)\n    return (maxV - a) / (b - a);\n\n  return (a - minV) / (a - b);\n}\n\nfunction Options() {\n  /* Settings common to all implemented algorithms */\n  this.successCallback  = null;\n  this.verbose          = false;\n  this.polygons         = false;\n  this.polygons_full    = false;\n  this.linearRing       = true;\n  this.noQuadTree       = false;\n  this.noFrame          = false;\n}\n\n\n/* Compose settings specific to IsoBands algorithm */\nfunction isoBandOptions(userSettings) {\n  var i,\n    key,\n    val,\n    bandOptions,\n    optionKeys;\n\n  bandOptions   = new Options();\n  userSettings  = userSettings ? userSettings : {};\n  optionKeys    = Object.keys(bandOptions);\n\n  for(i = 0; i < optionKeys.length; i++) {\n    key = optionKeys[i];\n    val = userSettings[key];\n    if ((typeof val !== 'undefined') && (val !== null))\n      bandOptions[key] = val;\n  }\n\n  /* restore compatibility */\n  bandOptions.polygons_full  = !bandOptions.polygons;\n\n  /* add interpolation functions (not yet user customizable) */\n  bandOptions.interpolate   = linear_ab;\n  bandOptions.interpolate_a = linear_a;\n  bandOptions.interpolate_b = linear_b;\n\n  return bandOptions;\n}\n\n\n/* Compose settings specific to IsoLines algorithm */\nfunction isoLineOptions(userSettings) {\n  var i,\n    key,\n    val,\n    lineOptions,\n    optionKeys;\n\n  lineOptions   = new Options();\n  userSettings  = userSettings ? userSettings : {};\n  optionKeys    = Object.keys(lineOptions);\n\n  for(i = 0; i < optionKeys.length; i++) {\n    key = optionKeys[i];\n    val = userSettings[key];\n    if ((typeof val !== 'undefined') && (val !== null))\n      lineOptions[key] = val;\n  }\n\n  /* restore compatibility */\n  lineOptions.polygons_full  = !lineOptions.polygons;\n\n  /* add interpolation functions (not yet user customizable) */\n  lineOptions.interpolate   = linear;\n\n  return lineOptions;\n}\n\nfunction cell2Polygons(cell, x, y, settings) {\n  var polygons = [];\n\n  cell.polygons.forEach(function(p) {\n    p.forEach(function(pp) {\n      pp[0] += x;\n      pp[1] += y;\n    });\n\n    if (settings.linearRing)\n      p.push(p[0]);\n\n    polygons.push(p);\n  });\n\n  return polygons;\n}\n\nfunction entry_coordinate(x, y, mode, path) {\n  if (mode === 0) { /* down */\n    x += 1;\n    y += path[0][1];\n  } else if (mode === 1) { /* left */\n    x += path[0][0];\n  } else if (mode === 2) { /* up */\n    y += path[0][1];\n  } else if (mode === 3) { /* right */\n    x += path[0][0];\n    y += 1;\n  }\n\n  return [ x, y ];\n}\n\n\nfunction skip_coordinate(x, y, mode) {\n  if (mode === 0) { /* down */\n    x++;\n  } else if (mode === 1) ; else if (mode === 2) { /* up */\n    y++;\n  } else if (mode === 3) { /* right */\n    x++;\n    y++;\n  }\n\n  return [ x, y ];\n}\n\n\nfunction requireFrame(data, lowerBound, upperBound) {\n  var frameRequired,\n    cols,\n    rows,\n    i,\n    j;\n\n  frameRequired = true;\n  cols          = data[0].length;\n  rows          = data.length;\n\n  for (j = 0; j < rows; j++) {\n    if ((data[j][0] < lowerBound) ||\n        (data[j][0] > upperBound) ||\n        (data[j][cols - 1] < lowerBound) ||\n        (data[j][cols - 1] > upperBound)) {\n      frameRequired = false;\n      break;\n    }\n  }\n\n  if ((frameRequired) &&\n      ((data[rows - 1][0] < lowerBound) ||\n      (data[rows - 1][0] > upperBound) ||\n      (data[rows - 1][cols - 1] < lowerBound) ||\n      (data[rows - 1][cols - 1] > upperBound))) {\n    frameRequired = false;\n  }\n\n  if (frameRequired)\n    for (i = 0; i < cols - 1; i++) {\n      if ((data[0][i] < lowerBound) ||\n          (data[0][i] > upperBound) ||\n          (data[rows - 1][i] < lowerBound) ||\n          (data[rows - 1][i] > upperBound)) {\n        frameRequired = false;\n        break;\n      }\n    }\n\n\n  return frameRequired;\n}\n\n\nfunction requireLineFrame(data, threshold) {\n  var frameRequired,\n    cols,\n    rows,\n    i,\n    j;\n\n  frameRequired = true;\n  cols          = data[0].length;\n  rows          = data.length;\n\n  for (j = 0; j < rows; j++) {\n    if ((data[j][0] >= threshold) ||\n        (data[j][cols - 1] >= threshold)) {\n      frameRequired = false;\n      break;\n    }\n  }\n\n  if ((frameRequired) &&\n      ((data[rows - 1][0] >= threshold) ||\n      (data[rows - 1][cols - 1] >= threshold))) {\n    frameRequired = false;\n  }\n\n  if (frameRequired)\n    for (i = 0; i < cols - 1; i++) {\n      if ((data[0][i] >= threshold) ||\n          (data[rows - 1][i] > threshold)) {\n        frameRequired = false;\n        break;\n      }\n    }\n\n  return frameRequired;\n}\n\n\nfunction traceBandPaths(data, cellGrid, settings) {\n  var nextedge,\n    path,\n    e,\n    ee,\n    s,\n    ve,\n    enter,\n    x,\n    y,\n    finalized,\n    origin,\n    cc,\n    dir,\n    count,\n    point,\n    found_entry;\n\n  var polygons = [];\n  var rows = data.length - 1;\n  var cols = data[0].length - 1;\n\n  /*\n   * directions for out-of-grid moves are:\n   * 0 ... \"down\",\n   * 1 ... \"left\",\n   * 2 ... \"up\",\n   * 3 ... \"right\"\n   */\n  var valid_entries = [ ['rt', 'rb'], /* down */\n    ['br', 'bl'], /* left */\n    ['lb', 'lt'], /* up */\n    ['tl', 'tr']  /* right */\n  ];\n  var add_x         = [ 0, -1, 0, 1 ];\n  var add_y         = [ -1, 0, 1, 0 ];\n  var available_starts = [ 'bl', 'lb', 'lt', 'tl', 'tr', 'rt', 'rb', 'br' ];\n  var entry_dir     =  {\n    bl: 1, br: 1,\n    lb: 2, lt: 2,\n    tl: 3, tr: 3,\n    rt: 0, rb: 0\n  };\n\n  if (requireFrame(data, settings.minV, settings.maxV)) {\n    if (settings.linearRing)\n      polygons.push([ [0, 0], [0, rows], [cols, rows], [cols, 0], [0, 0] ]);\n    else\n      polygons.push([ [0, 0], [0, rows], [cols, rows], [cols, 0] ]);\n  }\n\n  /* finally, start tracing back first polygon(s) */\n  cellGrid.forEach(function(a, i) {\n    a.forEach(function(cell, j) {\n      nextedge = null;\n\n      /* trace paths for all available edges that go through this cell */\n      for (e = 0; e < 8; e++) {\n        nextedge = available_starts[e];\n\n        if (typeof cell.edges[nextedge] !== 'object')\n          continue;\n\n        /* start a new, full path */\n        path              = [];\n        ee                = cell.edges[nextedge];\n        enter             = nextedge;\n        x                 = i;\n        y                 = j;\n        finalized         = false;\n        origin            = [ i + ee.path[0][0], j + ee.path[0][1] ];\n\n        /* add start coordinate */\n        path.push(origin);\n\n        /* start traceback */\n        while (!finalized) {\n          cc = cellGrid[x][y];\n\n          if (typeof cc.edges[enter] !== 'object')\n            break;\n\n          ee = cc.edges[enter];\n\n          /* remove edge from cell */\n          delete cc.edges[enter];\n\n          /* add last point of edge to path arra, since we extend a polygon */\n          point = ee.path[1];\n          point[0] += x;\n          point[1] += y;\n          path.push(point);\n\n          enter = ee.move.enter;\n          x     = x + ee.move.x;\n          y     = y + ee.move.y;\n\n          /* handle out-of-grid moves */\n          if ((typeof cellGrid[x] === 'undefined') ||\n              (typeof cellGrid[x][y] === 'undefined')) {\n            dir   = 0;\n            count = 0;\n\n            if (x === cols) {\n              x--;\n              dir = 0;  /* move downwards */\n            } else if (x < 0) {\n              x++;\n              dir = 2;  /* move upwards */\n            } else if (y === rows) {\n              y--;\n              dir = 3;  /* move right */\n            } else if (y < 0) {\n              y++;\n              dir = 1;  /* move left */\n            } else {\n              throw new Error('Left the grid somewhere in the interior!');\n            }\n\n            if ((x === i) && (y === j) && (dir === entry_dir[nextedge])) {\n              finalized = true;\n              enter     = nextedge;\n              break;\n            }\n\n            while (1) {\n              found_entry = false;\n\n              if (count > 4)\n                throw new Error('Direction change counter overflow! This should never happen!');\n\n              if (!((typeof cellGrid[x] === 'undefined') ||\n                    (typeof cellGrid[x][y] === 'undefined'))) {\n                cc = cellGrid[x][y];\n\n                /* check for re-entry */\n                for (s = 0; s < valid_entries[dir].length; s++) {\n                  ve = valid_entries[dir][s];\n                  if (typeof cc.edges[ve] === 'object') {\n                    /* found re-entry */\n                    ee = cc.edges[ve];\n                    path.push(entry_coordinate(x, y, dir, ee.path));\n                    enter = ve;\n                    found_entry = true;\n                    break;\n                  }\n                }\n              }\n\n              if (found_entry) {\n                break;\n              } else {\n                path.push(skip_coordinate(x, y, dir));\n\n                x += add_x[dir];\n                y += add_y[dir];\n\n                /* change direction if we'e moved out of grid again */\n                if ((typeof cellGrid[x] === 'undefined') ||\n                    (typeof cellGrid[x][y] === 'undefined')) {\n                  if (((dir === 0) && (y < 0)) ||\n                      ((dir === 1) && (x < 0)) ||\n                      ((dir === 2) && (y === rows)) ||\n                      ((dir === 3) && (x === cols))) {\n                    x -= add_x[dir];\n                    y -= add_y[dir];\n\n                    dir = (dir + 1) % 4;\n                    count++;\n                  }\n                }\n\n                if ((x === i) && (y === j) && (dir === entry_dir[nextedge])) {\n                /* we are back where we started off, so finalize the polygon */\n                  finalized = true;\n                  enter     = nextedge;\n                  break;\n                }\n              }\n            }\n          }\n        }\n\n        if ((settings.linearRing) &&\n          ((path[path.length - 1][0] !== origin[0]) ||\n          (path[path.length - 1][1] !== origin[1])))\n          path.push(origin);\n\n        polygons.push(path);\n      } /* end forall entry sites */\n    }); /* end foreach i */\n  }); /* end foreach j */\n\n  return polygons;\n}\n\n\nfunction traceLinePaths(data, cellGrid, settings) {\n  var nextedge,\n    e,\n    ee,\n    cc,\n    path,\n    enter,\n    x,\n    y,\n    finalized,\n    origin,\n    point,\n    dir,\n    count,\n    found_entry,\n    ve;\n\n  var polygons = [];\n  var rows = data.length - 1;\n  var cols = data[0].length - 1;\n\n  /*\n   * directions for out-of-grid moves are:\n   * 0 ... \"down\",\n   * 1 ... \"left\",\n   * 2 ... \"up\",\n   * 3 ... \"right\"\n   */\n  var valid_entries = [ 'right',  /* down */\n    'bottom', /* left */\n    'left',   /* up */\n    'top'     /* right */\n  ];\n  var add_x         = [ 0, -1, 0, 1 ];\n  var add_y         = [ -1, 0, 1, 0 ];\n  var entry_dir     =  {\n    bottom: 1,\n    left: 2,\n    top: 3,\n    right: 0\n  };\n\n  /* first, detect whether we need any outer frame */\n  if (!settings.noFrame)\n    if (requireLineFrame(data, settings.threshold)) {\n      if (settings.linearRing)\n        polygons.push([ [0, 0], [0, rows], [cols, rows], [cols, 0], [0, 0] ]);\n      else\n        polygons.push([ [0, 0], [0, rows], [cols, rows], [cols, 0] ]);\n    }\n\n  /* finally, start tracing back first polygon(s) */\n\n  cellGrid.forEach(function(a, i) {\n    a.forEach(function(cell, j) {\n      nextedge = null;\n\n      /* trace paths for all available edges that go through this cell */\n      for (e = 0; e < 4; e++) {\n        nextedge = valid_entries[e];\n\n        if (typeof cell.edges[nextedge] !== 'object')\n          continue;\n\n        /* start a new, full path */\n        path              = [];\n        ee                = cell.edges[nextedge];\n        enter             = nextedge;\n        x                 = i;\n        y                 = j;\n        finalized         = false;\n        origin            = [ i + ee.path[0][0], j + ee.path[0][1] ];\n\n        /* add start coordinate */\n        path.push(origin);\n\n        /* start traceback */\n        while (!finalized) {\n          cc = cellGrid[x][y];\n\n          if (typeof cc.edges[enter] !== 'object')\n            break;\n\n          ee = cc.edges[enter];\n\n          /* remove edge from cell */\n          delete cc.edges[enter];\n\n          /* add last point of edge to path arra, since we extend a polygon */\n          point = ee.path[1];\n          point[0] += x;\n          point[1] += y;\n          path.push(point);\n\n          enter = ee.move.enter;\n          x     = x + ee.move.x;\n          y     = y + ee.move.y;\n\n          /* handle out-of-grid moves */\n          if ((typeof cellGrid[x] === 'undefined') ||\n              (typeof cellGrid[x][y] === 'undefined')) {\n\n            if (!settings.linearRing)\n              break;\n\n            dir   = 0;\n            count = 0;\n\n            if (x === cols) {\n              x--;\n              dir = 0;  /* move downwards */\n            } else if (x < 0) {\n              x++;\n              dir = 2;  /* move upwards */\n            } else if (y === rows) {\n              y--;\n              dir = 3;  /* move right */\n            } else if (y < 0) {\n              y++;\n              dir = 1;  /* move left */\n            }\n\n            if ((x === i) && (y === j) && (dir === entry_dir[nextedge])) {\n              finalized = true;\n              enter     = nextedge;\n              break;\n            }\n\n            while (1) {\n              found_entry = false;\n\n              if (count > 4)\n                throw new Error('Direction change counter overflow! This should never happen!');\n\n              if (!((typeof cellGrid[x] === 'undefined') ||\n                    (typeof cellGrid[x][y] === 'undefined'))) {\n                cc = cellGrid[x][y];\n\n                /* check for re-entry */\n                ve = valid_entries[dir];\n                if (typeof cc.edges[ve] === 'object') {\n                  /* found re-entry */\n                  ee = cc.edges[ve];\n                  path.push(entry_coordinate(x, y, dir, ee.path));\n                  enter = ve;\n                  found_entry = true;\n                  break;\n                }\n              }\n\n              if (found_entry) {\n                break;\n              } else {\n                path.push(skip_coordinate(x, y, dir));\n\n                x += add_x[dir];\n                y += add_y[dir];\n\n                /* change direction if we'e moved out of grid again */\n                if ((typeof cellGrid[x] === 'undefined') ||\n                  (typeof cellGrid[x][y] === 'undefined')) {\n                  if (((dir === 0) && (y < 0)) ||\n                      ((dir === 1) && (x < 0)) ||\n                      ((dir === 2) && (y === rows)) ||\n                      ((dir === 3) && (x === cols))) {\n                    x -= add_x[dir];\n                    y -= add_y[dir];\n\n                    dir = (dir + 1) % 4;\n                    count++;\n                  }\n                }\n\n                if ((x === i) && (y === j) && (dir === entry_dir[nextedge])) {\n                  /* we are back where we started off, so finalize the polygon */\n                  finalized = true;\n                  enter     = nextedge;\n                  break;\n                }\n              }\n            }\n          }\n        }\n\n        if ((settings.linearRing) &&\n            ((path[path.length - 1][0] !== origin[0]) ||\n            (path[path.length - 1][1] !== origin[1])))\n          path.push(origin);\n\n        polygons.push(path);\n      } /* end forall entry sites */\n    }); /* end foreach i */\n  }); /* end foreach j */\n\n  return polygons;\n}\n\n/* quadTree node constructor */\nfunction TreeNode(data, x, y, dx, dy) {\n  var dx_tmp = dx,\n    dy_tmp = dy,\n    msb_x  = 0,\n    msb_y  = 0;\n\n  /* left-bottom corner of current quadrant */\n  this.x = x;\n  this.y = y;\n\n  /* minimum value in subtree under this node */\n  this.lowerBound = null;\n  /* maximum value in subtree under this node */\n  this.upperBound = null;\n\n  /*\n   *  child nodes are layed out in the following way:\n   *\n   *  (x, y + 1) ---- (x + 1, y + 1)\n   *  |             |              |\n   *  |      D      |      C       |\n   *  |             |              |\n   *  |----------------------------|\n   *  |             |              |\n   *  |      A      |      B       |\n   *  |             |              |\n   *  (x, y) ------------ (x + 1, y)\n   */\n  this.childA = null;\n  this.childB = null;\n  this.childC = null;\n  this.childD = null;\n\n  if ((dx === 1) && (dy === 1)) {\n    /* do not further subdivision */\n    this.lowerBound = Math.min(\n      data[y][x],\n      data[y][x + 1],\n      data[y + 1][x + 1],\n      data[y + 1][x]\n    );\n    this.upperBound = Math.max(\n      data[y][x],\n      data[y][x + 1],\n      data[y + 1][x + 1],\n      data[y + 1][x]\n    );\n  } else {\n    /* get most significant bit from dx */\n    if (dx > 1) {\n      while (dx_tmp !== 0) {\n        dx_tmp = dx_tmp >> 1;\n        msb_x++;\n      }\n\n      if (dx === (1 << (msb_x - 1)))\n        msb_x--;\n\n      dx_tmp = 1 << (msb_x - 1);\n    }\n\n    /* get most significant bit from dx */\n    if (dy > 1) {\n      while (dy_tmp !== 0) {\n        dy_tmp = dy_tmp >> 1;\n        msb_y++;\n      }\n\n      if (dy === (1 << (msb_y - 1)))\n        msb_y--;\n\n      dy_tmp = 1 << (msb_y - 1);\n    }\n\n    this.childA = new TreeNode(data, x, y, dx_tmp, dy_tmp);\n    this.lowerBound = this.childA.lowerBound;\n    this.upperBound = this.childA.upperBound;\n\n    if (dx - dx_tmp > 0) {\n      this.childB = new TreeNode(data, x + dx_tmp, y, dx - dx_tmp, dy_tmp);\n      this.lowerBound = Math.min(this.lowerBound, this.childB.lowerBound);\n      this.upperBound = Math.max(this.upperBound, this.childB.upperBound);\n\n      if (dy - dy_tmp > 0) {\n        this.childC = new TreeNode(data, x + dx_tmp, y + dy_tmp, dx - dx_tmp, dy - dy_tmp);\n        this.lowerBound = Math.min(this.lowerBound, this.childC.lowerBound);\n        this.upperBound = Math.max(this.upperBound, this.childC.upperBound);\n      }\n    }\n\n    if (dy - dy_tmp > 0) {\n      this.childD = new TreeNode(data, x, y + dy_tmp, dx_tmp, dy - dy_tmp);\n      this.lowerBound = Math.min(this.lowerBound, this.childD.lowerBound);\n      this.upperBound = Math.max(this.upperBound, this.childD.upperBound);\n    }\n  }\n}\n\n\n/**\n *  Retrieve a list of cells within a particular range of values by\n *  recursivly traversing the quad tree to it's leaves.\n *\n *  @param  subsumed  If 'true' include all cells that are completely\n *                    subsumed within the specified range. Otherwise,\n *                    return only cells where at least one corner is\n *                    outside the specified range.\n *\n *  @return   An array of objects 'o' where each object has exactly two\n *            properties: 'o.x' and 'o.y' denoting the left-bottom corner\n *            of the corresponding cell.\n */\nTreeNode.prototype.cellsInBand = function(lowerBound, upperBound, subsumed) {\n  var cells = [];\n\n  subsumed = (typeof subsumed === 'undefined') ? true : subsumed;\n\n  if ((this.lowerBound > upperBound) || (this.upperBound < lowerBound))\n    return cells;\n\n  if (!(this.childA || this.childB || this.childC || this.childD)) {\n    if ((subsumed) ||\n        (this.lowerBound <= lowerBound) ||\n        (this.upperBound >= upperBound)) {\n      cells.push({\n        x: this.x,\n        y: this.y\n      });\n    }\n  } else {\n    if (this.childA)\n      cells = cells.concat(this.childA.cellsInBand(lowerBound, upperBound, subsumed));\n\n    if (this.childB)\n      cells = cells.concat(this.childB.cellsInBand(lowerBound, upperBound, subsumed));\n\n    if (this.childD)\n      cells = cells.concat(this.childD.cellsInBand(lowerBound, upperBound, subsumed));\n\n    if (this.childC)\n      cells = cells.concat(this.childC.cellsInBand(lowerBound, upperBound, subsumed));\n  }\n\n  return cells;\n};\n\n\nTreeNode.prototype.cellsBelowThreshold = function(threshold, subsumed) {\n  var cells = [];\n\n  subsumed = (typeof subsumed === 'undefined') ? true : subsumed;\n\n  if (this.lowerBound > threshold)\n    return cells;\n\n  if (!(this.childA || this.childB || this.childC || this.childD)) {\n    if ((subsumed) ||\n        (this.upperBound >= threshold)) {\n      cells.push({\n        x: this.x,\n        y: this.y\n      });\n    }\n  } else {\n    if (this.childA)\n      cells = cells.concat(this.childA.cellsBelowThreshold(threshold, subsumed));\n\n    if (this.childB)\n      cells = cells.concat(this.childB.cellsBelowThreshold(threshold, subsumed));\n\n    if (this.childD)\n      cells = cells.concat(this.childD.cellsBelowThreshold(threshold, subsumed));\n\n    if (this.childC)\n      cells = cells.concat(this.childC.cellsBelowThreshold(threshold, subsumed));\n  }\n\n  return cells;\n};\n\n\n/*\n * Given a scalar field `data` construct a QuadTree\n * to efficiently lookup those parts of the scalar\n * field where values are within a particular\n * range of [lowerbound, upperbound] limits.\n */\nfunction QuadTree(data) {\n  var i, cols;\n\n  /* do some input checking */\n  if (!data)\n    throw new Error('data is required');\n\n  if (!Array.isArray(data) ||\n      !Array.isArray(data[0]))\n    throw new Error('data must be scalar field, i.e. array of arrays');\n\n  if (data.length < 2)\n    throw new Error('data must contain at least two rows');\n\n  /* check if we've got a regular grid */\n  cols = data[0].length;\n\n  if (cols < 2)\n    throw new Error('data must contain at least two columns');\n\n  for (i = 1; i < data.length; i++) {\n    if (!Array.isArray(data[i]))\n      throw new Error('Row ' + i + ' is not an array');\n\n    if (data[i].length != cols)\n      throw new Error('unequal row lengths detected, please provide a regular grid');\n  }\n\n  /* create pre-processing object */\n  this.data = data;\n  /* root node, i.e. entry to the data */\n  this.root = new TreeNode(data, 0, 0, data[0].length - 1, data.length - 1);\n}\n\n/* eslint no-console: [\"error\", { allow: [\"log\"] }] */\n\n\n/*\n * Compute the iso lines for a scalar 2D field given\n * a certain threshold by applying the Marching Squares\n * Algorithm. The function returns a list of path coordinates\n */\n\nfunction isoLines(input, threshold, options) {\n  var settings,\n    i,\n    j,\n    useQuadTree   = false,\n    multiLine     = false,\n    tree          = null,\n    root          = null,\n    data          = null,\n    cellGrid      = null,\n    linePolygons  = null,\n    ret           = [];\n\n  /* validation */\n  if (!input) throw new Error('data is required');\n  if (threshold === undefined || threshold === null) throw new Error('threshold is required');\n  if ((!!options) && (typeof options !== 'object')) throw new Error('options must be an object');\n\n  /* process options */\n  settings = isoLineOptions(options);\n\n  /* check for input data */\n  if (input instanceof QuadTree) {\n    tree = input;\n    root = input.root;\n    data = input.data;\n    if (!settings.noQuadTree)\n      useQuadTree = true;\n  } else if (Array.isArray(input) && Array.isArray(input[0])) {\n    data = input;\n  } else {\n    throw new Error('input is neither array of arrays nor object retrieved from \\'QuadTree()\\'');\n  }\n\n  /* check and prepare input threshold(s) */\n  if (Array.isArray(threshold)) {\n    multiLine = true;\n\n    /* activate QuadTree optimization if not explicitly forbidden by user settings */\n    if (!settings.noQuadTree)\n      useQuadTree = true;\n\n    /* check if all minV are numbers */\n    for (i = 0; i < threshold.length; i++)\n      if (isNaN(+threshold[i]))\n        throw new Error('threshold[' + i + '] is not a number');\n  } else {\n    if (isNaN(+threshold))\n      throw new Error('threshold must be a number or array of numbers');\n\n    threshold = [ threshold ];\n  }\n\n  /* create QuadTree root node if not already present */\n  if ((useQuadTree) && (!root)) {\n    tree = new QuadTree(data);\n    root = tree.root;\n    data = tree.data;\n  }\n\n  if (settings.verbose) {\n    if(settings.polygons)\n      console.log('MarchingSquaresJS-isoLines: returning single lines (polygons) for each grid cell');\n    else\n      console.log('MarchingSquaresJS-isoLines: returning line paths (polygons) for entire data grid');\n\n    if (multiLine)\n      console.log('MarchingSquaresJS-isoLines: multiple lines requested, returning array of line paths instead of lines for a single threshold');\n  }\n\n  /* Done with all input validation, now let's start computing stuff */\n\n  /* loop over all threhsold values */\n  threshold.forEach(function(t, i) {\n    linePolygons = [];\n\n    /* store bounds for current computation in settings object */\n    settings.threshold = t;\n\n    if(settings.verbose)\n      console.log('MarchingSquaresJS-isoLines: computing iso lines for threshold ' + t);\n\n    if (settings.polygons) {\n      /* compose list of polygons for each single cell */\n      if (useQuadTree) {\n        /* go through list of cells retrieved from QuadTree */\n        root\n          .cellsBelowThreshold(settings.threshold, true)\n          .forEach(function(c) {\n            linePolygons  = linePolygons.concat(\n              cell2Polygons(\n                prepareCell(data,\n                  c.x,\n                  c.y,\n                  settings),\n                c.x,\n                c.y,\n                settings\n              ));\n          });\n      } else {\n        /* go through entire array of input data */\n        for (j = 0; j < data.length - 1; ++j) {\n          for (i = 0; i < data[0].length - 1; ++i)\n            linePolygons  = linePolygons.concat(\n              cell2Polygons(\n                prepareCell(data,\n                  i,\n                  j,\n                  settings),\n                i,\n                j,\n                settings\n              ));\n        }\n      }\n    } else {\n      /* sparse grid of input data cells */\n      cellGrid = [];\n      for (i = 0; i < data[0].length - 1; ++i)\n        cellGrid[i] = [];\n\n      /* compose list of polygons for entire input grid */\n      if (useQuadTree) {\n        /* collect the cells */\n        root\n          .cellsBelowThreshold(settings.threshold, false)\n          .forEach(function(c) {\n            cellGrid[c.x][c.y] = prepareCell(data,\n              c.x,\n              c.y,\n              settings);\n          });\n      } else {\n        /* prepare cells */\n        for (i = 0; i < data[0].length - 1; ++i) {\n          for (j = 0; j < data.length - 1; ++j) {\n            cellGrid[i][j]  = prepareCell(data,\n              i,\n              j,\n              settings);\n          }\n        }\n      }\n\n      linePolygons = traceLinePaths(data, cellGrid, settings);\n    }\n\n    /* finally, add polygons to output array */\n    if (multiLine)\n      ret.push(linePolygons);\n    else\n      ret = linePolygons;\n\n    if(typeof settings.successCallback === 'function')\n      settings.successCallback(ret, t);\n\n  });\n\n  return ret;\n}\n\n/*\n * Thats all for the public interface, below follows the actual\n * implementation\n */\n\n/*\n * ################################\n * Isocontour implementation below\n * ################################\n */\n\nfunction prepareCell(grid, x, y, settings) {\n  var left,\n    right,\n    top,\n    bottom,\n    average,\n    cell;\n\n  var cval      = 0;\n  var x3        = grid[y + 1][x];\n  var x2        = grid[y + 1][x + 1];\n  var x1        = grid[y][x + 1];\n  var x0        = grid[y][x];\n  var threshold = settings.threshold;\n\n  /*\n   * Note that missing data within the grid will result\n   * in horribly failing to trace full polygon paths\n   */\n  if(isNaN(x0) || isNaN(x1) || isNaN(x2) || isNaN(x3)) {\n    return;\n  }\n\n  /*\n   * Here we detect the type of the cell\n   *\n   * x3 ---- x2\n   * |      |\n   * |      |\n   * x0 ---- x1\n   *\n   * with edge points\n   *\n   * x0 = (x,y),\n   * x1 = (x + 1, y),\n   * x2 = (x + 1, y + 1), and\n   * x3 = (x, y + 1)\n   *\n   * and compute the polygon intersections with the edges\n   * of the cell. Each edge value may be (i) smaller, or (ii)\n   * greater or equal to the iso line threshold. We encode\n   * this property using 1 bit of information, where\n   *\n   * 0 ... below,\n   * 1 ... above or equal\n   *\n   * Then we store the cells value as vector\n   *\n   * cval = (x0, x1, x2, x3)\n   *\n   * where x0 is the least significant bit (0th),\n   * x1 the 2nd bit, and so on. This essentially\n   * enables us to work with a single integer number\n   */\n\n  cval |= ((x3 >= threshold) ? 8 : 0);\n  cval |= ((x2 >= threshold) ? 4 : 0);\n  cval |= ((x1 >= threshold) ? 2 : 0);\n  cval |= ((x0 >= threshold) ? 1 : 0);\n\n  /* make sure cval is a number */\n  cval = +cval;\n\n  /* compose the cell object */\n  cell = {\n    cval:         cval,\n    polygons:     [],\n    edges:        {},\n    x0:           x0,\n    x1:           x1,\n    x2:           x2,\n    x3:           x3\n  };\n\n  /*\n   * Compute interpolated intersections of the polygon(s)\n   * with the cell borders and (i) add edges for polygon\n   * trace-back, or (ii) a list of small closed polygons\n   */\n  switch (cval) {\n  case 0:\n    if (settings.polygons)\n      cell.polygons.push([ [0, 0], [0, 1], [1, 1], [1, 0] ]);\n\n    break;\n\n  case 15:\n    /* cell is outside (above) threshold, no polygons */\n    break;\n\n  case 14: /* 1110 */\n    left    = settings.interpolate(x0, x3, threshold);\n    bottom  = settings.interpolate(x0, x1, threshold);\n\n    if (settings.polygons_full) {\n      cell.edges.left = {\n        path: [ [0, left], [bottom, 0] ],\n        move: {\n          x:      0,\n          y:      -1,\n          enter:  'top'\n        }\n      };\n    }\n\n    if (settings.polygons)\n      cell.polygons.push([ [0, 0], [0, left], [bottom, 0] ]);\n\n    break;\n\n  case 13: /* 1101 */\n    bottom  = settings.interpolate(x0, x1, threshold);\n    right   = settings.interpolate(x1, x2, threshold);\n\n    if (settings.polygons_full) {\n      cell.edges.bottom = {\n        path: [ [bottom, 0], [1, right] ],\n        move: {\n          x:      1,\n          y:      0,\n          enter:  'left'\n        }\n      };\n    }\n\n    if (settings.polygons)\n      cell.polygons.push([ [bottom, 0], [1, right], [1, 0] ]);\n\n    break;\n\n  case 11: /* 1011 */\n    right = settings.interpolate(x1, x2, threshold);\n    top   = settings.interpolate(x3, x2, threshold);\n\n    if (settings.polygons_full) {\n      cell.edges.right = {\n        path: [ [1, right], [top, 1] ],\n        move: {\n          x:      0,\n          y:      1,\n          enter:  'bottom'\n        }\n      };\n    }\n\n    if (settings.polygons)\n      cell.polygons.push([ [1, right], [top, 1], [1, 1] ]);\n\n    break;\n\n  case 7: /* 0111 */\n    left  = settings.interpolate(x0, x3, threshold);\n    top   = settings.interpolate(x3, x2, threshold);\n\n    if (settings.polygons_full) {\n      cell.edges.top = {\n        path: [ [top, 1], [0, left] ],\n        move: {\n          x:      -1,\n          y:      0,\n          enter:  'right'\n        }\n      };\n    }\n\n    if (settings.polygons)\n      cell.polygons.push([ [top, 1], [0, left], [0, 1] ]);\n\n    break;\n\n  case 1: /* 0001 */\n    left    = settings.interpolate(x0, x3, threshold);\n    bottom  = settings.interpolate(x0, x1, threshold);\n\n    if (settings.polygons_full) {\n      cell.edges.bottom = {\n        path: [ [bottom, 0], [0, left] ],\n        move: {\n          x:      -1,\n          y:      0,\n          enter:  'right'\n        }\n      };\n    }\n\n    if (settings.polygons)\n      cell.polygons.push([ [bottom, 0], [0, left], [0, 1], [1, 1], [1, 0] ]);\n\n    break;\n\n  case 2: /* 0010 */\n    bottom  = settings.interpolate(x0, x1, threshold);\n    right   = settings.interpolate(x1, x2, threshold);\n\n    if (settings.polygons_full) {\n      cell.edges.right = {\n        path: [ [1, right], [bottom, 0] ],\n        move: {\n          x:      0,\n          y:      -1,\n          enter:  'top'\n        }\n      };\n    }\n\n    if (settings.polygons)\n      cell.polygons.push([ [0, 0], [0, 1], [1, 1], [1, right], [bottom, 0] ]);\n\n    break;\n\n  case 4: /* 0100 */\n    right = settings.interpolate(x1, x2, threshold);\n    top   = settings.interpolate(x3, x2, threshold);\n\n    if (settings.polygons_full) {\n      cell.edges.top = {\n        path: [ [top, 1], [1, right] ],\n        move: {\n          x:      1,\n          y:      0,\n          enter:  'left'\n        }\n      };\n    }\n\n    if (settings.polygons)\n      cell.polygons.push([ [0, 0], [0, 1], [top, 1], [1, right], [1, 0] ]);\n\n    break;\n\n  case 8: /* 1000 */\n    left  = settings.interpolate(x0, x3, threshold);\n    top   = settings.interpolate(x3, x2, threshold);\n\n    if (settings.polygons_full) {\n      cell.edges.left = {\n        path: [ [0, left], [top, 1] ],\n        move: {\n          x:      0,\n          y:      1,\n          enter:  'bottom'\n        }\n      };\n    }\n\n    if (settings.polygons)\n      cell.polygons.push([ [0, 0], [0, left], [top, 1], [1, 1], [1, 0] ]);\n\n    break;\n\n  case 12: /* 1100 */\n    left  = settings.interpolate(x0, x3, threshold);\n    right = settings.interpolate(x1, x2, threshold);\n\n    if (settings.polygons_full) {\n      cell.edges.left = {\n        path: [ [0, left], [1, right] ],\n        move: {\n          x:      1,\n          y:      0,\n          enter:  'left'\n        }\n      };\n    }\n\n    if (settings.polygons)\n      cell.polygons.push([ [0, 0], [0, left], [1, right], [1, 0] ]);\n\n    break;\n\n  case 9: /* 1001 */\n    bottom  = settings.interpolate(x0, x1, threshold);\n    top     = settings.interpolate(x3, x2, threshold);\n\n    if (settings.polygons_full) {\n      cell.edges.bottom = {\n        path: [ [bottom, 0], [top, 1] ],\n        move: {\n          x:      0,\n          y:      1,\n          enter:  'bottom'\n        }\n      };\n    }\n\n    if (settings.polygons)\n      cell.polygons.push([ [bottom, 0], [top, 1], [1, 1], [1, 0] ]);\n\n    break;\n\n  case 3: /* 0011 */\n    left  = settings.interpolate(x0, x3, threshold);\n    right = settings.interpolate(x1, x2, threshold);\n\n    if (settings.polygons_full) {\n      cell.edges.right = {\n        path: [ [1, right], [0, left] ],\n        move: {\n          x:      -1,\n          y:      0,\n          enter:  'right'\n        }\n      };\n    }\n\n    if (settings.polygons)\n      cell.polygons.push([ [0, left], [0, 1], [1, 1], [1, right] ]);\n\n    break;\n\n  case 6: /* 0110 */\n    bottom  = settings.interpolate(x0, x1, threshold);\n    top     = settings.interpolate(x3, x2, threshold);\n\n    if (settings.polygons_full) {\n      cell.edges.top = {\n        path: [ [top, 1], [bottom, 0] ],\n        move: {\n          x:      0,\n          y:      -1,\n          enter:  'top'\n        }\n      };\n    }\n\n    if (settings.polygons)\n      cell.polygons.push([ [0, 0], [0, 1], [top, 1], [bottom, 0] ]);\n\n    break;\n\n  case 10: /* 1010 */\n    left    = settings.interpolate(x0, x3, threshold);\n    right   = settings.interpolate(x1, x2, threshold);\n    bottom  = settings.interpolate(x0, x1, threshold);\n    top     = settings.interpolate(x3, x2, threshold);\n    average = (x0 + x1 + x2 + x3) / 4;\n\n    if (settings.polygons_full) {\n      if (average < threshold) {\n        cell.edges.left = {\n          path: [ [0, left], [top, 1] ],\n          move: {\n            x:      0,\n            y:      1,\n            enter:  'bottom'\n          }\n        };\n        cell.edges.right = {\n          path: [ [1, right], [bottom, 0] ],\n          move: {\n            x:      0,\n            y:      -1,\n            enter:  'top'\n          }\n        };\n      } else {\n        cell.edges.right = {\n          path: [ [1, right], [top, 1] ],\n          move: {\n            x:      0,\n            y:      1,\n            enter:  'bottom'\n          }\n        };\n        cell.edges.left = {\n          path: [ [0, left], [bottom, 0] ],\n          move: {\n            x:      0,\n            y:      -1,\n            enter:  'top'\n          }\n        };\n      }\n    }\n\n    if (settings.polygons) {\n      if (average < threshold) {\n        cell.polygons.push([ [0, 0], [0, left], [top, 1], [1, 1], [1, right], [bottom, 0] ]);\n      } else {\n        cell.polygons.push([ [0, 0], [0, left], [bottom, 0] ]);\n        cell.polygons.push([ [top, 1], [1, 1], [1, right] ]);\n      }\n    }\n\n    break;\n\n  case 5: /* 0101 */\n    left    = settings.interpolate(x0, x3, threshold);\n    right   = settings.interpolate(x1, x2, threshold);\n    bottom  = settings.interpolate(x0, x1, threshold);\n    top     = settings.interpolate(x3, x2, threshold);\n    average = (x0 + x1 + x2 + x3) / 4;\n\n    if (settings.polygons_full) {\n      if (average < threshold) {\n        cell.edges.bottom = {\n          path: [ [bottom, 0], [0, left] ],\n          move: {\n            x:      -1,\n            y:      0,\n            enter:  'right'\n          }\n        };\n        cell.edges.top = {\n          path: [ [top, 1], [1, right] ],\n          move: {\n            x:      1,\n            y:      0,\n            enter:  'left'\n          }\n        };\n      } else {\n        cell.edges.top = {\n          path: [ [top, 1], [0, left] ],\n          move: {\n            x:      -1,\n            y:      0,\n            enter:  'right'\n          }\n        };\n        cell.edges.bottom = {\n          path: [ [bottom, 0], [1, right] ],\n          move: {\n            x:      1,\n            y:      0,\n            enter:  'left'\n          }\n        };\n      }\n    }\n\n    if (settings.polygons) {\n      if (average < threshold) {\n        cell.polygons.push([ [0, left], [0, 1], [top, 1], [1, right], [1, 0], [bottom, 0] ]);\n      } else {\n        cell.polygons.push([ [0, left], [0, 1], [top, 1] ]);\n        cell.polygons.push([ [bottom, 0], [1, right], [1, 0] ]);\n      }\n    }\n\n    break;\n  }\n\n  return cell;\n}\n\n/* eslint no-console: [\"error\", { allow: [\"log\"] }] */\n\n\n/*\n * lookup table to generate polygon paths or edges required to\n * trace the full polygon(s)\n */\nvar shapeCoordinates = {\n  square:       function(cell, x0, x1, x2, x3, opt) {\n    if (opt.polygons)\n      cell.polygons.push([ [0,0], [0, 1], [1, 1], [1, 0] ]);\n  },\n\n  triangle_bl:  function(cell, x0, x1, x2, x3, opt) {\n    var bottomleft = opt.interpolate(x0, x1, opt.minV, opt.maxV);\n    var leftbottom = opt.interpolate(x0, x3, opt.minV, opt.maxV);\n\n    if (opt.polygons_full) {\n      cell.edges.lb = {\n        path: [ [0, leftbottom], [bottomleft, 0] ],\n        move: {\n          x:      0,\n          y:      -1,\n          enter:  'tl'\n        }\n      };\n    }\n\n    if (opt.polygons)\n      cell.polygons.push([ [0, leftbottom], [bottomleft, 0], [0, 0] ]);\n  },\n\n  triangle_br:  function(cell, x0, x1, x2, x3, opt) {\n    var bottomright = opt.interpolate(x0, x1, opt.minV, opt.maxV);\n    var rightbottom = opt.interpolate(x1, x2, opt.minV, opt.maxV);\n\n    if (opt.polygons_full) {\n      cell.edges.br = {\n        path: [ [bottomright, 0], [1, rightbottom] ],\n        move: {\n          x:      1,\n          y:      0,\n          enter:  'lb'\n        }\n      };\n    }\n\n    if (opt.polygons)\n      cell.polygons.push([ [bottomright, 0], [1, rightbottom], [1, 0] ]);\n  },\n\n  triangle_tr:  function(cell, x0, x1, x2, x3, opt) {\n    var righttop = opt.interpolate(x1, x2, opt.minV, opt.maxV);\n    var topright = opt.interpolate(x3, x2, opt.minV, opt.maxV);\n\n    if (opt.polygons_full) {\n      cell.edges.rt = {\n        path: [ [1, righttop], [topright, 1] ],\n        move: {\n          x:      0,\n          y:      1,\n          enter:  'br'\n        }\n      };\n    }\n\n    if (opt.polygons)\n      cell.polygons.push([ [1, righttop], [topright, 1], [1, 1] ]);\n  },\n\n  triangle_tl:  function(cell, x0, x1, x2, x3, opt) {\n    var topleft = opt.interpolate(x3, x2, opt.minV, opt.maxV);\n    var lefttop = opt.interpolate(x0, x3, opt.minV, opt.maxV);\n\n    if (opt.polygons_full) {\n      cell.edges.tl = {\n        path: [ [topleft, 1], [0, lefttop] ],\n        move: {\n          x:      -1,\n          y:      0,\n          enter:  'rt'\n        }\n      };\n    }\n\n    if (opt.polygons)\n      cell.polygons.push([ [0, lefttop], [0, 1], [topleft, 1] ]);\n  },\n\n  tetragon_t:   function(cell, x0, x1, x2, x3, opt) {\n    var righttop  = opt.interpolate(x1, x2, opt.minV, opt.maxV);\n    var lefttop   = opt.interpolate(x0, x3, opt.minV, opt.maxV);\n\n    if (opt.polygons_full) {\n      cell.edges.rt = {\n        path: [ [1, righttop], [0, lefttop] ],\n        move: {\n          x:      -1,\n          y:      0,\n          enter:  'rt'\n        }\n      };\n    }\n\n    if (opt.polygons)\n      cell.polygons.push([ [0, lefttop], [0, 1], [1, 1], [1, righttop] ]);\n  },\n\n  tetragon_r:   function(cell, x0, x1, x2, x3, opt) {\n    var bottomright = opt.interpolate(x0, x1, opt.minV, opt.maxV);\n    var topright    = opt.interpolate(x3, x2, opt.minV, opt.maxV);\n    if (opt.polygons_full) {\n      cell.edges.br = {\n        path: [ [bottomright, 0], [topright, 1] ],\n        move: {\n          x:      0,\n          y:      1,\n          enter:  'br'\n        }\n      };\n    }\n\n    if (opt.polygons)\n      cell.polygons.push([ [bottomright, 0], [topright, 1], [1, 1], [1, 0] ]);\n  },\n\n  tetragon_b:   function(cell, x0, x1, x2, x3, opt) {\n    var leftbottom  = opt.interpolate(x0, x3, opt.minV, opt.maxV);\n    var rightbottom = opt.interpolate(x1, x2, opt.minV, opt.maxV);\n\n    if (opt.polygons_full) {\n      cell.edges.lb = {\n        path: [ [0, leftbottom], [1, rightbottom] ],\n        move: {\n          x:      1,\n          y:      0,\n          enter:  'lb'\n        }\n      };\n    }\n\n    if (opt.polygons)\n      cell.polygons.push([ [0, 0], [0, leftbottom], [1, rightbottom], [1, 0] ]);\n  },\n\n  tetragon_l:   function(cell, x0, x1, x2, x3, opt) {\n    var topleft     = opt.interpolate(x3, x2, opt.minV, opt.maxV);\n    var bottomleft  = opt.interpolate(x0, x1, opt.minV, opt.maxV);\n\n    if (opt.polygons_full) {\n      cell.edges.tl = {\n        path: [ [topleft, 1], [bottomleft, 0] ],\n        move: {\n          x:      0,\n          y:      -1,\n          enter:  'tl'\n        }\n      };\n    }\n\n    if (opt.polygons)\n      cell.polygons.push([ [0, 0], [0, 1], [topleft, 1], [bottomleft, 0] ]);\n  },\n\n  tetragon_bl:  function(cell, x0, x1, x2, x3, opt) {\n    var bottomleft  = opt.interpolate_a(x0, x1, opt.minV, opt.maxV);\n    var bottomright = opt.interpolate_b(x0, x1, opt.minV, opt.maxV);\n    var leftbottom  = opt.interpolate_a(x0, x3, opt.minV, opt.maxV);\n    var lefttop     = opt.interpolate_b(x0, x3, opt.minV, opt.maxV);\n\n    if (opt.polygons_full) {\n      cell.edges.bl = {\n        path: [ [bottomleft, 0], [0, leftbottom] ],\n        move: {\n          x:      -1,\n          y:      0,\n          enter:  'rb'\n        }\n      };\n      cell.edges.lt = {\n        path: [ [0, lefttop], [bottomright, 0] ],\n        move: {\n          x:      0,\n          y:      -1,\n          enter:  'tr'\n        }\n      };\n    }\n\n    if (opt.polygons)\n      cell.polygons.push([ [bottomleft, 0], [0, leftbottom], [0, lefttop], [bottomright, 0] ]);\n  },\n\n  tetragon_br:  function(cell, x0, x1, x2, x3, opt) {\n    var bottomleft  = opt.interpolate_a(x0, x1, opt.minV, opt.maxV);\n    var bottomright = opt.interpolate_b(x0, x1, opt.minV, opt.maxV);\n    var rightbottom = opt.interpolate_a(x1, x2, opt.minV, opt.maxV);\n    var righttop    = opt.interpolate_b(x1, x2, opt.minV, opt.maxV);\n\n    if (opt.polygons_full) {\n      cell.edges.bl = {\n        path: [ [bottomleft, 0], [1, righttop] ],\n        move: {\n          x: 1,\n          y: 0,\n          enter: 'lt'\n        }\n      };\n      cell.edges.rb = {\n        path: [ [1, rightbottom], [bottomright, 0] ],\n        move: {\n          x: 0,\n          y: -1,\n          enter: 'tr'\n        }\n      };\n    }\n\n    if (opt.polygons)\n      cell.polygons.push([ [bottomleft, 0], [1, righttop], [1, rightbottom], [bottomright, 0] ]);\n  },\n\n  tetragon_tr:  function(cell, x0, x1, x2, x3, opt) {\n    var topleft     = opt.interpolate_a(x3, x2, opt.minV, opt.maxV);\n    var topright    = opt.interpolate_b(x3, x2, opt.minV, opt.maxV);\n    var righttop    = opt.interpolate_b(x1, x2, opt.minV, opt.maxV);\n    var rightbottom = opt.interpolate_a(x1, x2, opt.minV, opt.maxV);\n\n    if (opt.polygons_full) {\n      cell.edges.rb = {\n        path: [ [1, rightbottom], [topleft, 1] ],\n        move: {\n          x: 0,\n          y: 1,\n          enter: 'bl'\n        }\n      };\n      cell.edges.tr = {\n        path: [ [topright, 1], [1, righttop] ],\n        move: {\n          x: 1,\n          y: 0,\n          enter: 'lt'\n        }\n      };\n    }\n\n    if (opt.polygons)\n      cell.polygons.push([ [1, rightbottom], [topleft, 1], [topright, 1], [1, righttop] ]);\n  },\n\n  tetragon_tl:  function(cell, x0, x1, x2, x3, opt) {\n    var topleft     = opt.interpolate_a(x3, x2, opt.minV, opt.maxV);\n    var topright    = opt.interpolate_b(x3, x2, opt.minV, opt.maxV);\n    var lefttop     = opt.interpolate_b(x0, x3, opt.minV, opt.maxV);\n    var leftbottom  = opt.interpolate_a(x0, x3, opt.minV, opt.maxV);\n\n    if (opt.polygons_full) {\n      cell.edges.tr = {\n        path: [ [topright, 1], [0, leftbottom] ],\n        move: {\n          x:      -1,\n          y:      0,\n          enter:  'rb'\n        }\n      };\n      cell.edges.lt = {\n        path: [ [0, lefttop], [topleft, 1] ],\n        move: {\n          x:      0,\n          y:      1,\n          enter:  'bl'\n        }\n      };\n    }\n\n    if (opt.polygons)\n      cell.polygons.push([ [topright, 1], [0, leftbottom], [0, lefttop], [topleft, 1] ]);\n  },\n\n  tetragon_lr:  function(cell, x0, x1, x2, x3, opt) {\n    var leftbottom  = opt.interpolate_a(x0, x3, opt.minV, opt.maxV);\n    var lefttop     = opt.interpolate_b(x0, x3, opt.minV, opt.maxV);\n    var righttop    = opt.interpolate_b(x1, x2, opt.minV, opt.maxV);\n    var rightbottom = opt.interpolate_a(x1, x2, opt.minV, opt.maxV);\n\n    if (opt.polygons_full) {\n      cell.edges.lt = {\n        path: [ [0, lefttop], [1, righttop] ],\n        move: {\n          x:      1,\n          y:      0,\n          enter:  'lt'\n        }\n      };\n      cell.edges.rb = {\n        path: [ [1, rightbottom], [0, leftbottom] ],\n        move: {\n          x:      -1,\n          y:      0,\n          enter:  'rb'\n        }\n      };\n    }\n\n    if (opt.polygons)\n      cell.polygons.push([ [0, leftbottom], [0, lefttop], [1, righttop], [1, rightbottom] ]);\n  },\n\n  tetragon_tb:  function(cell, x0, x1, x2, x3, opt) {\n    var topleft     = opt.interpolate_a(x3, x2, opt.minV, opt.maxV);\n    var topright    = opt.interpolate_b(x3, x2, opt.minV, opt.maxV);\n    var bottomright = opt.interpolate_b(x0, x1, opt.minV, opt.maxV);\n    var bottomleft  = opt.interpolate_a(x0, x1, opt.minV, opt.maxV);\n\n    if (opt.polygons_full) {\n      cell.edges.tr =  {\n        path: [ [topright, 1], [bottomright, 0] ],\n        move: {\n          x:      0,\n          y:      -1,\n          enter:  'tr'\n        }\n      };\n      cell.edges.bl = {\n        path: [ [bottomleft, 0], [topleft, 1] ],\n        move: {\n          x:      0,\n          y:      1,\n          enter:  'bl'\n        }\n      };\n    }\n\n    if (opt.polygons)\n      cell.polygons.push([ [bottomleft, 0], [topleft, 1], [topright, 1], [bottomright, 0] ]);\n  },\n\n  pentagon_tr:  function(cell, x0, x1, x2, x3, opt) {\n    var topleft     = opt.interpolate(x3, x2, opt.minV, opt.maxV);\n    var rightbottom = opt.interpolate(x1, x2, opt.minV, opt.maxV);\n\n    if (opt.polygons_full) {\n      cell.edges.tl = {\n        path: [[topleft, 1], [1, rightbottom]],\n        move: {\n          x:      1,\n          y:      0,\n          enter:  'lb'\n        }\n      };\n    }\n\n    if (opt.polygons)\n      cell.polygons.push([ [0, 0], [0, 1], [topleft, 1], [1, rightbottom], [1, 0] ]);\n  },\n\n  pentagon_tl:  function(cell, x0, x1, x2, x3, opt) {\n    var leftbottom  = opt.interpolate(x0, x3, opt.minV, opt.maxV);\n    var topright    = opt.interpolate(x3, x2, opt.minV, opt.maxV);\n\n    if (opt.polygons_full) {\n      cell.edges.lb = {\n        path: [ [0, leftbottom], [topright, 1] ],\n        move: {\n          x:      0,\n          y:      1,\n          enter:  'br'\n        }\n      };\n    }\n\n    if (opt.polygons)\n      cell.polygons.push([ [0, 0], [0, leftbottom], [topright, 1], [1, 1], [1, 0] ]);\n  },\n\n  pentagon_br:  function(cell, x0, x1, x2, x3, opt) {\n    var bottomleft  = opt.interpolate(x0, x1, opt.minV, opt.maxV);\n    var righttop    = opt.interpolate(x1, x2, opt.minV, opt.maxV);\n\n    if (opt.polygons_full) {\n      cell.edges.rt = {\n        path: [ [1, righttop], [bottomleft, 0] ],\n        move: {\n          x:      0,\n          y:      -1,\n          enter:  'tl'\n        }\n      };\n    }\n    if (opt.polygons)\n      cell.polygons.push([ [0, 0], [0, 1], [1, 1], [1, righttop], [bottomleft, 0] ]);\n  },\n\n  pentagon_bl:  function(cell, x0, x1, x2, x3, opt) {\n    var lefttop     = opt.interpolate(x0, x3, opt.minV, opt.maxV);\n    var bottomright = opt.interpolate(x0, x1, opt.minV, opt.maxV);\n\n    if (opt.polygons_full) {\n      cell.edges.br = {\n        path: [ [bottomright, 0], [0, lefttop] ],\n        move: {\n          x:      -1,\n          y:      0,\n          enter:  'rt'\n        }\n      };\n    }\n\n    if (opt.polygons)\n      cell.polygons.push([ [0, lefttop], [0, 1], [1, 1], [1, 0], [bottomright, 0] ]);\n  },\n\n  pentagon_tr_rl: function(cell, x0, x1, x2, x3, opt) {\n    var lefttop     = opt.interpolate(x0, x3, opt.minV, opt.maxV);\n    var topleft     = opt.interpolate(x3, x2, opt.minV, opt.maxV);\n    var righttop    = opt.interpolate_b(x1, x2, opt.minV, opt.maxV);\n    var rightbottom = opt.interpolate_a(x1, x2, opt.minV, opt.maxV);\n\n    if (opt.polygons_full) {\n      cell.edges.tl = {\n        path: [ [topleft, 1], [1, righttop] ],\n        move: {\n          x:      1,\n          y:      0,\n          enter:  'lt'\n        }\n      };\n      cell.edges.rb = {\n        path: [ [1, rightbottom], [0, lefttop] ],\n        move: {\n          x:      -1,\n          y:      0,\n          enter:  'rt'\n        }\n      };\n    }\n\n    if (opt.polygons)\n      cell.polygons.push([ [0, lefttop], [0, 1], [topleft, 1], [1, righttop], [1, rightbottom] ]);\n  },\n\n  pentagon_rb_bt: function(cell, x0, x1, x2, x3, opt) {\n    var righttop    = opt.interpolate(x1, x2, opt.minV, opt.maxV);\n    var bottomright = opt.interpolate_b(x0, x1, opt.minV, opt.maxV);\n    var bottomleft  = opt.interpolate_a(x0, x1, opt.minV, opt.maxV);\n    var topright    = opt.interpolate(x3, x2, opt.minV, opt.maxV);\n\n    if (opt.polygons_full) {\n      cell.edges.rt = {\n        path: [ [1, righttop], [bottomright, 0] ],\n        move: {\n          x:      0,\n          y:      -1,\n          enter:  'tr'\n        }\n      };\n      cell.edges.bl = {\n        path: [ [bottomleft, 0], [topright, 1] ],\n        move: {\n          x:      0,\n          y:      1,\n          enter:  'br'\n        }\n      };\n    }\n\n    if (opt.polygons)\n      cell.polygons.push([ [topright, 1], [1, 1], [1, righttop], [bottomright, 0], [bottomleft, 0] ]);\n  },\n\n  pentagon_bl_lr: function(cell, x0, x1, x2, x3, opt) {\n    var bottomright = opt.interpolate(x0, x1, opt.minV, opt.maxV);\n    var leftbottom  = opt.interpolate_a(x0, x3, opt.minV, opt.maxV);\n    var lefttop     = opt.interpolate_b(x0, x3, opt.minV, opt.maxV);\n    var rightbottom = opt.interpolate(x1, x2, opt.minV, opt.maxV);\n\n    if (opt.polygons_full) {\n      cell.edges.br = {\n        path: [ [bottomright, 0], [0, leftbottom] ],\n        move: {\n          x:      -1,\n          y:      0,\n          enter:  'rb'\n        }\n      };\n      cell.edges.lt = {\n        path: [ [0, lefttop], [1, rightbottom] ],\n        move: {\n          x:      1,\n          y:      0,\n          enter:  'lb'\n        }\n      };\n    }\n\n    if (opt.polygons)\n      cell.polygons.push([ [bottomright, 0], [0, leftbottom], [0, lefttop], [1, rightbottom], [1, 0] ]);\n  },\n\n  pentagon_lt_tb: function(cell, x0, x1, x2, x3, opt) {\n    var leftbottom  = opt.interpolate(x0, x3, opt.minV, opt.maxV);\n    var topleft     = opt.interpolate_a(x3, x2, opt.minV, opt.maxV);\n    var topright    = opt.interpolate_b(x3, x2, opt.minV, opt.maxV);\n    var bottomleft  = opt.interpolate(x0, x1, opt.minV, opt.maxV);\n\n    if (opt.polygons_full) {\n      cell.edges.lb = {\n        path: [ [0, leftbottom], [topleft, 1] ],\n        move: {\n          x:      0,\n          y:      1,\n          enter:  'bl'\n        }\n      };\n      cell.edges.tr = {\n        path: [ [topright, 1], [bottomleft, 0] ],\n        move: {\n          x:      0,\n          y:      -1,\n          enter:  'tl'\n        }\n      };\n    }\n\n    if (opt.polygons)\n      cell.polygons.push([ [0, 0], [0, leftbottom], [topleft, 1], [topright, 1], [bottomleft, 0] ]);\n  },\n\n  pentagon_bl_tb: function(cell, x0, x1, x2, x3, opt) {\n    var lefttop     = opt.interpolate(x0, x3, opt.minV, opt.maxV);\n    var topleft     = opt.interpolate(x3, x2, opt.minV, opt.maxV);\n    var bottomright = opt.interpolate_b(x0, x1, opt.minV, opt.maxV);\n    var bottomleft  = opt.interpolate_a(x0, x1, opt.minV, opt.maxV);\n\n    if (opt.polygons_full) {\n      cell.edges.bl = {\n        path: [ [bottomleft, 0], [0, lefttop] ],\n        move: {\n          x:      -1,\n          y:      0,\n          enter:  'rt'\n        }\n      };\n      cell.edges.tl = {\n        path: [ [ topleft, 1], [bottomright, 0] ],\n        move: {\n          x:      0,\n          y:      -1,\n          enter:  'tr'\n        }\n      };\n    }\n\n    if (opt.polygons)\n      cell.polygons.push([ [0, lefttop], [0, 1], [topleft, 1], [bottomright, 0], [bottomleft, 0] ]);\n  },\n\n  pentagon_lt_rl: function(cell, x0, x1, x2, x3, opt) {\n    var leftbottom  = opt.interpolate_a(x0, x3, opt.minV, opt.maxV);\n    var lefttop     = opt.interpolate_b(x0, x3, opt.minV, opt.maxV);\n    var topright    = opt.interpolate(x3, x2, opt.minV, opt.maxV);\n    var righttop    = opt.interpolate(x1, x3, opt.minV, opt.maxV);\n\n    if (opt.polygons_full) {\n      cell.edges.lt = {\n        path: [ [0, lefttop], [topright, 1] ],\n        move: {\n          x:      0,\n          y:      1,\n          enter:  'br'\n        }\n      };\n      cell.edges.rt = {\n        path: [ [1, righttop], [0, leftbottom] ],\n        move: {\n          x:      -1,\n          y:      0,\n          enter:  'rb'\n        }\n      };\n    }\n\n    if (opt.polygons)\n      cell.polygons.push([ [0, leftbottom], [0, lefttop], [topright, 1], [1, 1], [1, righttop] ]);\n  },\n\n  pentagon_tr_bt: function(cell, x0, x1, x2, x3, opt) {\n    var topleft     = opt.interpolate_a(x3, x2, opt.minV, opt.maxV);\n    var topright    = opt.interpolate_b(x3, x2, opt.minV, opt.maxV);\n    var rightbottom = opt.interpolate(x1, x2, opt.minV, opt.maxV);\n    var bottomright = opt.interpolate(x0, x1, opt.minV, opt.maxV);\n\n    if (opt.polygons_full) {\n      cell.edges.br = {\n        path: [ [bottomright, 0], [topleft, 1] ],\n        move: {\n          x:      0,\n          y:      1,\n          enter:  'bl'\n        }\n      };\n      cell.edges.tr = {\n        path: [ [topright, 1], [1, rightbottom] ],\n        move: {\n          x:      1,\n          y:      0,\n          enter:  'lb'\n        }\n      };\n    }\n\n    if (opt.polygons)\n      cell.polygons.push([ [topleft, 1], [topright, 1], [1, rightbottom], [1, 0], [bottomright, 0] ]);\n  },\n\n  pentagon_rb_lr: function(cell, x0, x1, x2, x3, opt) {\n    var leftbottom  = opt.interpolate(x0, x3, opt.minV, opt.maxV);\n    var righttop    = opt.interpolate_b(x1, x2, opt.minV, opt.maxV);\n    var rightbottom = opt.interpolate_a(x1, x2, opt.minV, opt.maxV);\n    var bottomleft  = opt.interpolate(x0, x1, opt.minV, opt.maxV);\n\n    if (opt.polygons_full) {\n      cell.edges.lb = {\n        path: [ [0, leftbottom], [1, righttop] ],\n        move: {\n          x:      1,\n          y:      0,\n          enter:  'lt'\n        }\n      };\n      cell.edges.rb = {\n        path: [ [1, rightbottom], [bottomleft, 0] ],\n        move: {\n          x:      0,\n          y:      -1,\n          enter:  'tl'\n        }\n      };\n    }\n    if (opt.polygons)\n      cell.polygons.push([ [0, 0], [0, leftbottom], [1, righttop], [1, rightbottom], [bottomleft, 0] ]);\n  },\n\n  hexagon_lt_tr:  function(cell, x0, x1, x2, x3, opt) {\n    var leftbottom  = opt.interpolate(x0, x3, opt.minV, opt.maxV);\n    var topleft     = opt.interpolate_a(x3, x2, opt.minV, opt.maxV);\n    var topright    = opt.interpolate_b(x3, x2, opt.minV, opt.maxV);\n    var rightbottom = opt.interpolate(x1, x2, opt.minV, opt.maxV);\n\n    if (opt.polygons_full) {\n      cell.edges.lb = {\n        path: [ [0, leftbottom], [topleft, 1] ],\n        move: {\n          x:      0,\n          y:      1,\n          enter:  'bl'\n        }\n      };\n      cell.edges.tr = {\n        path: [ [topright, 1], [1, rightbottom] ],\n        move: {\n          x:      1,\n          y:      0,\n          enter:  'lb'\n        }\n      };\n    }\n\n    if (opt.polygons)\n      cell.polygons.push([ [0, 0], [0, leftbottom], [topleft, 1], [topright, 1], [1, rightbottom], [1, 0] ]);\n  },\n\n  hexagon_bl_lt:  function(cell, x0, x1, x2, x3, opt) {\n    var bottomright = opt.interpolate(x0, x1, opt.minV, opt.maxV);\n    var leftbottom  = opt.interpolate_a(x0, x3, opt.minV, opt.maxV);\n    var lefttop     = opt.interpolate_b(x0, x3, opt.minV, opt.maxV);\n    var topright    = opt.interpolate(x3, x2, opt.minV, opt.maxV);\n\n    if (opt.polygons_full) {\n      cell.edges.br = {\n        path: [ [bottomright, 0], [0, leftbottom] ],\n        move: {\n          x:      -1,\n          y:      0,\n          enter:  'rb'\n        }\n      };\n      cell.edges.lt = {\n        path: [ [0, lefttop], [topright, 1] ],\n        move: {\n          x:      0,\n          y:      1,\n          enter:  'br'\n        }\n      };\n    }\n\n    if (opt.polygons)\n      cell.polygons.push([ [bottomright, 0], [0, leftbottom], [0, lefttop], [topright, 1], [1, 1], [1, 0] ]);\n  },\n\n  hexagon_bl_rb:  function(cell, x0, x1, x2, x3, opt) {\n    var bottomleft  = opt.interpolate_a(x0, x1, opt.minV, opt.maxV);\n    var bottomright = opt.interpolate_b(x0, x1, opt.minV, opt.maxV);\n    var lefttop     = opt.interpolate(x0, x3, opt.minV, opt.maxV);\n    var righttop    = opt.interpolate(x1, x2, opt.minV, opt.maxV);\n\n    if (opt.polygons_full) {\n      cell.edges.bl = {\n        path: [ [bottomleft, 0], [0, lefttop] ],\n        move: {\n          x:      -1,\n          y:      0,\n          enter:  'rt'\n        }\n      };\n      cell.edges.rt = {\n        path: [ [1, righttop], [bottomright, 0] ],\n        move: {\n          x:      0,\n          y:      -1,\n          enter:  'tr'\n        }\n      };\n    }\n\n    if (opt.polygons)\n      cell.polygons.push([ [bottomleft, 0], [0, lefttop], [0, 1], [1, 1], [1, righttop], [bottomright, 0] ]);\n  },\n\n  hexagon_tr_rb:  function(cell, x0, x1, x2, x3, opt) {\n    var bottomleft  = opt.interpolate(x0, x1, opt.minV, opt.maxV);\n    var topleft     = opt.interpolate(x3, x2, opt.minV, opt.maxV);\n    var righttop    = opt.interpolate_b(x1, x2, opt.minV, opt.maxV);\n    var rightbottom = opt.interpolate_a(x1, x2, opt.minV, opt.maxV);\n\n    if (opt.polygons_full) {\n      cell.edges.tl = {\n        path: [ [topleft, 1], [1, righttop] ],\n        move: {\n          x:      1,\n          y:      0,\n          enter:  'lt'\n        }\n      };\n      cell.edges.rb = {\n        path: [ [1, rightbottom], [bottomleft, 0] ],\n        move: {\n          x:      0,\n          y:      -1,\n          enter:  'tl'\n        }\n      };\n    }\n\n    if (opt.polygons)\n      cell.polygons.push([ [0, 0], [0, 1], [topleft, 1], [1, righttop], [1, rightbottom], [bottomleft, 0] ]);\n  },\n\n  hexagon_lt_rb:  function(cell, x0, x1, x2, x3, opt) {\n    var leftbottom  = opt.interpolate(x0, x3, opt.minV, opt.maxV);\n    var topright    = opt.interpolate(x3, x2, opt.minV, opt.maxV);\n    var righttop    = opt.interpolate(x1, x2, opt.minV, opt.maxV);\n    var bottomleft  = opt.interpolate(x0, x1, opt.minV, opt.maxV);\n\n    if (opt.polygons_full) {\n      cell.edges.lb = {\n        path: [ [0, leftbottom], [topright, 1] ],\n        move: {\n          x:      0,\n          y:      1,\n          enter:  'br'\n        }\n      };\n      cell.edges.rt = {\n        path: [ [1, righttop], [bottomleft, 0] ],\n        move: {\n          x:      0,\n          y:      -1,\n          enter:  'tl'\n        }\n      };\n    }\n\n    if (opt.polygons)\n      cell.polygons.push([ [0, 0], [0, leftbottom], [topright, 1], [1, 1], [1, righttop], [bottomleft, 0] ]);\n  },\n\n  hexagon_bl_tr:  function(cell, x0, x1, x2, x3, opt) {\n    var bottomright = opt.interpolate(x0, x1, opt.minV, opt.maxV);\n    var lefttop     = opt.interpolate(x0, x3, opt.minV, opt.maxV);\n    var topleft     = opt.interpolate(x3, x2, opt.minV, opt.maxV);\n    var rightbottom = opt.interpolate(x1, x2, opt.minV, opt.maxV);\n\n    if (opt.polygons_full) {\n      cell.edges.br = {\n        path: [ [bottomright, 0], [0, lefttop] ],\n        move: {\n          x:      -1,\n          y:      0,\n          enter:  'rt'\n        }\n      };\n      cell.edges.tl = {\n        path: [ [topleft, 1], [1, rightbottom] ],\n        move: {\n          x:      1,\n          y:      0,\n          enter:  'lb'\n        }\n      };\n    }\n\n    if (opt.polygons)\n      cell.polygons.push([ [bottomright, 0], [0, lefttop], [0, 1], [topleft, 1], [1, rightbottom], [1, 0] ]);\n  },\n\n  heptagon_tr:    function(cell, x0, x1, x2, x3, opt) {\n    var bottomleft  = opt.interpolate_a(x0, x1, opt.minV, opt.maxV);\n    var bottomright = opt.interpolate_b(x0, x1, opt.minV, opt.maxV);\n    var leftbottom  = opt.interpolate_a(x0, x3, opt.minV, opt.maxV);\n    var lefttop     = opt.interpolate_b(x0, x3, opt.minV, opt.maxV);\n    var topright    = opt.interpolate(x3, x2, opt.minV, opt.maxV);\n    var righttop    = opt.interpolate(x1, x2, opt.minV, opt.maxV);\n\n    if (opt.polygons_full) {\n      cell.edges.bl = {\n        path: [ [bottomleft, 0], [0, leftbottom] ],\n        move: {\n          x:      -1,\n          y:      0,\n          enter:  'rb'\n        }\n      };\n      cell.edges.lt = {\n        path: [ [0, lefttop], [topright, 1] ],\n        move: {\n          x:      0,\n          y:      1,\n          enter:  'br'\n        }\n      };\n      cell.edges.rt = {\n        path: [ [1, righttop], [bottomright, 0] ],\n        move: {\n          x:      0,\n          y:      -1,\n          enter:  'tr'\n        }\n      };\n    }\n\n    if (opt.polygons)\n      cell.polygons.push([ [bottomleft, 0], [0, leftbottom], [0, lefttop], [topright, 1], [1, 1], [1, righttop], [bottomright, 0] ]);\n  },\n\n  heptagon_bl:    function(cell, x0, x1, x2, x3, opt) {\n    var bottomleft  = opt.interpolate(x0, x1, opt.minV, opt.maxV);\n    var leftbottom  = opt.interpolate(x0, x3, opt.minV, opt.maxV);\n    var topleft     = opt.interpolate_a(x3, x2, opt.minV, opt.maxV);\n    var topright    = opt.interpolate_b(x3, x2, opt.minV, opt.maxV);\n    var righttop    = opt.interpolate_b(x1, x2, opt.minV, opt.maxV);\n    var rightbottom = opt.interpolate_a(x1, x2, opt.minV, opt.maxV);\n\n    if (opt.polygons_full) {\n      cell.edges.lb = {\n        path: [ [0, leftbottom], [topleft, 1] ],\n        move: {\n          x:      0,\n          y:      1,\n          enter:  'bl'\n        }\n      };\n      cell.edges.tr = {\n        path: [ [topright, 1], [1, righttop] ],\n        move: {\n          x:      1,\n          y:      0,\n          enter:  'lt'\n        }\n      };\n      cell.edges.rb = {\n        path: [ [1, rightbottom], [bottomleft, 0] ],\n        move: {\n          x:      0,\n          y:      -1,\n          enter:  'tl'\n        }\n      };\n    }\n\n    if (opt.polygons)\n      cell.polygons.push([ [0, 0], [0, leftbottom], [topleft, 1], [topright, 1], [1, righttop], [1, rightbottom], [bottomleft, 0] ]);\n  },\n\n  heptagon_tl:    function(cell, x0, x1, x2, x3, opt) {\n    var bottomleft  = opt.interpolate_a(x0, x1, opt.minV, opt.maxV);\n    var bottomright = opt.interpolate_b(x0, x1, opt.minV, opt.maxV);\n    var lefttop     = opt.interpolate(x0, x3, opt.minV, opt.maxV);\n    var topleft     = opt.interpolate(x3, x2, opt.minV, opt.maxV);\n    var righttop    = opt.interpolate_b(x1, x2, opt.minV, opt.maxV);\n    var rightbottom = opt.interpolate_a(x1, x2, opt.minV, opt.maxV);\n\n    if (opt.polygons_full) {\n      cell.edges.bl = {\n        path: [ [bottomleft, 0], [0, lefttop] ],\n        move: {\n          x:      -1,\n          y:      0,\n          enter:  'rt'\n        }\n      };\n      cell.edges.tl = {\n        path: [ [topleft, 1], [1, righttop] ],\n        move: {\n          x:      1,\n          y:      0,\n          enter:  'lt'\n        }\n      };\n      cell.edges.rb = {\n        path: [ [1, rightbottom], [bottomright, 0] ],\n        move: {\n          x:      0,\n          y:      -1,\n          enter:  'tr'\n        }\n      };\n    }\n\n    if (opt.polygons)\n      cell.polygons.push([ [bottomleft, 0], [0, lefttop], [0, 1], [topleft, 1], [1, righttop], [1, rightbottom], [bottomright, 0] ]);\n  },\n\n  heptagon_br:    function(cell, x0, x1, x2, x3, opt) {\n    var bottomright = opt.interpolate(x0, x1, opt.minV, opt.maxV);\n    var leftbottom  = opt.interpolate_a(x0, x3, opt.minV, opt.maxV);\n    var lefttop     = opt.interpolate_b(x0, x3, opt.minV, opt.maxV);\n    var topleft     = opt.interpolate_a(x3, x2, opt.minV, opt.maxV);\n    var topright    = opt.interpolate_b(x3, x2, opt.minV, opt.maxV);\n    var rightbottom = opt.interpolate(x1, x2, opt.minV, opt.maxV);\n\n    if (opt.polygons_full) {\n      cell.edges.br = {\n        path: [ [bottomright, 0], [0, leftbottom] ],\n        move: {\n          x:      -1,\n          y:      0,\n          enter:  'rb'\n        }\n      };\n      cell.edges.lt = {\n        path: [ [0, lefttop], [topleft, 1] ],\n        move: {\n          x:      0,\n          y:      1,\n          enter:  'bl'\n        }\n      };\n      cell.edges.tr = {\n        path: [ [topright, 1], [1, rightbottom] ],\n        move: {\n          x:      1,\n          y:      0,\n          enter:  'lb'\n        }\n      };\n    }\n\n    if (opt.polygons)\n      cell.polygons.push([ [bottomright,0], [0, leftbottom], [0, lefttop], [topleft, 1], [topright, 1], [1, rightbottom], [1, 0] ]);\n  },\n\n  octagon:        function(cell, x0, x1, x2, x3, opt) {\n    var bottomleft  = opt.interpolate_a(x0, x1, opt.minV, opt.maxV);\n    var bottomright = opt.interpolate_b(x0, x1, opt.minV, opt.maxV);\n    var leftbottom  = opt.interpolate_a(x0, x3, opt.minV, opt.maxV);\n    var lefttop     = opt.interpolate_b(x0, x3, opt.minV, opt.maxV);\n    var topleft     = opt.interpolate_a(x3, x2, opt.minV, opt.maxV);\n    var topright    = opt.interpolate_b(x3, x2, opt.minV, opt.maxV);\n    var righttop    = opt.interpolate_b(x1, x2, opt.minV, opt.maxV);\n    var rightbottom = opt.interpolate_a(x1, x2, opt.minV, opt.maxV);\n\n    if (opt.polygons_full) {\n      cell.edges.bl = {\n        path: [ [bottomleft, 0], [0, leftbottom] ],\n        move: {\n          x:      -1,\n          y:      0,\n          enter:  'rb'\n        }\n      };\n      cell.edges.lt = {\n        path: [ [0, lefttop], [topleft, 1] ],\n        move: {\n          x:      0,\n          y:      1,\n          enter:  'bl'\n        }\n      };\n      cell.edges.tr = {\n        path: [ [topright, 1], [1, righttop] ],\n        move: {\n          x:      1,\n          y:      0,\n          enter:  'lt'\n        }\n      };\n      cell.edges.rb = {\n        path: [ [1, rightbottom], [bottomright, 0] ],\n        move: {\n          x:      0,\n          y:      -1,\n          enter:  'tr'\n        }\n      };\n    }\n\n    if (opt.polygons)\n      cell.polygons.push([ [bottomleft, 0], [0, leftbottom], [0, lefttop], [topleft, 1], [topright, 1], [1, righttop], [1, rightbottom], [bottomright, 0] ]);\n  }\n};\n\n\n/*\n * Compute isobands(s) for a scalar 2D field given a certain\n * threshold and a bandwidth by applying the Marching Squares\n * Algorithm. The function returns a list of path coordinates\n * either for individual polygons within each grid cell, or the\n * outline of connected polygons.\n */\nfunction isoBands(input, minV, bandWidth, options) {\n  var i,\n    j,\n    settings,\n    useQuadTree   = false,\n    tree          = null,\n    root          = null,\n    data          = null,\n    cellGrid      = null,\n    multiBand     = false,\n    bw            = [],\n    bandPolygons  = [],\n    ret           = [];\n\n  /* basic input validation */\n  if (!input) throw new Error('data is required');\n  if (minV === undefined || minV === null) throw new Error('lowerBound is required');\n  if (bandWidth === undefined || bandWidth === null) throw new Error('bandWidth is required');\n  if ((!!options) && (typeof options !== 'object')) throw new Error('options must be an object');\n\n  settings = isoBandOptions(options);\n\n  /* check for input data */\n  if (input instanceof QuadTree) {\n    tree = input;\n    root = input.root;\n    data = input.data;\n    if (!settings.noQuadTree)\n      useQuadTree = true;\n  } else if (Array.isArray(input) && Array.isArray(input[0])) {\n    data = input;\n  } else {\n    throw new Error('input is neither array of arrays nor object retrieved from \\'QuadTree()\\'');\n  }\n\n  /* check and prepare input thresholds */\n  if (Array.isArray(minV)) {\n    multiBand = true;\n\n    /* activate QuadTree optimization if not explicitly forbidden by user settings */\n    if (!settings.noQuadTree)\n      useQuadTree = true;\n\n    /* check if all minV are numbers */\n    for (i = 0; i < minV.length; i++)\n      if (isNaN(+minV[i]))\n        throw new Error('lowerBound[' + i + '] is not a number');\n\n    if (Array.isArray(bandWidth)) {\n      if (minV.length !== bandWidth.length)\n        throw new Error('lowerBound and bandWidth have unequal lengths');\n\n      /* check bandwidth values */\n      for (i = 0; i < bandWidth.length; i++)\n        if (isNaN(+bandWidth[i]))\n          throw new Error('bandWidth[' + i + '] is not a number');\n    } else {\n      if (isNaN(+bandWidth))\n        throw new Error('bandWidth must be a number');\n\n      bw = [];\n      for (i = 0; i < minV.length; i++) {\n        bw.push(bandWidth);\n      }\n      bandWidth = bw;\n    }\n  } else {\n    if (isNaN(+minV))\n      throw new Error('lowerBound must be a number');\n\n    minV = [ minV ];\n\n    if (isNaN(+bandWidth))\n      throw new Error('bandWidth must be a number');\n\n    bandWidth = [ bandWidth ];\n  }\n\n  /* create QuadTree root node if not already present */\n  if ((useQuadTree) && (!root)) {\n    tree = new QuadTree(data);\n    root = tree.root;\n    data = tree.data;\n  }\n\n  if (settings.verbose) {\n    if(settings.polygons)\n      console.log('MarchingSquaresJS-isoBands: returning single polygons for each grid cell');\n    else\n      console.log('MarchingSquaresJS-isoBands: returning polygon paths for entire data grid');\n\n    if (multiBand)\n      console.log('MarchingSquaresJS-isoBands: multiple bands requested, returning array of band polygons instead of polygons for a single band');\n  }\n\n  /* Done with all input validation, now let's start computing stuff */\n\n  /* loop over all minV values */\n  minV.forEach(function(lowerBound, b) {\n    bandPolygons = [];\n\n    /* store bounds for current computation in settings object */\n    settings.minV = lowerBound;\n    settings.maxV = lowerBound + bandWidth[b];\n\n    if(settings.verbose)\n      console.log('MarchingSquaresJS-isoBands: computing isobands for [' + lowerBound + ':' + (lowerBound + bandWidth[b]) + ']');\n\n    if (settings.polygons) {\n      /* compose list of polygons for each single cell */\n      if (useQuadTree) {\n        /* go through list of cells retrieved from QuadTree */\n        root\n          .cellsInBand(settings.minV, settings.maxV, true)\n          .forEach(function(c) {\n            bandPolygons  = bandPolygons.concat(\n              cell2Polygons(\n                prepareCell$1(data,\n                  c.x,\n                  c.y,\n                  settings),\n                c.x,\n                c.y,\n                settings\n              ));\n          });\n      } else {\n        /* go through entire array of input data */\n        for (j = 0; j < data.length - 1; ++j) {\n          for (i = 0; i < data[0].length - 1; ++i)\n            bandPolygons  = bandPolygons.concat(\n              cell2Polygons(\n                prepareCell$1(data,\n                  i,\n                  j,\n                  settings),\n                i,\n                j,\n                settings\n              ));\n        }\n      }\n    } else {\n      /* sparse grid of input data cells */\n      cellGrid = [];\n      for (i = 0; i < data[0].length - 1; ++i)\n        cellGrid[i] = [];\n\n      /* compose list of polygons for entire input grid */\n      if (useQuadTree) {\n        /* collect the cells */\n        root\n          .cellsInBand(settings.minV, settings.maxV, false)\n          .forEach(function(c) {\n            cellGrid[c.x][c.y] = prepareCell$1(data,\n              c.x,\n              c.y,\n              settings);\n          });\n      } else {\n        /* prepare cells */\n        for (i = 0; i < data[0].length - 1; ++i) {\n          for (j = 0; j < data.length - 1; ++j) {\n            cellGrid[i][j]  = prepareCell$1(data,\n              i,\n              j,\n              settings);\n          }\n        }\n      }\n\n      bandPolygons = traceBandPaths(data, cellGrid, settings);\n    }\n\n    /* finally, add polygons to output array */\n    if (multiBand)\n      ret.push(bandPolygons);\n    else\n      ret = bandPolygons;\n\n    if(typeof settings.successCallback === 'function')\n      settings.successCallback(ret, lowerBound, bandWidth[b]);\n  });\n\n  return ret;\n}\n\n/*\n * Thats all for the public interface, below follows the actual\n * implementation\n */\n\n/*\n *  For isoBands, each square is defined by the three states\n * of its corner points. However, since computers use power-2\n * values, we use 2bits per trit, i.e.:\n *\n * 00 ... below minV\n * 01 ... between minV and maxV\n * 10 ... above maxV\n *\n * Hence we map the 4-trit configurations as follows:\n *\n * 0000 => 0\n * 0001 => 1\n * 0002 => 2\n * 0010 => 4\n * 0011 => 5\n * 0012 => 6\n * 0020 => 8\n * 0021 => 9\n * 0022 => 10\n * 0100 => 16\n * 0101 => 17\n * 0102 => 18\n * 0110 => 20\n * 0111 => 21\n * 0112 => 22\n * 0120 => 24\n * 0121 => 25\n * 0122 => 26\n * 0200 => 32\n * 0201 => 33\n * 0202 => 34\n * 0210 => 36\n * 0211 => 37\n * 0212 => 38\n * 0220 => 40\n * 0221 => 41\n * 0222 => 42\n * 1000 => 64\n * 1001 => 65\n * 1002 => 66\n * 1010 => 68\n * 1011 => 69\n * 1012 => 70\n * 1020 => 72\n * 1021 => 73\n * 1022 => 74\n * 1100 => 80\n * 1101 => 81\n * 1102 => 82\n * 1110 => 84\n * 1111 => 85\n * 1112 => 86\n * 1120 => 88\n * 1121 => 89\n * 1122 => 90\n * 1200 => 96\n * 1201 => 97\n * 1202 => 98\n * 1210 => 100\n * 1211 => 101\n * 1212 => 102\n * 1220 => 104\n * 1221 => 105\n * 1222 => 106\n * 2000 => 128\n * 2001 => 129\n * 2002 => 130\n * 2010 => 132\n * 2011 => 133\n * 2012 => 134\n * 2020 => 136\n * 2021 => 137\n * 2022 => 138\n * 2100 => 144\n * 2101 => 145\n * 2102 => 146\n * 2110 => 148\n * 2111 => 149\n * 2112 => 150\n * 2120 => 152\n * 2121 => 153\n * 2122 => 154\n * 2200 => 160\n * 2201 => 161\n * 2202 => 162\n * 2210 => 164\n * 2211 => 165\n * 2212 => 166\n * 2220 => 168\n * 2221 => 169\n * 2222 => 170\n */\n\n/*\n * ####################################\n * Some small helper functions\n * ####################################\n */\n\nfunction computeCenterAverage(bl, br, tr, tl, minV, maxV) {\n  var average = (tl + tr + br + bl) / 4;\n\n  if (average > maxV)\n    return 2; /* above isoband limits */\n\n  if (average < minV)\n    return 0; /* below isoband limits */\n\n  return 1; /* within isoband limits */\n}\n\n\nfunction prepareCell$1(grid, x, y, opt) {\n  var cell,\n    center_avg;\n\n  /*  compose the 4-trit corner representation */\n  var cval = 0;\n  var x3 = grid[y + 1][x];\n  var x2 = grid[y + 1][x + 1];\n  var x1 = grid[y][x + 1];\n  var x0 = grid[y][x];\n  var minV  = opt.minV;\n  var maxV  = opt.maxV;\n\n  /*\n   * Note that missing data within the grid will result\n   * in horribly failing to trace full polygon paths\n   */\n  if(isNaN(x0) || isNaN(x1) || isNaN(x2) || isNaN(x3)) {\n    return;\n  }\n\n  /*\n   * Here we detect the type of the cell\n   *\n   * x3 ---- x2\n   * |      |\n   * |      |\n   * x0 ---- x1\n   *\n   * with edge points\n   *\n   * x0 = (x,y),\n   * x1 = (x + 1, y),\n   * x2 = (x + 1, y + 1), and\n   * x3 = (x, y + 1)\n   *\n   * and compute the polygon intersections with the edges\n   * of the cell. Each edge value may be (i) below, (ii) within,\n   * or (iii) above the values of the isoband limits. We\n   * encode this property using 2 bits of information, where\n   *\n   * 00 ... below,\n   * 01 ... within, and\n   * 10 ... above\n   *\n   * Then we store the cells value as vector\n   *\n   * cval = (x0, x1, x2, x3)\n   *\n   * where x0 are the two least significant bits (0th, 1st),\n   * x1 the 2nd and 3rd bit, and so on. This essentially\n   * enables us to work with a single integer number\n   */\n\n  cval |= (x3 < minV) ? 0 : (x3 > maxV) ? 128 : 64;\n  cval |= (x2 < minV) ? 0 : (x2 > maxV) ? 32 : 16;\n  cval |= (x1 < minV) ? 0 : (x1 > maxV) ? 8 : 4;\n  cval |= (x0 < minV) ? 0 : (x0 > maxV) ? 2 : 1;\n\n  /* make sure cval is a number */\n  cval = +cval;\n\n  /*\n   * cell center average trit for ambiguous cases, where\n   * 0 ... below iso band\n   * 1 ... within iso band\n   * 2 ... above isoband\n   */\n  center_avg = 0;\n\n  cell = {\n    cval:         cval,\n    polygons:     [],\n    edges:        {},\n    x0:           x0,\n    x1:           x1,\n    x2:           x2,\n    x3:           x3,\n    x:            x,\n    y:            y\n  };\n\n  /*\n   * Compute interpolated intersections of the polygon(s)\n   * with the cell borders and (i) add edges for polygon\n   * trace-back, or (ii) a list of small closed polygons\n   * according to look-up table\n   */\n  switch (cval) {\n  case 85:  /* 1111 */\n    shapeCoordinates.square(cell, x0, x1, x2, x3, opt);\n    /* fall through */\n  case 0:   /* 0000 */\n    /* fall through */\n  case 170: /* 2222 */\n    break;\n\n    /* single triangle cases */\n\n  case 169: /* 2221 */\n    shapeCoordinates.triangle_bl(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 166: /* 2212 */\n    shapeCoordinates.triangle_br(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 154: /* 2122 */\n    shapeCoordinates.triangle_tr(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 106: /* 1222 */\n    shapeCoordinates.triangle_tl(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 1: /* 0001 */\n    shapeCoordinates.triangle_bl(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 4: /* 0010 */\n    shapeCoordinates.triangle_br(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 16: /* 0100 */\n    shapeCoordinates.triangle_tr(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 64: /* 1000 */\n    shapeCoordinates.triangle_tl(cell, x0, x1, x2, x3, opt);\n    break;\n\n\n    /* single trapezoid cases */\n\n  case 168: /* 2220 */\n    shapeCoordinates.tetragon_bl(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 162: /* 2202 */\n    shapeCoordinates.tetragon_br(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 138: /* 2022 */\n    shapeCoordinates.tetragon_tr(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 42: /* 0222 */\n    shapeCoordinates.tetragon_tl(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 2: /* 0002 */\n    shapeCoordinates.tetragon_bl(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 8: /* 0020 */\n    shapeCoordinates.tetragon_br(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 32: /* 0200 */\n    shapeCoordinates.tetragon_tr(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 128: /* 2000 */\n    shapeCoordinates.tetragon_tl(cell, x0, x1, x2, x3, opt);\n    break;\n\n\n    /* single rectangle cases */\n\n  case 5: /* 0011 */\n    shapeCoordinates.tetragon_b(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 20: /* 0110 */\n    shapeCoordinates.tetragon_r(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 80: /* 1100 */\n    shapeCoordinates.tetragon_t(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 65: /* 1001 */\n    shapeCoordinates.tetragon_l(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 165: /* 2211 */\n    shapeCoordinates.tetragon_b(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 150: /* 2112 */\n    shapeCoordinates.tetragon_r(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 90: /* 1122 */\n    shapeCoordinates.tetragon_t(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 105: /* 1221 */\n    shapeCoordinates.tetragon_l(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 160: /* 2200 */\n    shapeCoordinates.tetragon_lr(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 130: /* 2002 */\n    shapeCoordinates.tetragon_tb(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 10: /* 0022 */\n    shapeCoordinates.tetragon_lr(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 40: /* 0220 */\n    shapeCoordinates.tetragon_tb(cell, x0, x1, x2, x3, opt);\n    break;\n\n\n    /* single pentagon cases */\n\n  case 101: /* 1211 */\n    shapeCoordinates.pentagon_tr(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 149: /* 2111 */\n    shapeCoordinates.pentagon_tl(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 86: /* 1112 */\n    shapeCoordinates.pentagon_bl(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 89: /* 1121 */\n    shapeCoordinates.pentagon_br(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 69: /* 1011 */\n    shapeCoordinates.pentagon_tr(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 21: /* 0111 */\n    shapeCoordinates.pentagon_tl(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 84: /* 1110 */\n    shapeCoordinates.pentagon_bl(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 81: /* 1101 */\n    shapeCoordinates.pentagon_br(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 96: /* 1200 */\n    shapeCoordinates.pentagon_tr_rl(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 24: /* 0120 */\n    shapeCoordinates.pentagon_rb_bt(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 6: /* 0012 */\n    shapeCoordinates.pentagon_bl_lr(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 129: /* 2001 */\n    shapeCoordinates.pentagon_lt_tb(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 74: /* 1022 */\n    shapeCoordinates.pentagon_tr_rl(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 146: /* 2102 */\n    shapeCoordinates.pentagon_rb_bt(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 164: /* 2210 */\n    shapeCoordinates.pentagon_bl_lr(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 41: /* 0221 */\n    shapeCoordinates.pentagon_lt_tb(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 66: /* 1002 */\n    shapeCoordinates.pentagon_bl_tb(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 144: /* 2100 */\n    shapeCoordinates.pentagon_lt_rl(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 36: /* 0210 */\n    shapeCoordinates.pentagon_tr_bt(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 9: /* 0021 */\n    shapeCoordinates.pentagon_rb_lr(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 104: /* 1220 */\n    shapeCoordinates.pentagon_bl_tb(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 26: /* 0122 */\n    shapeCoordinates.pentagon_lt_rl(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 134: /* 2012 */\n    shapeCoordinates.pentagon_tr_bt(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 161: /* 2201 */\n    shapeCoordinates.pentagon_rb_lr(cell, x0, x1, x2, x3, opt);\n    break;\n\n\n    /* single hexagon cases */\n\n  case 37: /* 0211 */\n    shapeCoordinates.hexagon_lt_tr(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 148: /* 2110 */\n    shapeCoordinates.hexagon_bl_lt(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 82: /* 1102 */\n    shapeCoordinates.hexagon_bl_rb(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 73: /* 1021 */\n    shapeCoordinates.hexagon_tr_rb(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 133: /* 2011 */\n    shapeCoordinates.hexagon_lt_tr(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 22: /* 0112 */\n    shapeCoordinates.hexagon_bl_lt(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 88: /* 1120 */\n    shapeCoordinates.hexagon_bl_rb(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 97: /* 1201 */\n    shapeCoordinates.hexagon_tr_rb(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 145: /* 2101 */\n    shapeCoordinates.hexagon_lt_rb(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 25: /* 0121 */\n    shapeCoordinates.hexagon_lt_rb(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 70: /* 1012 */\n    shapeCoordinates.hexagon_bl_tr(cell, x0, x1, x2, x3, opt);\n    break;\n\n  case 100: /* 1210 */\n    shapeCoordinates.hexagon_bl_tr(cell, x0, x1, x2, x3, opt);\n    break;\n\n\n    /* 6-sided saddles */\n\n  case 17: /* 0101 */\n    center_avg = computeCenterAverage(x0, x1, x2, x3, minV, maxV);\n    /* should never be center_avg === 2 */\n    if (center_avg === 0) {\n      shapeCoordinates.triangle_bl(cell, x0, x1, x2, x3, opt);\n      shapeCoordinates.triangle_tr(cell, x0, x1, x2, x3, opt);\n    } else {\n      shapeCoordinates.hexagon_lt_rb(cell, x0, x1, x2, x3, opt);\n    }\n    break;\n\n  case 68: /* 1010 */\n    center_avg = computeCenterAverage(x0, x1, x2, x3, minV, maxV);\n    /* should never be center_avg === 2 */\n    if (center_avg === 0) {\n      shapeCoordinates.triangle_tl(cell, x0, x1, x2, x3, opt);\n      shapeCoordinates.triangle_br(cell, x0, x1, x2, x3, opt);\n    } else {\n      shapeCoordinates.hexagon_bl_tr(cell, x0, x1, x2, x3, opt);\n    }\n    break;\n\n  case 153: /* 2121 */\n    center_avg = computeCenterAverage(x0, x1, x2, x3, minV, maxV);\n    /* should never be center_avg === 0 */\n    if (center_avg === 2) {\n      shapeCoordinates.triangle_bl(cell, x0, x1, x2, x3, opt);\n      shapeCoordinates.triangle_tr(cell, x0, x1, x2, x3, opt);\n    } else {\n      shapeCoordinates.hexagon_lt_rb(cell, x0, x1, x2, x3, opt);\n    }\n    break;\n\n  case 102: /* 1212 */\n    center_avg = computeCenterAverage(x0, x1, x2, x3, minV, maxV);\n    /* should never be center_avg === 0 */\n    if (center_avg === 2) {\n      shapeCoordinates.triangle_tl(cell, x0, x1, x2, x3, opt);\n      shapeCoordinates.triangle_br(cell, x0, x1, x2, x3, opt);\n    } else {\n      shapeCoordinates.hexagon_bl_tr(cell, x0, x1, x2, x3, opt);\n    }\n    break;\n\n\n    /* 7-sided saddles */\n\n  case 152: /* 2120 */\n\n    center_avg = computeCenterAverage(x0, x1, x2, x3, minV, maxV);\n    /* should never be center_avg === 0 */\n    if (center_avg === 2) {\n      shapeCoordinates.triangle_tr(cell, x0, x1, x2, x3, opt);\n      shapeCoordinates.tetragon_bl(cell, x0, x1, x2, x3, opt);\n    } else {\n      shapeCoordinates.heptagon_tr(cell, x0, x1, x2, x3, opt);\n    }\n    break;\n\n  case 137: /* 2021 */\n    center_avg = computeCenterAverage(x0, x1, x2, x3, minV, maxV);\n    /* should never be center_avg === 0 */\n    if (center_avg === 2) {\n      shapeCoordinates.triangle_bl(cell, x0, x1, x2, x3, opt);\n      shapeCoordinates.tetragon_tr(cell, x0, x1, x2, x3, opt);\n    } else {\n      shapeCoordinates.heptagon_bl(cell, x0, x1, x2, x3, opt);\n    }\n    break;\n\n  case 98: /* 1202 */\n    center_avg = computeCenterAverage(x0, x1, x2, x3, minV, maxV);\n    /* should never be center_avg === 0 */\n    if (center_avg === 2) {\n      shapeCoordinates.triangle_tl(cell, x0, x1, x2, x3, opt);\n      shapeCoordinates.tetragon_br(cell, x0, x1, x2, x3, opt);\n    } else {\n      shapeCoordinates.heptagon_tl(cell, x0, x1, x2, x3, opt);\n    }\n    break;\n\n  case 38: /* 0212 */\n    center_avg = computeCenterAverage(x0, x1, x2, x3, minV, maxV);\n    /* should never be center_avg === 0 */\n    if (center_avg === 2) {\n      shapeCoordinates.triangle_br(cell, x0, x1, x2, x3, opt);\n      shapeCoordinates.tetragon_tl(cell, x0, x1, x2, x3, opt);\n    } else {\n      shapeCoordinates.heptagon_br(cell, x0, x1, x2, x3, opt);\n    }\n    break;\n\n  case 18: /* 0102 */\n    center_avg = computeCenterAverage(x0, x1, x2, x3, minV, maxV);\n    /* should never be center_avg === 2 */\n    if (center_avg === 0) {\n      shapeCoordinates.triangle_tr(cell, x0, x1, x2, x3, opt);\n      shapeCoordinates.tetragon_bl(cell, x0, x1, x2, x3, opt);\n    } else {\n      shapeCoordinates.heptagon_tr(cell, x0, x1, x2, x3, opt);\n    }\n    break;\n\n  case 33: /* 0201 */\n    center_avg = computeCenterAverage(x0, x1, x2, x3, minV, maxV);\n    /* should never be center_avg === 2 */\n    if (center_avg === 0) {\n      shapeCoordinates.triangle_bl(cell, x0, x1, x2, x3, opt);\n      shapeCoordinates.tetragon_tr(cell, x0, x1, x2, x3, opt);\n    } else {\n      shapeCoordinates.heptagon_bl(cell, x0, x1, x2, x3, opt);\n    }\n    break;\n\n  case 72: /* 1020 */\n    center_avg = computeCenterAverage(x0, x1, x2, x3, minV, maxV);\n    /* should never be center_avg === 2 */\n    if (center_avg === 0) {\n      shapeCoordinates.triangle_tl(cell, x0, x1, x2, x3, opt);\n      shapeCoordinates.tetragon_br(cell, x0, x1, x2, x3, opt);\n    } else {\n      shapeCoordinates.heptagon_tl(cell, x0, x1, x2, x3, opt);\n    }\n    break;\n\n  case 132: /* 2010 */\n    center_avg = computeCenterAverage(x0, x1, x2, x3, minV, maxV);\n    /* should never be center_avg === 2 */\n    if (center_avg === 0) {\n      shapeCoordinates.triangle_br(cell, x0, x1, x2, x3, opt);\n      shapeCoordinates.tetragon_tl(cell, x0, x1, x2, x3, opt);\n    } else {\n      shapeCoordinates.heptagon_br(cell, x0, x1, x2, x3, opt);\n    }\n    break;\n\n\n    /* 8-sided saddles */\n\n  case 136: /* 2020 */\n    center_avg = computeCenterAverage(x0, x1, x2, x3, minV, maxV);\n    if (center_avg === 0) {\n      shapeCoordinates.tetragon_tl(cell, x0, x1, x2, x3, opt);\n      shapeCoordinates.tetragon_br(cell, x0, x1, x2, x3, opt);\n    } else if (center_avg === 1) {\n      shapeCoordinates.octagon(cell, x0, x1, x2, x3, opt);\n    } else {\n      shapeCoordinates.tetragon_bl(cell, x0, x1, x2, x3, opt);\n      shapeCoordinates.tetragon_tr(cell, x0, x1, x2, x3, opt);\n    }\n    break;\n\n  case 34: /* 0202 */\n    center_avg = computeCenterAverage(x0, x1, x2, x3, minV, maxV);\n    if (center_avg === 0) {\n      shapeCoordinates.tetragon_bl(cell, x0, x1, x2, x3, opt);\n      shapeCoordinates.tetragon_tr(cell, x0, x1, x2, x3, opt);\n    } else if (center_avg === 1) {\n      shapeCoordinates.octagon(cell, x0, x1, x2, x3, opt);\n    } else {\n      shapeCoordinates.tetragon_tl(cell, x0, x1, x2, x3, opt);\n      shapeCoordinates.tetragon_br(cell, x0, x1, x2, x3, opt);\n    }\n    break;\n  }\n\n  return cell;\n}\n\nexport { isoLines, isoLines as isoContours, isoBands, QuadTree, QuadTree as quadTree };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}