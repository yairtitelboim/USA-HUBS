{"ast":null,"code":"// index.ts\nimport { degreesToRadians, radiansToDegrees } from \"@turf/helpers\";\nimport { getCoord } from \"@turf/invariant\";\nfunction bearing(start, end, options = {}) {\n  if (options.final === true) {\n    return calculateFinalBearing(start, end);\n  }\n  const coordinates1 = getCoord(start);\n  const coordinates2 = getCoord(end);\n  const lon1 = degreesToRadians(coordinates1[0]);\n  const lon2 = degreesToRadians(coordinates2[0]);\n  const lat1 = degreesToRadians(coordinates1[1]);\n  const lat2 = degreesToRadians(coordinates2[1]);\n  const a = Math.sin(lon2 - lon1) * Math.cos(lat2);\n  const b = Math.cos(lat1) * Math.sin(lat2) - Math.sin(lat1) * Math.cos(lat2) * Math.cos(lon2 - lon1);\n  return radiansToDegrees(Math.atan2(a, b));\n}\nfunction calculateFinalBearing(start, end) {\n  let bear = bearing(end, start);\n  bear = (bear + 180) % 360;\n  return bear;\n}\nvar turf_bearing_default = bearing;\nexport { bearing, turf_bearing_default as default };","map":{"version":3,"names":["degreesToRadians","radiansToDegrees","getCoord","bearing","start","end","options","final","calculateFinalBearing","coordinates1","coordinates2","lon1","lon2","lat1","lat2","a","Math","sin","cos","b","atan2","bear","turf_bearing_default"],"sources":["/Users/yairtitelboim/Documents/Kernel/ALLAPPS/LOGhub/loghub/county-map-app/node_modules/@turf/bearing/index.ts"],"sourcesContent":["import { Coord, degreesToRadians, radiansToDegrees } from \"@turf/helpers\";\nimport { getCoord } from \"@turf/invariant\";\n\n// http://en.wikipedia.org/wiki/Haversine_formula\n// http://www.movable-type.co.uk/scripts/latlong.html#bearing\n\n/**\n * Takes two {@link Point|points} and finds the geographic bearing between them,\n * i.e. the angle measured in degrees from the north line (0 degrees)\n *\n * @function\n * @param {Coord} start starting Point\n * @param {Coord} end ending Point\n * @param {Object} [options={}] Optional parameters\n * @param {boolean} [options.final=false] calculates the final bearing if true\n * @returns {number} bearing in decimal degrees, between -180 and 180 degrees (positive clockwise)\n * @example\n * var point1 = turf.point([-75.343, 39.984]);\n * var point2 = turf.point([-75.534, 39.123]);\n *\n * var bearing = turf.bearing(point1, point2);\n *\n * //addToMap\n * var addToMap = [point1, point2]\n * point1.properties['marker-color'] = '#f00'\n * point2.properties['marker-color'] = '#0f0'\n * point1.properties.bearing = bearing\n */\nfunction bearing(\n  start: Coord,\n  end: Coord,\n  options: {\n    final?: boolean;\n  } = {}\n): number {\n  // Reverse calculation\n  if (options.final === true) {\n    return calculateFinalBearing(start, end);\n  }\n\n  const coordinates1 = getCoord(start);\n  const coordinates2 = getCoord(end);\n\n  const lon1 = degreesToRadians(coordinates1[0]);\n  const lon2 = degreesToRadians(coordinates2[0]);\n  const lat1 = degreesToRadians(coordinates1[1]);\n  const lat2 = degreesToRadians(coordinates2[1]);\n  const a = Math.sin(lon2 - lon1) * Math.cos(lat2);\n  const b =\n    Math.cos(lat1) * Math.sin(lat2) -\n    Math.sin(lat1) * Math.cos(lat2) * Math.cos(lon2 - lon1);\n\n  return radiansToDegrees(Math.atan2(a, b));\n}\n\n/**\n * Calculates Final Bearing\n *\n * @private\n * @param {Coord} start starting Point\n * @param {Coord} end ending Point\n * @returns {number} bearing\n */\nfunction calculateFinalBearing(start: Coord, end: Coord) {\n  // Swap start & end\n  let bear = bearing(end, start);\n  bear = (bear + 180) % 360;\n  return bear;\n}\n\nexport { bearing };\nexport default bearing;\n"],"mappings":";AAAA,SAAgBA,gBAAA,EAAkBC,gBAAA,QAAwB;AAC1D,SAASC,QAAA,QAAgB;AA2BzB,SAASC,QACPC,KAAA,EACAC,GAAA,EACAC,OAAA,GAEI,CAAC,GACG;EAER,IAAIA,OAAA,CAAQC,KAAA,KAAU,MAAM;IAC1B,OAAOC,qBAAA,CAAsBJ,KAAA,EAAOC,GAAG;EACzC;EAEA,MAAMI,YAAA,GAAeP,QAAA,CAASE,KAAK;EACnC,MAAMM,YAAA,GAAeR,QAAA,CAASG,GAAG;EAEjC,MAAMM,IAAA,GAAOX,gBAAA,CAAiBS,YAAA,CAAa,CAAC,CAAC;EAC7C,MAAMG,IAAA,GAAOZ,gBAAA,CAAiBU,YAAA,CAAa,CAAC,CAAC;EAC7C,MAAMG,IAAA,GAAOb,gBAAA,CAAiBS,YAAA,CAAa,CAAC,CAAC;EAC7C,MAAMK,IAAA,GAAOd,gBAAA,CAAiBU,YAAA,CAAa,CAAC,CAAC;EAC7C,MAAMK,CAAA,GAAIC,IAAA,CAAKC,GAAA,CAAIL,IAAA,GAAOD,IAAI,IAAIK,IAAA,CAAKE,GAAA,CAAIJ,IAAI;EAC/C,MAAMK,CAAA,GACJH,IAAA,CAAKE,GAAA,CAAIL,IAAI,IAAIG,IAAA,CAAKC,GAAA,CAAIH,IAAI,IAC9BE,IAAA,CAAKC,GAAA,CAAIJ,IAAI,IAAIG,IAAA,CAAKE,GAAA,CAAIJ,IAAI,IAAIE,IAAA,CAAKE,GAAA,CAAIN,IAAA,GAAOD,IAAI;EAExD,OAAOV,gBAAA,CAAiBe,IAAA,CAAKI,KAAA,CAAML,CAAA,EAAGI,CAAC,CAAC;AAC1C;AAUA,SAASX,sBAAsBJ,KAAA,EAAcC,GAAA,EAAY;EAEvD,IAAIgB,IAAA,GAAOlB,OAAA,CAAQE,GAAA,EAAKD,KAAK;EAC7BiB,IAAA,IAAQA,IAAA,GAAO,OAAO;EACtB,OAAOA,IAAA;AACT;AAGA,IAAOC,oBAAA,GAAQnB,OAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}