{"ast":null,"code":"// index.ts\nimport { polygon, featureCollection, isObject } from \"@turf/helpers\";\nimport { collectionOf } from \"@turf/invariant\";\nimport { cloneProperties } from \"@turf/clone\";\nimport * as d3voronoi from \"d3-voronoi\";\nfunction coordsToPolygon(coords) {\n  coords = coords.slice();\n  coords.push(coords[0]);\n  return polygon([coords]);\n}\nfunction voronoi2(points, options) {\n  options = options || {};\n  if (!isObject(options)) throw new Error(\"options is invalid\");\n  const bbox = options.bbox || [-180, -85, 180, 85];\n  if (!points) throw new Error(\"points is required\");\n  if (!Array.isArray(bbox)) throw new Error(\"bbox is invalid\");\n  collectionOf(points, \"Point\", \"points\");\n  return featureCollection(d3voronoi.voronoi().x(feature => feature.geometry.coordinates[0]).y(feature => feature.geometry.coordinates[1]).extent([[bbox[0], bbox[1]], [bbox[2], bbox[3]]]).polygons(points.features).map(function (coords, index) {\n    return Object.assign(coordsToPolygon(coords), {\n      properties: cloneProperties(points.features[index].properties)\n    });\n  }));\n}\nvar turf_voronoi_default = voronoi2;\nexport { turf_voronoi_default as default, voronoi2 as voronoi };","map":{"version":3,"names":["polygon","featureCollection","isObject","collectionOf","cloneProperties","d3voronoi","coordsToPolygon","coords","slice","push","voronoi2","points","options","Error","bbox","Array","isArray","voronoi","x","feature","geometry","coordinates","y","extent","polygons","features","map","index","Object","assign","properties","turf_voronoi_default"],"sources":["/Users/yairtitelboim/Documents/Kernel/ALLAPPS/LOGhub/loghub/county-map-app/node_modules/@turf/voronoi/index.ts"],"sourcesContent":["import {\n  BBox,\n  Feature,\n  FeatureCollection,\n  Point,\n  Polygon,\n  Position,\n} from \"geojson\";\nimport { polygon, featureCollection, isObject } from \"@turf/helpers\";\nimport { collectionOf } from \"@turf/invariant\";\nimport { cloneProperties } from \"@turf/clone\";\nimport * as d3voronoi from \"d3-voronoi\";\n\n/**\n * Creates a polygon from a list of coordinates. Ensures the polygon is closed.\n *\n * @private\n * @param {Position[]} coords representing a polygon\n * @returns {Feature<Polygon>} polygon\n */\nfunction coordsToPolygon(coords: Position[]) {\n  coords = coords.slice();\n  coords.push(coords[0]);\n  return polygon([coords]);\n}\n\n/**\n * Takes a collection of points and a bounding box, and returns a collection\n * of Voronoi polygons.\n *\n * The Voronoi algorithim used comes from the d3-voronoi package.\n *\n * @function\n * @param {FeatureCollection<Point>} points points around which to calculate the Voronoi polygons\n * @param {Object} [options={}] Optional parameters\n * @param {BBox} [options.bbox=[-180, -85, 180, -85]] clipping rectangle, in [minX, minY, maxX, MaxY] order\n * @returns {FeatureCollection<Polygon>} a set of polygons, one per input point\n * @example\n * const options = {\n *   bbox: [-70, 40, -60, 60]\n * };\n * const points = turf.randomPoint(100, options);\n * const voronoiPolygons = turf.voronoi(points, options);\n *\n * //addToMap\n * const addToMap = [voronoiPolygons, points];\n */\nfunction voronoi(\n  points: FeatureCollection<Point>,\n  options?: { bbox?: BBox }\n): FeatureCollection<Polygon> {\n  // Optional params\n  options = options || {};\n  if (!isObject(options)) throw new Error(\"options is invalid\");\n  const bbox = options.bbox || [-180, -85, 180, 85];\n\n  // Input Validation\n  if (!points) throw new Error(\"points is required\");\n  if (!Array.isArray(bbox)) throw new Error(\"bbox is invalid\");\n  collectionOf(points, \"Point\", \"points\");\n\n  // Main\n  return featureCollection(\n    d3voronoi\n      .voronoi<Feature<Point>>()\n      .x((feature) => feature.geometry.coordinates[0])\n      .y((feature) => feature.geometry.coordinates[1])\n      .extent([\n        [bbox[0], bbox[1]],\n        [bbox[2], bbox[3]],\n      ])\n      .polygons(points.features)\n      .map(function (coords, index) {\n        return Object.assign(coordsToPolygon(coords), {\n          properties: cloneProperties(points.features[index].properties),\n        });\n      })\n  );\n}\n\nexport { voronoi };\nexport default voronoi;\n"],"mappings":";AAQA,SAASA,OAAA,EAASC,iBAAA,EAAmBC,QAAA,QAAgB;AACrD,SAASC,YAAA,QAAoB;AAC7B,SAASC,eAAA,QAAuB;AAChC,YAAYC,SAAA,MAAe;AAS3B,SAASC,gBAAgBC,MAAA,EAAoB;EAC3CA,MAAA,GAASA,MAAA,CAAOC,KAAA,CAAM;EACtBD,MAAA,CAAOE,IAAA,CAAKF,MAAA,CAAO,CAAC,CAAC;EACrB,OAAOP,OAAA,CAAQ,CAACO,MAAM,CAAC;AACzB;AAuBA,SAASG,SACPC,MAAA,EACAC,OAAA,EAC4B;EAE5BA,OAAA,GAAUA,OAAA,IAAW,CAAC;EACtB,IAAI,CAACV,QAAA,CAASU,OAAO,GAAG,MAAM,IAAIC,KAAA,CAAM,oBAAoB;EAC5D,MAAMC,IAAA,GAAOF,OAAA,CAAQE,IAAA,IAAQ,CAAC,MAAM,KAAK,KAAK,EAAE;EAGhD,IAAI,CAACH,MAAA,EAAQ,MAAM,IAAIE,KAAA,CAAM,oBAAoB;EACjD,IAAI,CAACE,KAAA,CAAMC,OAAA,CAAQF,IAAI,GAAG,MAAM,IAAID,KAAA,CAAM,iBAAiB;EAC3DV,YAAA,CAAaQ,MAAA,EAAQ,SAAS,QAAQ;EAGtC,OAAOV,iBAAA,CAEFI,SAAA,CAAAY,OAAA,CAAwB,EACxBC,CAAA,CAAGC,OAAA,IAAYA,OAAA,CAAQC,QAAA,CAASC,WAAA,CAAY,CAAC,CAAC,EAC9CC,CAAA,CAAGH,OAAA,IAAYA,OAAA,CAAQC,QAAA,CAASC,WAAA,CAAY,CAAC,CAAC,EAC9CE,MAAA,CAAO,CACN,CAACT,IAAA,CAAK,CAAC,GAAGA,IAAA,CAAK,CAAC,CAAC,GACjB,CAACA,IAAA,CAAK,CAAC,GAAGA,IAAA,CAAK,CAAC,CAAC,EAClB,EACAU,QAAA,CAASb,MAAA,CAAOc,QAAQ,EACxBC,GAAA,CAAI,UAAUnB,MAAA,EAAQoB,KAAA,EAAO;IAC5B,OAAOC,MAAA,CAAOC,MAAA,CAAOvB,eAAA,CAAgBC,MAAM,GAAG;MAC5CuB,UAAA,EAAY1B,eAAA,CAAgBO,MAAA,CAAOc,QAAA,CAASE,KAAK,EAAEG,UAAU;IAC/D,CAAC;EACH,CAAC,CACL;AACF;AAGA,IAAOC,oBAAA,GAAQrB,QAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}