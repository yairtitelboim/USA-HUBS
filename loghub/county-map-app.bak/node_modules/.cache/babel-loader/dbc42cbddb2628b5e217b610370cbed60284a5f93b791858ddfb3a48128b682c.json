{"ast":null,"code":"// index.ts\nimport { getCoord } from \"@turf/invariant\";\nimport { radiansToLength, degreesToRadians } from \"@turf/helpers\";\nfunction distance(from, to, options = {}) {\n  var coordinates1 = getCoord(from);\n  var coordinates2 = getCoord(to);\n  var dLat = degreesToRadians(coordinates2[1] - coordinates1[1]);\n  var dLon = degreesToRadians(coordinates2[0] - coordinates1[0]);\n  var lat1 = degreesToRadians(coordinates1[1]);\n  var lat2 = degreesToRadians(coordinates2[1]);\n  var a = Math.pow(Math.sin(dLat / 2), 2) + Math.pow(Math.sin(dLon / 2), 2) * Math.cos(lat1) * Math.cos(lat2);\n  return radiansToLength(2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a)), options.units);\n}\nvar turf_distance_default = distance;\nexport { turf_distance_default as default, distance };","map":{"version":3,"names":["getCoord","radiansToLength","degreesToRadians","distance","from","to","options","coordinates1","coordinates2","dLat","dLon","lat1","lat2","a","Math","pow","sin","cos","atan2","sqrt","units","turf_distance_default"],"sources":["/Users/yairtitelboim/Documents/Kernel/ALLAPPS/LOGhub/loghub/county-map-app/node_modules/@turf/distance/index.ts"],"sourcesContent":["import { getCoord } from \"@turf/invariant\";\nimport { radiansToLength, degreesToRadians, Coord, Units } from \"@turf/helpers\";\n\n//http://en.wikipedia.org/wiki/Haversine_formula\n//http://www.movable-type.co.uk/scripts/latlong.html\n\n/**\n * Calculates the distance between two {@link Coord|coordinates} in degrees, radians, miles, or kilometers.\n * This uses the [Haversine formula](http://en.wikipedia.org/wiki/Haversine_formula) to account for global curvature.\n *\n * @function\n * @param {Coord} from origin coordinate\n * @param {Coord} to destination coordinate\n * @param {Object} [options={}] Optional parameters\n * @param {string} [options.units='kilometers'] can be degrees, radians, miles, or kilometers\n * @returns {number} distance between the two coordinates\n * @example\n * var from = turf.point([-75.343, 39.984]);\n * var to = turf.point([-75.534, 39.123]);\n * var options = {units: 'miles'};\n *\n * var distance = turf.distance(from, to, options);\n *\n * //addToMap\n * var addToMap = [from, to];\n * from.properties.distance = distance;\n * to.properties.distance = distance;\n */\nfunction distance(\n  from: Coord,\n  to: Coord,\n  options: {\n    units?: Units;\n  } = {}\n) {\n  var coordinates1 = getCoord(from);\n  var coordinates2 = getCoord(to);\n  var dLat = degreesToRadians(coordinates2[1] - coordinates1[1]);\n  var dLon = degreesToRadians(coordinates2[0] - coordinates1[0]);\n  var lat1 = degreesToRadians(coordinates1[1]);\n  var lat2 = degreesToRadians(coordinates2[1]);\n\n  var a =\n    Math.pow(Math.sin(dLat / 2), 2) +\n    Math.pow(Math.sin(dLon / 2), 2) * Math.cos(lat1) * Math.cos(lat2);\n\n  return radiansToLength(\n    2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a)),\n    options.units\n  );\n}\n\nexport { distance };\nexport default distance;\n"],"mappings":";AAAA,SAASA,QAAA,QAAgB;AACzB,SAASC,eAAA,EAAiBC,gBAAA,QAAsC;AA2BhE,SAASC,SACPC,IAAA,EACAC,EAAA,EACAC,OAAA,GAEI,CAAC,GACL;EACA,IAAIC,YAAA,GAAeP,QAAA,CAASI,IAAI;EAChC,IAAII,YAAA,GAAeR,QAAA,CAASK,EAAE;EAC9B,IAAII,IAAA,GAAOP,gBAAA,CAAiBM,YAAA,CAAa,CAAC,IAAID,YAAA,CAAa,CAAC,CAAC;EAC7D,IAAIG,IAAA,GAAOR,gBAAA,CAAiBM,YAAA,CAAa,CAAC,IAAID,YAAA,CAAa,CAAC,CAAC;EAC7D,IAAII,IAAA,GAAOT,gBAAA,CAAiBK,YAAA,CAAa,CAAC,CAAC;EAC3C,IAAIK,IAAA,GAAOV,gBAAA,CAAiBM,YAAA,CAAa,CAAC,CAAC;EAE3C,IAAIK,CAAA,GACFC,IAAA,CAAKC,GAAA,CAAID,IAAA,CAAKE,GAAA,CAAIP,IAAA,GAAO,CAAC,GAAG,CAAC,IAC9BK,IAAA,CAAKC,GAAA,CAAID,IAAA,CAAKE,GAAA,CAAIN,IAAA,GAAO,CAAC,GAAG,CAAC,IAAII,IAAA,CAAKG,GAAA,CAAIN,IAAI,IAAIG,IAAA,CAAKG,GAAA,CAAIL,IAAI;EAElE,OAAOX,eAAA,CACL,IAAIa,IAAA,CAAKI,KAAA,CAAMJ,IAAA,CAAKK,IAAA,CAAKN,CAAC,GAAGC,IAAA,CAAKK,IAAA,CAAK,IAAIN,CAAC,CAAC,GAC7CP,OAAA,CAAQc,KACV;AACF;AAGA,IAAOC,qBAAA,GAAQlB,QAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}