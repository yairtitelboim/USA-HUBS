{"ast":null,"code":"// index.ts\nimport { featureCollection, polygon } from \"@turf/helpers\";\nfunction tin(points, z) {\n  let isPointZ = false;\n  return featureCollection(triangulate(points.features.map(p => {\n    const point = {\n      x: p.geometry.coordinates[0],\n      y: p.geometry.coordinates[1]\n    };\n    if (z) {\n      point.z = p.properties[z];\n    } else if (p.geometry.coordinates.length === 3) {\n      isPointZ = true;\n      point.z = p.geometry.coordinates[2];\n    }\n    return point;\n  })).map(triangle => {\n    const a = [triangle.a.x, triangle.a.y];\n    const b = [triangle.b.x, triangle.b.y];\n    const c = [triangle.c.x, triangle.c.y];\n    let properties = {};\n    if (isPointZ) {\n      a.push(triangle.a.z);\n      b.push(triangle.b.z);\n      c.push(triangle.c.z);\n    } else {\n      properties = {\n        a: triangle.a.z,\n        b: triangle.b.z,\n        c: triangle.c.z\n      };\n    }\n    return polygon([[a, b, c, a]], properties);\n  }));\n}\nvar Triangle = class {\n  constructor(a, b, c) {\n    this.a = a;\n    this.b = b;\n    this.c = c;\n    const A = b.x - a.x;\n    const B = b.y - a.y;\n    const C = c.x - a.x;\n    const D = c.y - a.y;\n    const E = A * (a.x + b.x) + B * (a.y + b.y);\n    const F = C * (a.x + c.x) + D * (a.y + c.y);\n    const G = 2 * (A * (c.y - b.y) - B * (c.x - b.x));\n    let dx;\n    let dy;\n    this.x = (D * E - B * F) / G;\n    this.y = (A * F - C * E) / G;\n    dx = this.x - a.x;\n    dy = this.y - a.y;\n    this.r = dx * dx + dy * dy;\n  }\n};\nfunction byX(a, b) {\n  return b.x - a.x;\n}\nfunction dedup(edges) {\n  let j = edges.length;\n  let a;\n  let b;\n  let i;\n  let m;\n  let n;\n  outer: while (j) {\n    b = edges[--j];\n    a = edges[--j];\n    i = j;\n    while (i) {\n      n = edges[--i];\n      m = edges[--i];\n      if (a === m && b === n || a === n && b === m) {\n        edges.splice(j, 2);\n        edges.splice(i, 2);\n        j -= 2;\n        continue outer;\n      }\n    }\n  }\n}\nfunction triangulate(vertices) {\n  if (vertices.length < 3) {\n    return [];\n  }\n  vertices.sort(byX);\n  let i = vertices.length - 1;\n  const xmin = vertices[i].x;\n  const xmax = vertices[0].x;\n  let ymin = vertices[i].y;\n  let ymax = ymin;\n  const epsilon = 1e-12;\n  let a;\n  let b;\n  let c;\n  let A;\n  let B;\n  let G;\n  while (i--) {\n    if (vertices[i].y < ymin) {\n      ymin = vertices[i].y;\n    }\n    if (vertices[i].y > ymax) {\n      ymax = vertices[i].y;\n    }\n  }\n  let dx = xmax - xmin;\n  let dy = ymax - ymin;\n  const dmax = dx > dy ? dx : dy;\n  const xmid = (xmax + xmin) * 0.5;\n  const ymid = (ymax + ymin) * 0.5;\n  const open = [new Triangle({\n    __sentinel: true,\n    x: xmid - 20 * dmax,\n    y: ymid - dmax\n  }, {\n    __sentinel: true,\n    x: xmid,\n    y: ymid + 20 * dmax\n  }, {\n    __sentinel: true,\n    x: xmid + 20 * dmax,\n    y: ymid - dmax\n  })];\n  const closed = [];\n  const edges = [];\n  let j;\n  i = vertices.length;\n  while (i--) {\n    edges.length = 0;\n    j = open.length;\n    while (j--) {\n      dx = vertices[i].x - open[j].x;\n      if (dx > 0 && dx * dx > open[j].r) {\n        closed.push(open[j]);\n        open.splice(j, 1);\n        continue;\n      }\n      dy = vertices[i].y - open[j].y;\n      if (dx * dx + dy * dy > open[j].r) {\n        continue;\n      }\n      edges.push(open[j].a, open[j].b, open[j].b, open[j].c, open[j].c, open[j].a);\n      open.splice(j, 1);\n    }\n    dedup(edges);\n    j = edges.length;\n    while (j) {\n      b = edges[--j];\n      a = edges[--j];\n      c = vertices[i];\n      A = b.x - a.x;\n      B = b.y - a.y;\n      G = 2 * (A * (c.y - b.y) - B * (c.x - b.x));\n      if (Math.abs(G) > epsilon) {\n        open.push(new Triangle(a, b, c));\n      }\n    }\n  }\n  Array.prototype.push.apply(closed, open);\n  i = closed.length;\n  while (i--) {\n    if (closed[i].a.__sentinel || closed[i].b.__sentinel || closed[i].c.__sentinel) {\n      closed.splice(i, 1);\n    }\n  }\n  return closed;\n}\nvar turf_tin_default = tin;\nexport { turf_tin_default as default, tin };","map":{"version":3,"names":["featureCollection","polygon","tin","points","z","isPointZ","triangulate","features","map","p","point","x","geometry","coordinates","y","properties","length","triangle","a","b","c","push","Triangle","constructor","A","B","C","D","E","F","G","dx","dy","r","byX","dedup","edges","j","i","m","n","outer","splice","vertices","sort","xmin","xmax","ymin","ymax","epsilon","dmax","xmid","ymid","open","__sentinel","closed","Math","abs","Array","prototype","apply","turf_tin_default"],"sources":["/Users/yairtitelboim/Documents/Kernel/ALLAPPS/LOGhub/loghub/county-map-app/node_modules/@turf/tin/index.ts"],"sourcesContent":["// http://en.wikipedia.org/wiki/Delaunay_triangulation\n// https://github.com/ironwallaby/delaunay\nimport { FeatureCollection, Point, Polygon } from \"geojson\";\nimport { featureCollection, polygon } from \"@turf/helpers\";\n\ninterface Pt {\n  x: number;\n  y: number;\n  z?: number;\n  __sentinel?: boolean;\n}\ninterface Vertice {\n  x: number;\n  y: number;\n}\n\n/**\n * Takes a set of {@link Point|points} and creates a\n * [Triangulated Irregular Network](http://en.wikipedia.org/wiki/Triangulated_irregular_network),\n * or a TIN for short, returned as a collection of Polygons. These are often used\n * for developing elevation contour maps or stepped heat visualizations.\n *\n * If an optional z-value property is provided then it is added as properties called `a`, `b`,\n * and `c` representing its value at each of the points that represent the corners of the\n * triangle.\n *\n * @function\n * @param {FeatureCollection<Point>} points input points\n * @param {String} [z] name of the property from which to pull z values\n * This is optional: if not given, then there will be no extra data added to the derived triangles.\n * @returns {FeatureCollection<Polygon>} TIN output\n * @example\n * // generate some random point data\n * var points = turf.randomPoint(30, {bbox: [50, 30, 70, 50]});\n *\n * // add a random property to each point between 0 and 9\n * for (var i = 0; i < points.features.length; i++) {\n *   points.features[i].properties.z = ~~(Math.random() * 9);\n * }\n * var tin = turf.tin(points, 'z');\n *\n * //addToMap\n * var addToMap = [tin, points]\n * for (var i = 0; i < tin.features.length; i++) {\n *   var properties  = tin.features[i].properties;\n *   properties.fill = '#' + properties.a + properties.b + properties.c;\n * }\n */\nfunction tin(\n  points: FeatureCollection<Point, any>,\n  z?: string\n): FeatureCollection<Polygon> {\n  // break down points\n  let isPointZ = false;\n  return featureCollection(\n    triangulate(\n      points.features.map((p) => {\n        const point: Pt = {\n          x: p.geometry.coordinates[0],\n          y: p.geometry.coordinates[1],\n        };\n        if (z) {\n          point.z = p.properties[z];\n        } else if (p.geometry.coordinates.length === 3) {\n          isPointZ = true;\n          point.z = p.geometry.coordinates[2];\n        }\n        return point;\n      })\n    ).map((triangle: any) => {\n      const a = [triangle.a.x, triangle.a.y];\n      const b = [triangle.b.x, triangle.b.y];\n      const c = [triangle.c.x, triangle.c.y];\n      let properties = {};\n\n      // Add z coordinates to triangle points if user passed\n      // them in that way otherwise add it as a property.\n      if (isPointZ) {\n        a.push(triangle.a.z);\n        b.push(triangle.b.z);\n        c.push(triangle.c.z);\n      } else {\n        properties = {\n          a: triangle.a.z,\n          b: triangle.b.z,\n          c: triangle.c.z,\n        };\n      }\n\n      return polygon([[a, b, c, a]], properties);\n    })\n  );\n}\n\nclass Triangle {\n  public a: Pt;\n  public b: Pt;\n  public c: Pt;\n  public x: number;\n  public y: number;\n  public r: number;\n\n  constructor(a: Pt, b: Pt, c: Pt) {\n    this.a = a;\n    this.b = b;\n    this.c = c;\n\n    const A = b.x - a.x;\n    const B = b.y - a.y;\n    const C = c.x - a.x;\n    const D = c.y - a.y;\n    const E = A * (a.x + b.x) + B * (a.y + b.y);\n    const F = C * (a.x + c.x) + D * (a.y + c.y);\n    const G = 2 * (A * (c.y - b.y) - B * (c.x - b.x));\n    let dx;\n    let dy;\n\n    // If the points of the triangle are collinear, then just find the\n    // extremes and use the midpoint as the center of the circumcircle.\n    this.x = (D * E - B * F) / G;\n    this.y = (A * F - C * E) / G;\n    dx = this.x - a.x;\n    dy = this.y - a.y;\n    this.r = dx * dx + dy * dy;\n  }\n}\n\nfunction byX(a: Pt, b: Pt) {\n  return b.x - a.x;\n}\n\nfunction dedup(edges: number[]) {\n  let j = edges.length;\n  let a;\n  let b;\n  let i;\n  let m;\n  let n;\n\n  outer: while (j) {\n    b = edges[--j];\n    a = edges[--j];\n    i = j;\n    while (i) {\n      n = edges[--i];\n      m = edges[--i];\n      if ((a === m && b === n) || (a === n && b === m)) {\n        edges.splice(j, 2);\n        edges.splice(i, 2);\n        j -= 2;\n        continue outer;\n      }\n    }\n  }\n}\n\nfunction triangulate(vertices: Vertice[]) {\n  // Bail if there aren't enough vertices to form any triangles.\n  if (vertices.length < 3) {\n    return [];\n  }\n\n  // Ensure the vertex array is in order of descending X coordinate\n  // (which is needed to ensure a subquadratic runtime), and then find\n  // the bounding box around the points.\n  vertices.sort(byX);\n\n  let i = vertices.length - 1;\n  const xmin = vertices[i].x;\n  const xmax = vertices[0].x;\n  let ymin = vertices[i].y;\n  let ymax = ymin;\n  const epsilon = 1e-12;\n\n  let a;\n  let b;\n  let c;\n  let A;\n  let B;\n  let G;\n\n  while (i--) {\n    if (vertices[i].y < ymin) {\n      ymin = vertices[i].y;\n    }\n    if (vertices[i].y > ymax) {\n      ymax = vertices[i].y;\n    }\n  }\n\n  // Find a supertriangle, which is a triangle that surrounds all the\n  // vertices. This is used like something of a sentinel value to remove\n  // cases in the main algorithm, and is removed before we return any\n  // results.\n\n  // Once found, put it in the \"open\" list. (The \"open\" list is for\n  // triangles who may still need to be considered; the \"closed\" list is\n  // for triangles which do not.)\n  let dx = xmax - xmin;\n  let dy = ymax - ymin;\n  const dmax = dx > dy ? dx : dy;\n  const xmid = (xmax + xmin) * 0.5;\n  const ymid = (ymax + ymin) * 0.5;\n  const open = [\n    new Triangle(\n      {\n        __sentinel: true,\n        x: xmid - 20 * dmax,\n        y: ymid - dmax,\n      },\n      {\n        __sentinel: true,\n        x: xmid,\n        y: ymid + 20 * dmax,\n      },\n      {\n        __sentinel: true,\n        x: xmid + 20 * dmax,\n        y: ymid - dmax,\n      }\n    ),\n  ];\n  const closed = [];\n  const edges: any = [];\n  let j;\n\n  // Incrementally add each vertex to the mesh.\n  i = vertices.length;\n  while (i--) {\n    // For each open triangle, check to see if the current point is\n    // inside it's circumcircle. If it is, remove the triangle and add\n    // it's edges to an edge list.\n    edges.length = 0;\n    j = open.length;\n    while (j--) {\n      // If this point is to the right of this triangle's circumcircle,\n      // then this triangle should never get checked again. Remove it\n      // from the open list, add it to the closed list, and skip.\n      dx = vertices[i].x - open[j].x;\n      if (dx > 0 && dx * dx > open[j].r) {\n        closed.push(open[j]);\n        open.splice(j, 1);\n        continue;\n      }\n\n      // If not, skip this triangle.\n      dy = vertices[i].y - open[j].y;\n      if (dx * dx + dy * dy > open[j].r) {\n        continue;\n      }\n\n      // Remove the triangle and add it's edges to the edge list.\n      edges.push(\n        open[j].a,\n        open[j].b,\n        open[j].b,\n        open[j].c,\n        open[j].c,\n        open[j].a\n      );\n      open.splice(j, 1);\n    }\n\n    // Remove any doubled edges.\n    dedup(edges);\n\n    // Add a new triangle for each edge.\n    j = edges.length;\n    while (j) {\n      b = edges[--j];\n      a = edges[--j];\n      c = vertices[i];\n      // Avoid adding colinear triangles (which have error-prone\n      // circumcircles)\n      A = b.x - a.x;\n      B = b.y - a.y;\n      G = 2 * (A * (c.y - b.y) - B * (c.x - b.x));\n      if (Math.abs(G) > epsilon) {\n        open.push(new Triangle(a, b, c));\n      }\n    }\n  }\n\n  // Copy any remaining open triangles to the closed list, and then\n  // remove any triangles that share a vertex with the supertriangle.\n  Array.prototype.push.apply(closed, open);\n\n  i = closed.length;\n  while (i--) {\n    if (\n      closed[i].a.__sentinel ||\n      closed[i].b.__sentinel ||\n      closed[i].c.__sentinel\n    ) {\n      closed.splice(i, 1);\n    }\n  }\n\n  return closed;\n}\n\nexport { Pt, Vertice, tin };\nexport default tin;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}