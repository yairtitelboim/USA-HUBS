{"ast":null,"code":"// index.ts\nimport { booleanPointOnLine } from \"@turf/boolean-point-on-line\";\nimport { booleanPointInPolygon } from \"@turf/boolean-point-in-polygon\";\nimport { getGeom } from \"@turf/invariant\";\nfunction booleanTouches(feature1, feature2) {\n  var geom1 = getGeom(feature1);\n  var geom2 = getGeom(feature2);\n  var type1 = geom1.type;\n  var type2 = geom2.type;\n  switch (type1) {\n    case \"Point\":\n      switch (type2) {\n        case \"LineString\":\n          return isPointOnLineEnd(geom1, geom2);\n        case \"MultiLineString\":\n          var foundTouchingPoint = false;\n          for (var ii = 0; ii < geom2.coordinates.length; ii++) {\n            if (isPointOnLineEnd(geom1, {\n              type: \"LineString\",\n              coordinates: geom2.coordinates[ii]\n            })) foundTouchingPoint = true;\n          }\n          return foundTouchingPoint;\n        case \"Polygon\":\n          for (var i = 0; i < geom2.coordinates.length; i++) {\n            if (booleanPointOnLine(geom1, {\n              type: \"LineString\",\n              coordinates: geom2.coordinates[i]\n            })) return true;\n          }\n          return false;\n        case \"MultiPolygon\":\n          for (var i = 0; i < geom2.coordinates.length; i++) {\n            for (var ii = 0; ii < geom2.coordinates[i].length; ii++) {\n              if (booleanPointOnLine(geom1, {\n                type: \"LineString\",\n                coordinates: geom2.coordinates[i][ii]\n              })) return true;\n            }\n          }\n          return false;\n        default:\n          throw new Error(\"feature2 \" + type2 + \" geometry not supported\");\n      }\n    case \"MultiPoint\":\n      switch (type2) {\n        case \"LineString\":\n          var foundTouchingPoint = false;\n          for (var i = 0; i < geom1.coordinates.length; i++) {\n            if (!foundTouchingPoint) {\n              if (isPointOnLineEnd({\n                type: \"Point\",\n                coordinates: geom1.coordinates[i]\n              }, geom2)) foundTouchingPoint = true;\n            }\n            if (booleanPointOnLine({\n              type: \"Point\",\n              coordinates: geom1.coordinates[i]\n            }, geom2, {\n              ignoreEndVertices: true\n            })) return false;\n          }\n          return foundTouchingPoint;\n        case \"MultiLineString\":\n          var foundTouchingPoint = false;\n          for (var i = 0; i < geom1.coordinates.length; i++) {\n            for (var ii = 0; ii < geom2.coordinates.length; ii++) {\n              if (!foundTouchingPoint) {\n                if (isPointOnLineEnd({\n                  type: \"Point\",\n                  coordinates: geom1.coordinates[i]\n                }, {\n                  type: \"LineString\",\n                  coordinates: geom2.coordinates[ii]\n                })) foundTouchingPoint = true;\n              }\n              if (booleanPointOnLine({\n                type: \"Point\",\n                coordinates: geom1.coordinates[i]\n              }, {\n                type: \"LineString\",\n                coordinates: geom2.coordinates[ii]\n              }, {\n                ignoreEndVertices: true\n              })) return false;\n            }\n          }\n          return foundTouchingPoint;\n        case \"Polygon\":\n          var foundTouchingPoint = false;\n          for (var i = 0; i < geom1.coordinates.length; i++) {\n            if (!foundTouchingPoint) {\n              if (booleanPointOnLine({\n                type: \"Point\",\n                coordinates: geom1.coordinates[i]\n              }, {\n                type: \"LineString\",\n                coordinates: geom2.coordinates[0]\n              })) foundTouchingPoint = true;\n            }\n            if (booleanPointInPolygon({\n              type: \"Point\",\n              coordinates: geom1.coordinates[i]\n            }, geom2, {\n              ignoreBoundary: true\n            })) return false;\n          }\n          return foundTouchingPoint;\n        case \"MultiPolygon\":\n          var foundTouchingPoint = false;\n          for (var i = 0; i < geom1.coordinates.length; i++) {\n            for (var ii = 0; ii < geom2.coordinates.length; ii++) {\n              if (!foundTouchingPoint) {\n                if (booleanPointOnLine({\n                  type: \"Point\",\n                  coordinates: geom1.coordinates[i]\n                }, {\n                  type: \"LineString\",\n                  coordinates: geom2.coordinates[ii][0]\n                })) foundTouchingPoint = true;\n              }\n              if (booleanPointInPolygon({\n                type: \"Point\",\n                coordinates: geom1.coordinates[i]\n              }, {\n                type: \"Polygon\",\n                coordinates: geom2.coordinates[ii]\n              }, {\n                ignoreBoundary: true\n              })) return false;\n            }\n          }\n          return foundTouchingPoint;\n        default:\n          throw new Error(\"feature2 \" + type2 + \" geometry not supported\");\n      }\n    case \"LineString\":\n      switch (type2) {\n        case \"Point\":\n          return isPointOnLineEnd(geom2, geom1);\n        case \"MultiPoint\":\n          var foundTouchingPoint = false;\n          for (var i = 0; i < geom2.coordinates.length; i++) {\n            if (!foundTouchingPoint) {\n              if (isPointOnLineEnd({\n                type: \"Point\",\n                coordinates: geom2.coordinates[i]\n              }, geom1)) foundTouchingPoint = true;\n            }\n            if (booleanPointOnLine({\n              type: \"Point\",\n              coordinates: geom2.coordinates[i]\n            }, geom1, {\n              ignoreEndVertices: true\n            })) return false;\n          }\n          return foundTouchingPoint;\n        case \"LineString\":\n          var endMatch = false;\n          if (isPointOnLineEnd({\n            type: \"Point\",\n            coordinates: geom1.coordinates[0]\n          }, geom2)) endMatch = true;\n          if (isPointOnLineEnd({\n            type: \"Point\",\n            coordinates: geom1.coordinates[geom1.coordinates.length - 1]\n          }, geom2)) endMatch = true;\n          if (endMatch === false) return false;\n          for (var i = 0; i < geom1.coordinates.length; i++) {\n            if (booleanPointOnLine({\n              type: \"Point\",\n              coordinates: geom1.coordinates[i]\n            }, geom2, {\n              ignoreEndVertices: true\n            })) return false;\n          }\n          return endMatch;\n        case \"MultiLineString\":\n          var endMatch = false;\n          for (var i = 0; i < geom2.coordinates.length; i++) {\n            if (isPointOnLineEnd({\n              type: \"Point\",\n              coordinates: geom1.coordinates[0]\n            }, {\n              type: \"LineString\",\n              coordinates: geom2.coordinates[i]\n            })) endMatch = true;\n            if (isPointOnLineEnd({\n              type: \"Point\",\n              coordinates: geom1.coordinates[geom1.coordinates.length - 1]\n            }, {\n              type: \"LineString\",\n              coordinates: geom2.coordinates[i]\n            })) endMatch = true;\n            for (var ii = 0; ii < geom1.coordinates[i].length; ii++) {\n              if (booleanPointOnLine({\n                type: \"Point\",\n                coordinates: geom1.coordinates[ii]\n              }, {\n                type: \"LineString\",\n                coordinates: geom2.coordinates[i]\n              }, {\n                ignoreEndVertices: true\n              })) return false;\n            }\n          }\n          return endMatch;\n        case \"Polygon\":\n          var foundTouchingPoint = false;\n          for (var i = 0; i < geom1.coordinates.length; i++) {\n            if (!foundTouchingPoint) {\n              if (booleanPointOnLine({\n                type: \"Point\",\n                coordinates: geom1.coordinates[i]\n              }, {\n                type: \"LineString\",\n                coordinates: geom2.coordinates[0]\n              })) foundTouchingPoint = true;\n            }\n            if (booleanPointInPolygon({\n              type: \"Point\",\n              coordinates: geom1.coordinates[i]\n            }, geom2, {\n              ignoreBoundary: true\n            })) return false;\n          }\n          return foundTouchingPoint;\n        case \"MultiPolygon\":\n          var foundTouchingPoint = false;\n          for (var i = 0; i < geom1.coordinates.length; i++) {\n            for (var ii = 0; ii < geom2.coordinates.length; ii++) {\n              if (!foundTouchingPoint) {\n                if (booleanPointOnLine({\n                  type: \"Point\",\n                  coordinates: geom1.coordinates[i]\n                }, {\n                  type: \"LineString\",\n                  coordinates: geom2.coordinates[ii][0]\n                })) foundTouchingPoint = true;\n              }\n            }\n            if (booleanPointInPolygon({\n              type: \"Point\",\n              coordinates: geom1.coordinates[i]\n            }, geom2, {\n              ignoreBoundary: true\n            })) return false;\n          }\n          return foundTouchingPoint;\n        default:\n          throw new Error(\"feature2 \" + type2 + \" geometry not supported\");\n      }\n    case \"MultiLineString\":\n      switch (type2) {\n        case \"Point\":\n          for (var i = 0; i < geom1.coordinates.length; i++) {\n            if (isPointOnLineEnd(geom2, {\n              type: \"LineString\",\n              coordinates: geom1.coordinates[i]\n            })) return true;\n          }\n          return false;\n        case \"MultiPoint\":\n          var foundTouchingPoint = false;\n          for (var i = 0; i < geom1.coordinates.length; i++) {\n            for (var ii = 0; ii < geom2.coordinates.length; ii++) {\n              if (!foundTouchingPoint) {\n                if (isPointOnLineEnd({\n                  type: \"Point\",\n                  coordinates: geom2.coordinates[ii]\n                }, {\n                  type: \"LineString\",\n                  coordinates: geom1.coordinates[ii]\n                })) foundTouchingPoint = true;\n              }\n              if (booleanPointOnLine({\n                type: \"Point\",\n                coordinates: geom2.coordinates[ii]\n              }, {\n                type: \"LineString\",\n                coordinates: geom1.coordinates[ii]\n              }, {\n                ignoreEndVertices: true\n              })) return false;\n            }\n          }\n          return foundTouchingPoint;\n        case \"LineString\":\n          var endMatch = false;\n          for (var i = 0; i < geom1.coordinates.length; i++) {\n            if (isPointOnLineEnd({\n              type: \"Point\",\n              coordinates: geom1.coordinates[i][0]\n            }, geom2)) endMatch = true;\n            if (isPointOnLineEnd({\n              type: \"Point\",\n              coordinates: geom1.coordinates[i][geom1.coordinates[i].length - 1]\n            }, geom2)) endMatch = true;\n            for (var ii = 0; ii < geom2.coordinates.length; ii++) {\n              if (booleanPointOnLine({\n                type: \"Point\",\n                coordinates: geom2.coordinates[ii]\n              }, {\n                type: \"LineString\",\n                coordinates: geom1.coordinates[i]\n              }, {\n                ignoreEndVertices: true\n              })) return false;\n            }\n          }\n          return endMatch;\n        case \"MultiLineString\":\n          var endMatch = false;\n          for (var i = 0; i < geom1.coordinates.length; i++) {\n            for (var ii = 0; ii < geom2.coordinates.length; ii++) {\n              if (isPointOnLineEnd({\n                type: \"Point\",\n                coordinates: geom1.coordinates[i][0]\n              }, {\n                type: \"LineString\",\n                coordinates: geom2.coordinates[ii]\n              })) endMatch = true;\n              if (isPointOnLineEnd({\n                type: \"Point\",\n                coordinates: geom1.coordinates[i][geom1.coordinates[i].length - 1]\n              }, {\n                type: \"LineString\",\n                coordinates: geom2.coordinates[ii]\n              })) endMatch = true;\n              for (var iii = 0; iii < geom1.coordinates[i].length; iii++) {\n                if (booleanPointOnLine({\n                  type: \"Point\",\n                  coordinates: geom1.coordinates[i][iii]\n                }, {\n                  type: \"LineString\",\n                  coordinates: geom2.coordinates[ii]\n                }, {\n                  ignoreEndVertices: true\n                })) return false;\n              }\n            }\n          }\n          return endMatch;\n        case \"Polygon\":\n          var foundTouchingPoint = false;\n          for (var i = 0; i < geom1.coordinates.length; i++) {\n            for (var ii = 0; ii < geom1.coordinates.length; ii++) {\n              if (!foundTouchingPoint) {\n                if (booleanPointOnLine({\n                  type: \"Point\",\n                  coordinates: geom1.coordinates[i][ii]\n                }, {\n                  type: \"LineString\",\n                  coordinates: geom2.coordinates[0]\n                })) foundTouchingPoint = true;\n              }\n              if (booleanPointInPolygon({\n                type: \"Point\",\n                coordinates: geom1.coordinates[i][ii]\n              }, geom2, {\n                ignoreBoundary: true\n              })) return false;\n            }\n          }\n          return foundTouchingPoint;\n        case \"MultiPolygon\":\n          var foundTouchingPoint = false;\n          for (var i = 0; i < geom2.coordinates[0].length; i++) {\n            for (var ii = 0; ii < geom1.coordinates.length; ii++) {\n              for (var iii = 0; iii < geom1.coordinates[ii].length; iii++) {\n                if (!foundTouchingPoint) {\n                  if (booleanPointOnLine({\n                    type: \"Point\",\n                    coordinates: geom1.coordinates[ii][iii]\n                  }, {\n                    type: \"LineString\",\n                    coordinates: geom2.coordinates[0][i]\n                  })) foundTouchingPoint = true;\n                }\n                if (booleanPointInPolygon({\n                  type: \"Point\",\n                  coordinates: geom1.coordinates[ii][iii]\n                }, {\n                  type: \"Polygon\",\n                  coordinates: [geom2.coordinates[0][i]]\n                }, {\n                  ignoreBoundary: true\n                })) return false;\n              }\n            }\n          }\n          return foundTouchingPoint;\n        default:\n          throw new Error(\"feature2 \" + type2 + \" geometry not supported\");\n      }\n    case \"Polygon\":\n      switch (type2) {\n        case \"Point\":\n          for (var i = 0; i < geom1.coordinates.length; i++) {\n            if (booleanPointOnLine(geom2, {\n              type: \"LineString\",\n              coordinates: geom1.coordinates[i]\n            })) return true;\n          }\n          return false;\n        case \"MultiPoint\":\n          var foundTouchingPoint = false;\n          for (var i = 0; i < geom2.coordinates.length; i++) {\n            if (!foundTouchingPoint) {\n              if (booleanPointOnLine({\n                type: \"Point\",\n                coordinates: geom2.coordinates[i]\n              }, {\n                type: \"LineString\",\n                coordinates: geom1.coordinates[0]\n              })) foundTouchingPoint = true;\n            }\n            if (booleanPointInPolygon({\n              type: \"Point\",\n              coordinates: geom2.coordinates[i]\n            }, geom1, {\n              ignoreBoundary: true\n            })) return false;\n          }\n          return foundTouchingPoint;\n        case \"LineString\":\n          var foundTouchingPoint = false;\n          for (var i = 0; i < geom2.coordinates.length; i++) {\n            if (!foundTouchingPoint) {\n              if (booleanPointOnLine({\n                type: \"Point\",\n                coordinates: geom2.coordinates[i]\n              }, {\n                type: \"LineString\",\n                coordinates: geom1.coordinates[0]\n              })) foundTouchingPoint = true;\n            }\n            if (booleanPointInPolygon({\n              type: \"Point\",\n              coordinates: geom2.coordinates[i]\n            }, geom1, {\n              ignoreBoundary: true\n            })) return false;\n          }\n          return foundTouchingPoint;\n        case \"MultiLineString\":\n          var foundTouchingPoint = false;\n          for (var i = 0; i < geom2.coordinates.length; i++) {\n            for (var ii = 0; ii < geom2.coordinates[i].length; ii++) {\n              if (!foundTouchingPoint) {\n                if (booleanPointOnLine({\n                  type: \"Point\",\n                  coordinates: geom2.coordinates[i][ii]\n                }, {\n                  type: \"LineString\",\n                  coordinates: geom1.coordinates[0]\n                })) foundTouchingPoint = true;\n              }\n              if (booleanPointInPolygon({\n                type: \"Point\",\n                coordinates: geom2.coordinates[i][ii]\n              }, geom1, {\n                ignoreBoundary: true\n              })) return false;\n            }\n          }\n          return foundTouchingPoint;\n        case \"Polygon\":\n          var foundTouchingPoint = false;\n          for (var i = 0; i < geom1.coordinates[0].length; i++) {\n            if (!foundTouchingPoint) {\n              if (booleanPointOnLine({\n                type: \"Point\",\n                coordinates: geom1.coordinates[0][i]\n              }, {\n                type: \"LineString\",\n                coordinates: geom2.coordinates[0]\n              })) foundTouchingPoint = true;\n            }\n            if (booleanPointInPolygon({\n              type: \"Point\",\n              coordinates: geom1.coordinates[0][i]\n            }, geom2, {\n              ignoreBoundary: true\n            })) return false;\n          }\n          return foundTouchingPoint;\n        case \"MultiPolygon\":\n          var foundTouchingPoint = false;\n          for (var i = 0; i < geom2.coordinates[0].length; i++) {\n            for (var ii = 0; ii < geom1.coordinates[0].length; ii++) {\n              if (!foundTouchingPoint) {\n                if (booleanPointOnLine({\n                  type: \"Point\",\n                  coordinates: geom1.coordinates[0][ii]\n                }, {\n                  type: \"LineString\",\n                  coordinates: geom2.coordinates[0][i]\n                })) foundTouchingPoint = true;\n              }\n              if (booleanPointInPolygon({\n                type: \"Point\",\n                coordinates: geom1.coordinates[0][ii]\n              }, {\n                type: \"Polygon\",\n                coordinates: geom2.coordinates[0][i]\n              }, {\n                ignoreBoundary: true\n              })) return false;\n            }\n          }\n          return foundTouchingPoint;\n        default:\n          throw new Error(\"feature2 \" + type2 + \" geometry not supported\");\n      }\n    case \"MultiPolygon\":\n      switch (type2) {\n        case \"Point\":\n          for (var i = 0; i < geom1.coordinates[0].length; i++) {\n            if (booleanPointOnLine(geom2, {\n              type: \"LineString\",\n              coordinates: geom1.coordinates[0][i]\n            })) return true;\n          }\n          return false;\n        case \"MultiPoint\":\n          var foundTouchingPoint = false;\n          for (var i = 0; i < geom1.coordinates[0].length; i++) {\n            for (var ii = 0; ii < geom2.coordinates.length; ii++) {\n              if (!foundTouchingPoint) {\n                if (booleanPointOnLine({\n                  type: \"Point\",\n                  coordinates: geom2.coordinates[ii]\n                }, {\n                  type: \"LineString\",\n                  coordinates: geom1.coordinates[0][i]\n                })) foundTouchingPoint = true;\n              }\n              if (booleanPointInPolygon({\n                type: \"Point\",\n                coordinates: geom2.coordinates[ii]\n              }, {\n                type: \"Polygon\",\n                coordinates: geom1.coordinates[0][i]\n              }, {\n                ignoreBoundary: true\n              })) return false;\n            }\n          }\n          return foundTouchingPoint;\n        case \"LineString\":\n          var foundTouchingPoint = false;\n          for (var i = 0; i < geom1.coordinates[0].length; i++) {\n            for (var ii = 0; ii < geom2.coordinates.length; ii++) {\n              if (!foundTouchingPoint) {\n                if (booleanPointOnLine({\n                  type: \"Point\",\n                  coordinates: geom2.coordinates[ii]\n                }, {\n                  type: \"LineString\",\n                  coordinates: geom1.coordinates[0][i]\n                })) foundTouchingPoint = true;\n              }\n              if (booleanPointInPolygon({\n                type: \"Point\",\n                coordinates: geom2.coordinates[ii]\n              }, {\n                type: \"Polygon\",\n                coordinates: geom1.coordinates[0][i]\n              }, {\n                ignoreBoundary: true\n              })) return false;\n            }\n          }\n          return foundTouchingPoint;\n        case \"MultiLineString\":\n          var foundTouchingPoint = false;\n          for (var i = 0; i < geom1.coordinates.length; i++) {\n            for (var ii = 0; ii < geom2.coordinates.length; ii++) {\n              for (var iii = 0; iii < geom2.coordinates[ii].length; iii++) {\n                if (!foundTouchingPoint) {\n                  if (booleanPointOnLine({\n                    type: \"Point\",\n                    coordinates: geom2.coordinates[ii][iii]\n                  }, {\n                    type: \"LineString\",\n                    coordinates: geom1.coordinates[i][0]\n                  })) foundTouchingPoint = true;\n                }\n                if (booleanPointInPolygon({\n                  type: \"Point\",\n                  coordinates: geom2.coordinates[ii][iii]\n                }, {\n                  type: \"Polygon\",\n                  coordinates: [geom1.coordinates[i][0]]\n                }, {\n                  ignoreBoundary: true\n                })) return false;\n              }\n            }\n          }\n          return foundTouchingPoint;\n        case \"Polygon\":\n          var foundTouchingPoint = false;\n          for (var i = 0; i < geom1.coordinates[0].length; i++) {\n            for (var ii = 0; ii < geom1.coordinates[0][i].length; ii++) {\n              if (!foundTouchingPoint) {\n                if (booleanPointOnLine({\n                  type: \"Point\",\n                  coordinates: geom1.coordinates[0][i][ii]\n                }, {\n                  type: \"LineString\",\n                  coordinates: geom2.coordinates[0]\n                })) foundTouchingPoint = true;\n              }\n              if (booleanPointInPolygon({\n                type: \"Point\",\n                coordinates: geom1.coordinates[0][i][ii]\n              }, geom2, {\n                ignoreBoundary: true\n              })) return false;\n            }\n          }\n          return foundTouchingPoint;\n        case \"MultiPolygon\":\n          var foundTouchingPoint = false;\n          for (var i = 0; i < geom1.coordinates[0].length; i++) {\n            for (var ii = 0; ii < geom2.coordinates[0].length; ii++) {\n              for (var iii = 0; iii < geom1.coordinates[0].length; iii++) {\n                if (!foundTouchingPoint) {\n                  if (booleanPointOnLine({\n                    type: \"Point\",\n                    coordinates: geom1.coordinates[0][i][iii]\n                  }, {\n                    type: \"LineString\",\n                    coordinates: geom2.coordinates[0][ii]\n                  })) foundTouchingPoint = true;\n                }\n                if (booleanPointInPolygon({\n                  type: \"Point\",\n                  coordinates: geom1.coordinates[0][i][iii]\n                }, {\n                  type: \"Polygon\",\n                  coordinates: geom2.coordinates[0][ii]\n                }, {\n                  ignoreBoundary: true\n                })) return false;\n              }\n            }\n          }\n          return foundTouchingPoint;\n        default:\n          throw new Error(\"feature2 \" + type2 + \" geometry not supported\");\n      }\n    default:\n      throw new Error(\"feature1 \" + type1 + \" geometry not supported\");\n  }\n}\nfunction isPointOnLineEnd(point, line) {\n  if (compareCoords(line.coordinates[0], point.coordinates)) return true;\n  if (compareCoords(line.coordinates[line.coordinates.length - 1], point.coordinates)) return true;\n  return false;\n}\nfunction compareCoords(pair1, pair2) {\n  return pair1[0] === pair2[0] && pair1[1] === pair2[1];\n}\nvar turf_boolean_touches_default = booleanTouches;\nexport { booleanTouches, turf_boolean_touches_default as default };","map":{"version":3,"names":["booleanPointOnLine","booleanPointInPolygon","getGeom","booleanTouches","feature1","feature2","geom1","geom2","type1","type","type2","isPointOnLineEnd","foundTouchingPoint","ii","coordinates","length","i","Error","ignoreEndVertices","ignoreBoundary","endMatch","iii","point","line","compareCoords","pair1","pair2","turf_boolean_touches_default"],"sources":["/Users/yairtitelboim/Documents/Kernel/ALLAPPS/LOGhub/loghub/county-map-app/node_modules/@turf/boolean-touches/index.ts"],"sourcesContent":["import { Feature, Geometry, LineString, Point } from \"geojson\";\nimport { booleanPointOnLine } from \"@turf/boolean-point-on-line\";\nimport { booleanPointInPolygon } from \"@turf/boolean-point-in-polygon\";\nimport { getGeom } from \"@turf/invariant\";\n\n/**\n * Boolean-touches true if none of the points common to both geometries\n * intersect the interiors of both geometries.\n *\n * @function\n * @param {Geometry|Feature<any>} feature1 GeoJSON Feature or Geometry\n * @param {Geometry|Feature<any>} feature2 GeoJSON Feature or Geometry\n * @returns {boolean} true/false\n * @example\n * var line = turf.lineString([[1, 1], [1, 2], [1, 3], [1, 4]]);\n * var point = turf.point([1, 1]);\n *\n * turf.booleanTouches(point, line);\n * //=true\n */\nfunction booleanTouches(\n  feature1: Feature<any> | Geometry,\n  feature2: Feature<any> | Geometry\n): boolean {\n  var geom1 = getGeom(feature1);\n  var geom2 = getGeom(feature2);\n  var type1 = geom1.type;\n  var type2 = geom2.type;\n\n  switch (type1) {\n    case \"Point\":\n      switch (type2) {\n        case \"LineString\":\n          return isPointOnLineEnd(geom1, geom2);\n        case \"MultiLineString\":\n          var foundTouchingPoint = false;\n          for (var ii = 0; ii < geom2.coordinates.length; ii++) {\n            if (\n              isPointOnLineEnd(geom1, {\n                type: \"LineString\",\n                coordinates: geom2.coordinates[ii],\n              })\n            )\n              foundTouchingPoint = true;\n          }\n          return foundTouchingPoint;\n        case \"Polygon\":\n          for (var i = 0; i < geom2.coordinates.length; i++) {\n            if (\n              booleanPointOnLine(geom1, {\n                type: \"LineString\",\n                coordinates: geom2.coordinates[i],\n              })\n            )\n              return true;\n          }\n          return false;\n        case \"MultiPolygon\":\n          for (var i = 0; i < geom2.coordinates.length; i++) {\n            for (var ii = 0; ii < geom2.coordinates[i].length; ii++) {\n              if (\n                booleanPointOnLine(geom1, {\n                  type: \"LineString\",\n                  coordinates: geom2.coordinates[i][ii],\n                })\n              )\n                return true;\n            }\n          }\n          return false;\n        default:\n          throw new Error(\"feature2 \" + type2 + \" geometry not supported\");\n      }\n    case \"MultiPoint\":\n      switch (type2) {\n        case \"LineString\":\n          var foundTouchingPoint = false;\n          for (var i = 0; i < geom1.coordinates.length; i++) {\n            if (!foundTouchingPoint) {\n              if (\n                isPointOnLineEnd(\n                  { type: \"Point\", coordinates: geom1.coordinates[i] },\n                  geom2\n                )\n              )\n                foundTouchingPoint = true;\n            }\n            if (\n              booleanPointOnLine(\n                { type: \"Point\", coordinates: geom1.coordinates[i] },\n                geom2,\n                { ignoreEndVertices: true }\n              )\n            )\n              return false;\n          }\n          return foundTouchingPoint;\n        case \"MultiLineString\":\n          var foundTouchingPoint = false;\n          for (var i = 0; i < geom1.coordinates.length; i++) {\n            for (var ii = 0; ii < geom2.coordinates.length; ii++) {\n              if (!foundTouchingPoint) {\n                if (\n                  isPointOnLineEnd(\n                    { type: \"Point\", coordinates: geom1.coordinates[i] },\n                    { type: \"LineString\", coordinates: geom2.coordinates[ii] }\n                  )\n                )\n                  foundTouchingPoint = true;\n              }\n              if (\n                booleanPointOnLine(\n                  { type: \"Point\", coordinates: geom1.coordinates[i] },\n                  { type: \"LineString\", coordinates: geom2.coordinates[ii] },\n                  { ignoreEndVertices: true }\n                )\n              )\n                return false;\n            }\n          }\n          return foundTouchingPoint;\n        case \"Polygon\":\n          var foundTouchingPoint = false;\n          for (var i = 0; i < geom1.coordinates.length; i++) {\n            if (!foundTouchingPoint) {\n              if (\n                booleanPointOnLine(\n                  { type: \"Point\", coordinates: geom1.coordinates[i] },\n                  { type: \"LineString\", coordinates: geom2.coordinates[0] }\n                )\n              )\n                foundTouchingPoint = true;\n            }\n            if (\n              booleanPointInPolygon(\n                { type: \"Point\", coordinates: geom1.coordinates[i] },\n                geom2,\n                { ignoreBoundary: true }\n              )\n            )\n              return false;\n          }\n          return foundTouchingPoint;\n        case \"MultiPolygon\":\n          var foundTouchingPoint = false;\n          for (var i = 0; i < geom1.coordinates.length; i++) {\n            for (var ii = 0; ii < geom2.coordinates.length; ii++) {\n              if (!foundTouchingPoint) {\n                if (\n                  booleanPointOnLine(\n                    { type: \"Point\", coordinates: geom1.coordinates[i] },\n                    {\n                      type: \"LineString\",\n                      coordinates: geom2.coordinates[ii][0],\n                    }\n                  )\n                )\n                  foundTouchingPoint = true;\n              }\n              if (\n                booleanPointInPolygon(\n                  { type: \"Point\", coordinates: geom1.coordinates[i] },\n                  { type: \"Polygon\", coordinates: geom2.coordinates[ii] },\n                  { ignoreBoundary: true }\n                )\n              )\n                return false;\n            }\n          }\n          return foundTouchingPoint;\n        default:\n          throw new Error(\"feature2 \" + type2 + \" geometry not supported\");\n      }\n    case \"LineString\":\n      switch (type2) {\n        case \"Point\":\n          return isPointOnLineEnd(geom2, geom1);\n        case \"MultiPoint\":\n          var foundTouchingPoint = false;\n          for (var i = 0; i < geom2.coordinates.length; i++) {\n            if (!foundTouchingPoint) {\n              if (\n                isPointOnLineEnd(\n                  { type: \"Point\", coordinates: geom2.coordinates[i] },\n                  geom1\n                )\n              )\n                foundTouchingPoint = true;\n            }\n            if (\n              booleanPointOnLine(\n                { type: \"Point\", coordinates: geom2.coordinates[i] },\n                geom1,\n                { ignoreEndVertices: true }\n              )\n            )\n              return false;\n          }\n          return foundTouchingPoint;\n        case \"LineString\":\n          var endMatch = false;\n          if (\n            isPointOnLineEnd(\n              { type: \"Point\", coordinates: geom1.coordinates[0] },\n              geom2\n            )\n          )\n            endMatch = true;\n          if (\n            isPointOnLineEnd(\n              {\n                type: \"Point\",\n                coordinates: geom1.coordinates[geom1.coordinates.length - 1],\n              },\n              geom2\n            )\n          )\n            endMatch = true;\n          if (endMatch === false) return false;\n          for (var i = 0; i < geom1.coordinates.length; i++) {\n            if (\n              booleanPointOnLine(\n                { type: \"Point\", coordinates: geom1.coordinates[i] },\n                geom2,\n                { ignoreEndVertices: true }\n              )\n            )\n              return false;\n          }\n          return endMatch;\n        case \"MultiLineString\":\n          var endMatch = false;\n          for (var i = 0; i < geom2.coordinates.length; i++) {\n            if (\n              isPointOnLineEnd(\n                { type: \"Point\", coordinates: geom1.coordinates[0] },\n                { type: \"LineString\", coordinates: geom2.coordinates[i] }\n              )\n            )\n              endMatch = true;\n            if (\n              isPointOnLineEnd(\n                {\n                  type: \"Point\",\n                  coordinates: geom1.coordinates[geom1.coordinates.length - 1],\n                },\n                { type: \"LineString\", coordinates: geom2.coordinates[i] }\n              )\n            )\n              endMatch = true;\n            for (var ii = 0; ii < geom1.coordinates[i].length; ii++) {\n              if (\n                booleanPointOnLine(\n                  { type: \"Point\", coordinates: geom1.coordinates[ii] },\n                  { type: \"LineString\", coordinates: geom2.coordinates[i] },\n                  { ignoreEndVertices: true }\n                )\n              )\n                return false;\n            }\n          }\n          return endMatch;\n        case \"Polygon\":\n          var foundTouchingPoint = false;\n          for (var i = 0; i < geom1.coordinates.length; i++) {\n            if (!foundTouchingPoint) {\n              if (\n                booleanPointOnLine(\n                  { type: \"Point\", coordinates: geom1.coordinates[i] },\n                  { type: \"LineString\", coordinates: geom2.coordinates[0] }\n                )\n              )\n                foundTouchingPoint = true;\n            }\n            if (\n              booleanPointInPolygon(\n                { type: \"Point\", coordinates: geom1.coordinates[i] },\n                geom2,\n                { ignoreBoundary: true }\n              )\n            )\n              return false;\n          }\n          return foundTouchingPoint;\n        case \"MultiPolygon\":\n          var foundTouchingPoint = false;\n          for (var i = 0; i < geom1.coordinates.length; i++) {\n            for (var ii = 0; ii < geom2.coordinates.length; ii++) {\n              if (!foundTouchingPoint) {\n                if (\n                  booleanPointOnLine(\n                    { type: \"Point\", coordinates: geom1.coordinates[i] },\n                    {\n                      type: \"LineString\",\n                      coordinates: geom2.coordinates[ii][0],\n                    }\n                  )\n                )\n                  foundTouchingPoint = true;\n              }\n            }\n            if (\n              booleanPointInPolygon(\n                { type: \"Point\", coordinates: geom1.coordinates[i] },\n                geom2,\n                { ignoreBoundary: true }\n              )\n            )\n              return false;\n          }\n          return foundTouchingPoint;\n        default:\n          throw new Error(\"feature2 \" + type2 + \" geometry not supported\");\n      }\n    case \"MultiLineString\":\n      switch (type2) {\n        case \"Point\":\n          for (var i = 0; i < geom1.coordinates.length; i++) {\n            if (\n              isPointOnLineEnd(geom2, {\n                type: \"LineString\",\n                coordinates: geom1.coordinates[i],\n              })\n            )\n              return true;\n          }\n          return false;\n        case \"MultiPoint\":\n          var foundTouchingPoint = false;\n          for (var i = 0; i < geom1.coordinates.length; i++) {\n            for (var ii = 0; ii < geom2.coordinates.length; ii++) {\n              if (!foundTouchingPoint) {\n                if (\n                  isPointOnLineEnd(\n                    { type: \"Point\", coordinates: geom2.coordinates[ii] },\n                    { type: \"LineString\", coordinates: geom1.coordinates[ii] }\n                  )\n                )\n                  foundTouchingPoint = true;\n              }\n              if (\n                booleanPointOnLine(\n                  { type: \"Point\", coordinates: geom2.coordinates[ii] },\n                  { type: \"LineString\", coordinates: geom1.coordinates[ii] },\n                  { ignoreEndVertices: true }\n                )\n              )\n                return false;\n            }\n          }\n          return foundTouchingPoint;\n        case \"LineString\":\n          var endMatch = false;\n          for (var i = 0; i < geom1.coordinates.length; i++) {\n            if (\n              isPointOnLineEnd(\n                { type: \"Point\", coordinates: geom1.coordinates[i][0] },\n                geom2\n              )\n            )\n              endMatch = true;\n            if (\n              isPointOnLineEnd(\n                {\n                  type: \"Point\",\n                  coordinates:\n                    geom1.coordinates[i][geom1.coordinates[i].length - 1],\n                },\n                geom2\n              )\n            )\n              endMatch = true;\n            for (var ii = 0; ii < geom2.coordinates.length; ii++) {\n              if (\n                booleanPointOnLine(\n                  { type: \"Point\", coordinates: geom2.coordinates[ii] },\n                  { type: \"LineString\", coordinates: geom1.coordinates[i] },\n                  { ignoreEndVertices: true }\n                )\n              )\n                return false;\n            }\n          }\n          return endMatch;\n        case \"MultiLineString\":\n          var endMatch = false;\n          for (var i = 0; i < geom1.coordinates.length; i++) {\n            for (var ii = 0; ii < geom2.coordinates.length; ii++) {\n              if (\n                isPointOnLineEnd(\n                  { type: \"Point\", coordinates: geom1.coordinates[i][0] },\n                  { type: \"LineString\", coordinates: geom2.coordinates[ii] }\n                )\n              )\n                endMatch = true;\n              if (\n                isPointOnLineEnd(\n                  {\n                    type: \"Point\",\n                    coordinates:\n                      geom1.coordinates[i][geom1.coordinates[i].length - 1],\n                  },\n                  { type: \"LineString\", coordinates: geom2.coordinates[ii] }\n                )\n              )\n                endMatch = true;\n              for (var iii = 0; iii < geom1.coordinates[i].length; iii++) {\n                if (\n                  booleanPointOnLine(\n                    { type: \"Point\", coordinates: geom1.coordinates[i][iii] },\n                    { type: \"LineString\", coordinates: geom2.coordinates[ii] },\n                    { ignoreEndVertices: true }\n                  )\n                )\n                  return false;\n              }\n            }\n          }\n          return endMatch;\n        case \"Polygon\":\n          var foundTouchingPoint = false;\n          for (var i = 0; i < geom1.coordinates.length; i++) {\n            for (var ii = 0; ii < geom1.coordinates.length; ii++) {\n              if (!foundTouchingPoint) {\n                if (\n                  booleanPointOnLine(\n                    { type: \"Point\", coordinates: geom1.coordinates[i][ii] },\n                    { type: \"LineString\", coordinates: geom2.coordinates[0] }\n                  )\n                )\n                  foundTouchingPoint = true;\n              }\n              if (\n                booleanPointInPolygon(\n                  { type: \"Point\", coordinates: geom1.coordinates[i][ii] },\n                  geom2,\n                  { ignoreBoundary: true }\n                )\n              )\n                return false;\n            }\n          }\n          return foundTouchingPoint;\n        case \"MultiPolygon\":\n          var foundTouchingPoint = false;\n          for (var i = 0; i < geom2.coordinates[0].length; i++) {\n            for (var ii = 0; ii < geom1.coordinates.length; ii++) {\n              for (var iii = 0; iii < geom1.coordinates[ii].length; iii++) {\n                if (!foundTouchingPoint) {\n                  if (\n                    booleanPointOnLine(\n                      {\n                        type: \"Point\",\n                        coordinates: geom1.coordinates[ii][iii],\n                      },\n                      {\n                        type: \"LineString\",\n                        coordinates: geom2.coordinates[0][i],\n                      }\n                    )\n                  )\n                    foundTouchingPoint = true;\n                }\n                if (\n                  booleanPointInPolygon(\n                    { type: \"Point\", coordinates: geom1.coordinates[ii][iii] },\n                    { type: \"Polygon\", coordinates: [geom2.coordinates[0][i]] },\n                    { ignoreBoundary: true }\n                  )\n                )\n                  return false;\n              }\n            }\n          }\n          return foundTouchingPoint;\n        default:\n          throw new Error(\"feature2 \" + type2 + \" geometry not supported\");\n      }\n    case \"Polygon\":\n      switch (type2) {\n        case \"Point\":\n          for (var i = 0; i < geom1.coordinates.length; i++) {\n            if (\n              booleanPointOnLine(geom2, {\n                type: \"LineString\",\n                coordinates: geom1.coordinates[i],\n              })\n            )\n              return true;\n          }\n          return false;\n        case \"MultiPoint\":\n          var foundTouchingPoint = false;\n          for (var i = 0; i < geom2.coordinates.length; i++) {\n            if (!foundTouchingPoint) {\n              if (\n                booleanPointOnLine(\n                  { type: \"Point\", coordinates: geom2.coordinates[i] },\n                  { type: \"LineString\", coordinates: geom1.coordinates[0] }\n                )\n              )\n                foundTouchingPoint = true;\n            }\n            if (\n              booleanPointInPolygon(\n                { type: \"Point\", coordinates: geom2.coordinates[i] },\n                geom1,\n                { ignoreBoundary: true }\n              )\n            )\n              return false;\n          }\n          return foundTouchingPoint;\n        case \"LineString\":\n          var foundTouchingPoint = false;\n          for (var i = 0; i < geom2.coordinates.length; i++) {\n            if (!foundTouchingPoint) {\n              if (\n                booleanPointOnLine(\n                  { type: \"Point\", coordinates: geom2.coordinates[i] },\n                  { type: \"LineString\", coordinates: geom1.coordinates[0] }\n                )\n              )\n                foundTouchingPoint = true;\n            }\n            if (\n              booleanPointInPolygon(\n                { type: \"Point\", coordinates: geom2.coordinates[i] },\n                geom1,\n                { ignoreBoundary: true }\n              )\n            )\n              return false;\n          }\n          return foundTouchingPoint;\n        case \"MultiLineString\":\n          var foundTouchingPoint = false;\n          for (var i = 0; i < geom2.coordinates.length; i++) {\n            for (var ii = 0; ii < geom2.coordinates[i].length; ii++) {\n              if (!foundTouchingPoint) {\n                if (\n                  booleanPointOnLine(\n                    { type: \"Point\", coordinates: geom2.coordinates[i][ii] },\n                    { type: \"LineString\", coordinates: geom1.coordinates[0] }\n                  )\n                )\n                  foundTouchingPoint = true;\n              }\n              if (\n                booleanPointInPolygon(\n                  { type: \"Point\", coordinates: geom2.coordinates[i][ii] },\n                  geom1,\n                  { ignoreBoundary: true }\n                )\n              )\n                return false;\n            }\n          }\n          return foundTouchingPoint;\n        case \"Polygon\":\n          var foundTouchingPoint = false;\n          for (var i = 0; i < geom1.coordinates[0].length; i++) {\n            if (!foundTouchingPoint) {\n              if (\n                booleanPointOnLine(\n                  { type: \"Point\", coordinates: geom1.coordinates[0][i] },\n                  { type: \"LineString\", coordinates: geom2.coordinates[0] }\n                )\n              )\n                foundTouchingPoint = true;\n            }\n            if (\n              booleanPointInPolygon(\n                { type: \"Point\", coordinates: geom1.coordinates[0][i] },\n                geom2,\n                { ignoreBoundary: true }\n              )\n            )\n              return false;\n          }\n          return foundTouchingPoint;\n        case \"MultiPolygon\":\n          var foundTouchingPoint = false;\n          for (var i = 0; i < geom2.coordinates[0].length; i++) {\n            for (var ii = 0; ii < geom1.coordinates[0].length; ii++) {\n              if (!foundTouchingPoint) {\n                if (\n                  booleanPointOnLine(\n                    { type: \"Point\", coordinates: geom1.coordinates[0][ii] },\n                    { type: \"LineString\", coordinates: geom2.coordinates[0][i] }\n                  )\n                )\n                  foundTouchingPoint = true;\n              }\n              if (\n                booleanPointInPolygon(\n                  { type: \"Point\", coordinates: geom1.coordinates[0][ii] },\n                  { type: \"Polygon\", coordinates: geom2.coordinates[0][i] },\n                  { ignoreBoundary: true }\n                )\n              )\n                return false;\n            }\n          }\n          return foundTouchingPoint;\n        default:\n          throw new Error(\"feature2 \" + type2 + \" geometry not supported\");\n      }\n    case \"MultiPolygon\":\n      switch (type2) {\n        case \"Point\":\n          for (var i = 0; i < geom1.coordinates[0].length; i++) {\n            if (\n              booleanPointOnLine(geom2, {\n                type: \"LineString\",\n                coordinates: geom1.coordinates[0][i],\n              })\n            )\n              return true;\n          }\n          return false;\n        case \"MultiPoint\":\n          var foundTouchingPoint = false;\n          for (var i = 0; i < geom1.coordinates[0].length; i++) {\n            for (var ii = 0; ii < geom2.coordinates.length; ii++) {\n              if (!foundTouchingPoint) {\n                if (\n                  booleanPointOnLine(\n                    { type: \"Point\", coordinates: geom2.coordinates[ii] },\n                    { type: \"LineString\", coordinates: geom1.coordinates[0][i] }\n                  )\n                )\n                  foundTouchingPoint = true;\n              }\n              if (\n                booleanPointInPolygon(\n                  { type: \"Point\", coordinates: geom2.coordinates[ii] },\n                  { type: \"Polygon\", coordinates: geom1.coordinates[0][i] },\n                  { ignoreBoundary: true }\n                )\n              )\n                return false;\n            }\n          }\n          return foundTouchingPoint;\n        case \"LineString\":\n          var foundTouchingPoint = false;\n          for (var i = 0; i < geom1.coordinates[0].length; i++) {\n            for (var ii = 0; ii < geom2.coordinates.length; ii++) {\n              if (!foundTouchingPoint) {\n                if (\n                  booleanPointOnLine(\n                    { type: \"Point\", coordinates: geom2.coordinates[ii] },\n                    { type: \"LineString\", coordinates: geom1.coordinates[0][i] }\n                  )\n                )\n                  foundTouchingPoint = true;\n              }\n              if (\n                booleanPointInPolygon(\n                  { type: \"Point\", coordinates: geom2.coordinates[ii] },\n                  { type: \"Polygon\", coordinates: geom1.coordinates[0][i] },\n                  { ignoreBoundary: true }\n                )\n              )\n                return false;\n            }\n          }\n          return foundTouchingPoint;\n        case \"MultiLineString\":\n          var foundTouchingPoint = false;\n          for (var i = 0; i < geom1.coordinates.length; i++) {\n            for (var ii = 0; ii < geom2.coordinates.length; ii++) {\n              for (var iii = 0; iii < geom2.coordinates[ii].length; iii++) {\n                if (!foundTouchingPoint) {\n                  if (\n                    booleanPointOnLine(\n                      {\n                        type: \"Point\",\n                        coordinates: geom2.coordinates[ii][iii],\n                      },\n                      {\n                        type: \"LineString\",\n                        coordinates: geom1.coordinates[i][0],\n                      }\n                    )\n                  )\n                    foundTouchingPoint = true;\n                }\n                if (\n                  booleanPointInPolygon(\n                    { type: \"Point\", coordinates: geom2.coordinates[ii][iii] },\n                    { type: \"Polygon\", coordinates: [geom1.coordinates[i][0]] },\n                    { ignoreBoundary: true }\n                  )\n                )\n                  return false;\n              }\n            }\n          }\n\n          return foundTouchingPoint;\n        case \"Polygon\":\n          var foundTouchingPoint = false;\n          for (var i = 0; i < geom1.coordinates[0].length; i++) {\n            for (var ii = 0; ii < geom1.coordinates[0][i].length; ii++) {\n              if (!foundTouchingPoint) {\n                if (\n                  booleanPointOnLine(\n                    { type: \"Point\", coordinates: geom1.coordinates[0][i][ii] },\n                    { type: \"LineString\", coordinates: geom2.coordinates[0] }\n                  )\n                )\n                  foundTouchingPoint = true;\n              }\n              if (\n                booleanPointInPolygon(\n                  { type: \"Point\", coordinates: geom1.coordinates[0][i][ii] },\n                  geom2,\n                  { ignoreBoundary: true }\n                )\n              )\n                return false;\n            }\n          }\n          return foundTouchingPoint;\n        case \"MultiPolygon\":\n          var foundTouchingPoint = false;\n          for (var i = 0; i < geom1.coordinates[0].length; i++) {\n            for (var ii = 0; ii < geom2.coordinates[0].length; ii++) {\n              for (var iii = 0; iii < geom1.coordinates[0].length; iii++) {\n                if (!foundTouchingPoint) {\n                  if (\n                    booleanPointOnLine(\n                      {\n                        type: \"Point\",\n                        coordinates: geom1.coordinates[0][i][iii],\n                      },\n                      {\n                        type: \"LineString\",\n                        coordinates: geom2.coordinates[0][ii],\n                      }\n                    )\n                  )\n                    foundTouchingPoint = true;\n                }\n                if (\n                  booleanPointInPolygon(\n                    {\n                      type: \"Point\",\n                      coordinates: geom1.coordinates[0][i][iii],\n                    },\n                    { type: \"Polygon\", coordinates: geom2.coordinates[0][ii] },\n                    { ignoreBoundary: true }\n                  )\n                )\n                  return false;\n              }\n            }\n          }\n          return foundTouchingPoint;\n        default:\n          throw new Error(\"feature2 \" + type2 + \" geometry not supported\");\n      }\n    default:\n      throw new Error(\"feature1 \" + type1 + \" geometry not supported\");\n  }\n}\n\nfunction isPointOnLineEnd(point: Point, line: LineString) {\n  if (compareCoords(line.coordinates[0], point.coordinates)) return true;\n  if (\n    compareCoords(\n      line.coordinates[line.coordinates.length - 1],\n      point.coordinates\n    )\n  )\n    return true;\n  return false;\n}\n\n/**\n * compareCoords\n *\n * @private\n * @param {Position} pair1 point [x,y]\n * @param {Position} pair2 point [x,y]\n * @returns {boolean} true/false if coord pairs match\n */\nfunction compareCoords(pair1: number[], pair2: number[]) {\n  return pair1[0] === pair2[0] && pair1[1] === pair2[1];\n}\n\nexport { booleanTouches };\nexport default booleanTouches;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}