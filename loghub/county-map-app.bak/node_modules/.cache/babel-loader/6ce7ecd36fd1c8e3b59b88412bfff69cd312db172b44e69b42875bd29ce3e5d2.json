{"ast":null,"code":"// index.ts\nimport pip from \"point-in-polygon-hao\";\nimport { getCoord, getGeom } from \"@turf/invariant\";\nfunction booleanPointInPolygon(point, polygon, options = {}) {\n  if (!point) {\n    throw new Error(\"point is required\");\n  }\n  if (!polygon) {\n    throw new Error(\"polygon is required\");\n  }\n  const pt = getCoord(point);\n  const geom = getGeom(polygon);\n  const type = geom.type;\n  const bbox = polygon.bbox;\n  let polys = geom.coordinates;\n  if (bbox && inBBox(pt, bbox) === false) {\n    return false;\n  }\n  if (type === \"Polygon\") {\n    polys = [polys];\n  }\n  let result = false;\n  for (var i = 0; i < polys.length; ++i) {\n    const polyResult = pip(pt, polys[i]);\n    if (polyResult === 0) return options.ignoreBoundary ? false : true;else if (polyResult) result = true;\n  }\n  return result;\n}\nfunction inBBox(pt, bbox) {\n  return bbox[0] <= pt[0] && bbox[1] <= pt[1] && bbox[2] >= pt[0] && bbox[3] >= pt[1];\n}\nvar turf_boolean_point_in_polygon_default = booleanPointInPolygon;\nexport { booleanPointInPolygon, turf_boolean_point_in_polygon_default as default };","map":{"version":3,"names":["pip","getCoord","getGeom","booleanPointInPolygon","point","polygon","options","Error","pt","geom","type","bbox","polys","coordinates","inBBox","result","i","length","polyResult","ignoreBoundary","turf_boolean_point_in_polygon_default"],"sources":["/Users/yairtitelboim/Documents/Kernel/ALLAPPS/LOGhub/loghub/county-map-app/node_modules/@turf/boolean-point-in-polygon/index.ts"],"sourcesContent":["import pip from \"point-in-polygon-hao\";\nimport {\n  BBox,\n  Feature,\n  MultiPolygon,\n  Polygon,\n  GeoJsonProperties,\n} from \"geojson\";\nimport { Coord } from \"@turf/helpers\";\nimport { getCoord, getGeom } from \"@turf/invariant\";\n\n// http://en.wikipedia.org/wiki/Even%E2%80%93odd_rule\n// modified from: https://github.com/substack/point-in-polygon/blob/master/index.js\n// which was modified from http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html\n/**\n * Takes a {@link Point} and a {@link Polygon} or {@link MultiPolygon} and determines if the point\n * resides inside the polygon. The polygon can be convex or concave. The function accounts for holes.\n *\n * @function\n * @param {Coord} point input point\n * @param {Feature<Polygon|MultiPolygon>} polygon input polygon or multipolygon\n * @param {Object} [options={}] Optional parameters\n * @param {boolean} [options.ignoreBoundary=false] True if polygon boundary should be ignored when determining if\n * the point is inside the polygon otherwise false.\n * @returns {boolean} `true` if the Point is inside the Polygon; `false` if the Point is not inside the Polygon\n * @example\n * var pt = turf.point([-77, 44]);\n * var poly = turf.polygon([[\n *   [-81, 41],\n *   [-81, 47],\n *   [-72, 47],\n *   [-72, 41],\n *   [-81, 41]\n * ]]);\n *\n * turf.booleanPointInPolygon(pt, poly);\n * //= true\n */\nfunction booleanPointInPolygon<\n  G extends Polygon | MultiPolygon,\n  P extends GeoJsonProperties = GeoJsonProperties,\n>(\n  point: Coord,\n  polygon: Feature<G, P> | G,\n  options: {\n    ignoreBoundary?: boolean;\n  } = {}\n) {\n  // validation\n  if (!point) {\n    throw new Error(\"point is required\");\n  }\n  if (!polygon) {\n    throw new Error(\"polygon is required\");\n  }\n\n  const pt = getCoord(point);\n  const geom = getGeom(polygon);\n  const type = geom.type;\n  const bbox = polygon.bbox;\n  let polys: any[] = geom.coordinates;\n\n  // Quick elimination if point is not inside bbox\n  if (bbox && inBBox(pt, bbox) === false) {\n    return false;\n  }\n\n  if (type === \"Polygon\") {\n    polys = [polys];\n  }\n  let result = false;\n  for (var i = 0; i < polys.length; ++i) {\n    const polyResult = pip(pt, polys[i]);\n    if (polyResult === 0) return options.ignoreBoundary ? false : true;\n    else if (polyResult) result = true;\n  }\n\n  return result;\n}\n\n/**\n * inBBox\n *\n * @private\n * @param {Position} pt point [x,y]\n * @param {BBox} bbox BBox [west, south, east, north]\n * @returns {boolean} true/false if point is inside BBox\n */\nfunction inBBox(pt: number[], bbox: BBox) {\n  return (\n    bbox[0] <= pt[0] && bbox[1] <= pt[1] && bbox[2] >= pt[0] && bbox[3] >= pt[1]\n  );\n}\n\nexport { booleanPointInPolygon };\nexport default booleanPointInPolygon;\n"],"mappings":";AAAA,OAAOA,GAAA,MAAS;AAShB,SAASC,QAAA,EAAUC,OAAA,QAAe;AA6BlC,SAASC,sBAIPC,KAAA,EACAC,OAAA,EACAC,OAAA,GAEI,CAAC,GACL;EAEA,IAAI,CAACF,KAAA,EAAO;IACV,MAAM,IAAIG,KAAA,CAAM,mBAAmB;EACrC;EACA,IAAI,CAACF,OAAA,EAAS;IACZ,MAAM,IAAIE,KAAA,CAAM,qBAAqB;EACvC;EAEA,MAAMC,EAAA,GAAKP,QAAA,CAASG,KAAK;EACzB,MAAMK,IAAA,GAAOP,OAAA,CAAQG,OAAO;EAC5B,MAAMK,IAAA,GAAOD,IAAA,CAAKC,IAAA;EAClB,MAAMC,IAAA,GAAON,OAAA,CAAQM,IAAA;EACrB,IAAIC,KAAA,GAAeH,IAAA,CAAKI,WAAA;EAGxB,IAAIF,IAAA,IAAQG,MAAA,CAAON,EAAA,EAAIG,IAAI,MAAM,OAAO;IACtC,OAAO;EACT;EAEA,IAAID,IAAA,KAAS,WAAW;IACtBE,KAAA,GAAQ,CAACA,KAAK;EAChB;EACA,IAAIG,MAAA,GAAS;EACb,SAASC,CAAA,GAAI,GAAGA,CAAA,GAAIJ,KAAA,CAAMK,MAAA,EAAQ,EAAED,CAAA,EAAG;IACrC,MAAME,UAAA,GAAalB,GAAA,CAAIQ,EAAA,EAAII,KAAA,CAAMI,CAAC,CAAC;IACnC,IAAIE,UAAA,KAAe,GAAG,OAAOZ,OAAA,CAAQa,cAAA,GAAiB,QAAQ,cACrDD,UAAA,EAAYH,MAAA,GAAS;EAChC;EAEA,OAAOA,MAAA;AACT;AAUA,SAASD,OAAON,EAAA,EAAcG,IAAA,EAAY;EACxC,OACEA,IAAA,CAAK,CAAC,KAAKH,EAAA,CAAG,CAAC,KAAKG,IAAA,CAAK,CAAC,KAAKH,EAAA,CAAG,CAAC,KAAKG,IAAA,CAAK,CAAC,KAAKH,EAAA,CAAG,CAAC,KAAKG,IAAA,CAAK,CAAC,KAAKH,EAAA,CAAG,CAAC;AAE/E;AAGA,IAAOY,qCAAA,GAAQjB,qBAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}