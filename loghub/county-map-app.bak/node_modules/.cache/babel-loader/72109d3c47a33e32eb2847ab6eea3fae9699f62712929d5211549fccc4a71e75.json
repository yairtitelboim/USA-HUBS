{"ast":null,"code":"// index.ts\nimport { coordEach, featureEach } from \"@turf/meta\";\nimport { point, featureCollection } from \"@turf/helpers\";\nfunction explode(geojson) {\n  const points = [];\n  if (geojson.type === \"FeatureCollection\") {\n    featureEach(geojson, function (feature) {\n      coordEach(feature, function (coord) {\n        points.push(point(coord, feature.properties));\n      });\n    });\n  } else if (geojson.type === \"Feature\") {\n    coordEach(geojson, function (coord) {\n      points.push(point(coord, geojson.properties));\n    });\n  } else {\n    coordEach(geojson, function (coord) {\n      points.push(point(coord));\n    });\n  }\n  return featureCollection(points);\n}\nvar turf_explode_default = explode;\nexport { turf_explode_default as default, explode };","map":{"version":3,"names":["coordEach","featureEach","point","featureCollection","explode","geojson","points","type","feature","coord","push","properties","turf_explode_default"],"sources":["/Users/yairtitelboim/Documents/Kernel/ALLAPPS/LOGhub/loghub/county-map-app/node_modules/@turf/explode/index.ts"],"sourcesContent":["import { coordEach, featureEach } from \"@turf/meta\";\nimport { point, featureCollection } from \"@turf/helpers\";\nimport type { AllGeoJSON } from \"@turf/helpers\";\nimport type { Feature, FeatureCollection, Point } from \"geojson\";\n\n/**\n * Takes a feature or set of features and returns all positions as {@link Point|points}.\n *\n * @function\n * @param {GeoJSON} geojson input features\n * @returns {FeatureCollection<point>} points representing the exploded input features\n * @throws {Error} if it encounters an unknown geometry type\n * @example\n * var polygon = turf.polygon([[[-81, 41], [-88, 36], [-84, 31], [-80, 33], [-77, 39], [-81, 41]]]);\n *\n * var explode = turf.explode(polygon);\n *\n * //addToMap\n * var addToMap = [polygon, explode]\n */\nfunction explode(geojson: AllGeoJSON): FeatureCollection<Point> {\n  const points: Feature<Point>[] = [];\n  if (geojson.type === \"FeatureCollection\") {\n    featureEach(geojson, function (feature) {\n      coordEach(feature, function (coord) {\n        points.push(point(coord, feature.properties));\n      });\n    });\n  } else if (geojson.type === \"Feature\") {\n    coordEach(geojson, function (coord) {\n      points.push(point(coord, geojson.properties));\n    });\n  } else {\n    // No properties to copy.\n    coordEach(geojson, function (coord) {\n      points.push(point(coord));\n    });\n  }\n\n  return featureCollection(points);\n}\n\nexport { explode };\nexport default explode;\n"],"mappings":";AAAA,SAASA,SAAA,EAAWC,WAAA,QAAmB;AACvC,SAASC,KAAA,EAAOC,iBAAA,QAAyB;AAmBzC,SAASC,QAAQC,OAAA,EAA+C;EAC9D,MAAMC,MAAA,GAA2B,EAAC;EAClC,IAAID,OAAA,CAAQE,IAAA,KAAS,qBAAqB;IACxCN,WAAA,CAAYI,OAAA,EAAS,UAAUG,OAAA,EAAS;MACtCR,SAAA,CAAUQ,OAAA,EAAS,UAAUC,KAAA,EAAO;QAClCH,MAAA,CAAOI,IAAA,CAAKR,KAAA,CAAMO,KAAA,EAAOD,OAAA,CAAQG,UAAU,CAAC;MAC9C,CAAC;IACH,CAAC;EACH,WAAWN,OAAA,CAAQE,IAAA,KAAS,WAAW;IACrCP,SAAA,CAAUK,OAAA,EAAS,UAAUI,KAAA,EAAO;MAClCH,MAAA,CAAOI,IAAA,CAAKR,KAAA,CAAMO,KAAA,EAAOJ,OAAA,CAAQM,UAAU,CAAC;IAC9C,CAAC;EACH,OAAO;IAELX,SAAA,CAAUK,OAAA,EAAS,UAAUI,KAAA,EAAO;MAClCH,MAAA,CAAOI,IAAA,CAAKR,KAAA,CAAMO,KAAK,CAAC;IAC1B,CAAC;EACH;EAEA,OAAON,iBAAA,CAAkBG,MAAM;AACjC;AAGA,IAAOM,oBAAA,GAAQR,OAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}