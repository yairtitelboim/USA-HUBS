{"ast":null,"code":"// index.ts\nimport { clone } from \"@turf/clone\";\nimport { center } from \"@turf/center\";\nimport { centroid } from \"@turf/centroid\";\nimport { bbox as turfBBox } from \"@turf/bbox\";\nimport { rhumbBearing } from \"@turf/rhumb-bearing\";\nimport { rhumbDistance } from \"@turf/rhumb-distance\";\nimport { rhumbDestination } from \"@turf/rhumb-destination\";\nimport { coordEach, featureEach } from \"@turf/meta\";\nimport { point, isObject } from \"@turf/helpers\";\nimport { getCoord, getCoords, getType } from \"@turf/invariant\";\nfunction transformScale(geojson, factor, options) {\n  options = options || {};\n  if (!isObject(options)) throw new Error(\"options is invalid\");\n  const origin = options.origin || \"centroid\";\n  const mutate = options.mutate || false;\n  if (!geojson) throw new Error(\"geojson required\");\n  if (typeof factor !== \"number\" || factor <= 0) throw new Error(\"invalid factor\");\n  const originIsPoint = Array.isArray(origin) || typeof origin === \"object\";\n  if (mutate !== true) geojson = clone(geojson);\n  if (geojson.type === \"FeatureCollection\" && !originIsPoint) {\n    featureEach(geojson, function (feature, index) {\n      geojson.features[index] = scale(feature, factor, origin);\n    });\n    return geojson;\n  }\n  return scale(geojson, factor, origin);\n}\nfunction scale(feature, factor, origin) {\n  const isPoint = getType(feature) === \"Point\";\n  const originCoord = defineOrigin(feature, origin);\n  if (factor === 1 || isPoint) return feature;\n  coordEach(feature, function (coord) {\n    const originalDistance = rhumbDistance(originCoord, coord);\n    const bearing = rhumbBearing(originCoord, coord);\n    const newDistance = originalDistance * factor;\n    const newCoord = getCoords(rhumbDestination(originCoord, newDistance, bearing));\n    coord[0] = newCoord[0];\n    coord[1] = newCoord[1];\n    if (coord.length === 3) coord[2] *= factor;\n  });\n  delete feature.bbox;\n  return feature;\n}\nfunction defineOrigin(geojson, origin) {\n  if (origin === void 0 || origin === null) origin = \"centroid\";\n  if (Array.isArray(origin) || typeof origin === \"object\") return getCoord(origin);\n  const bbox = geojson.bbox ? geojson.bbox : turfBBox(geojson, {\n    recompute: true\n  });\n  const west = bbox[0];\n  const south = bbox[1];\n  const east = bbox[2];\n  const north = bbox[3];\n  switch (origin) {\n    case \"sw\":\n    // @ts-expect-error undocumented, to be removed for v8 #techdebt\n    case \"southwest\":\n    // @ts-expect-error undocumented, to be removed for v8 #techdebt\n    case \"westsouth\":\n    // @ts-expect-error undocumented, to be removed for v8 #techdebt\n    case \"bottomleft\":\n      return point([west, south]);\n    case \"se\":\n    // @ts-expect-error undocumented, to be removed for v8 #techdebt\n    case \"southeast\":\n    // @ts-expect-error undocumented, to be removed for v8 #techdebt\n    case \"eastsouth\":\n    // @ts-expect-error undocumented, to be removed for v8 #techdebt\n    case \"bottomright\":\n      return point([east, south]);\n    case \"nw\":\n    // @ts-expect-error undocumented, to be removed for v8 #techdebt\n    case \"northwest\":\n    // @ts-expect-error undocumented, to be removed for v8 #techdebt\n    case \"westnorth\":\n    // @ts-expect-error undocumented, to be removed for v8 #techdebt\n    case \"topleft\":\n      return point([west, north]);\n    case \"ne\":\n    // @ts-expect-error undocumented, to be removed for v8 #techdebt\n    case \"northeast\":\n    // @ts-expect-error undocumented, to be removed for v8 #techdebt\n    case \"eastnorth\":\n    // @ts-expect-error undocumented, to be removed for v8 #techdebt\n    case \"topright\":\n      return point([east, north]);\n    case \"center\":\n      return center(geojson);\n    case void 0:\n    case null:\n    case \"centroid\":\n      return centroid(geojson);\n    default:\n      throw new Error(\"invalid origin\");\n  }\n}\nvar turf_transform_scale_default = transformScale;\nexport { turf_transform_scale_default as default, transformScale };","map":{"version":3,"names":["clone","center","centroid","bbox","turfBBox","rhumbBearing","rhumbDistance","rhumbDestination","coordEach","featureEach","point","isObject","getCoord","getCoords","getType","transformScale","geojson","factor","options","Error","origin","mutate","originIsPoint","Array","isArray","type","feature","index","features","scale","isPoint","originCoord","defineOrigin","coord","originalDistance","bearing","newDistance","newCoord","length","recompute","west","south","east","north","turf_transform_scale_default"],"sources":["/Users/yairtitelboim/Documents/Kernel/ALLAPPS/LOGhub/loghub/county-map-app/node_modules/@turf/transform-scale/index.ts"],"sourcesContent":["import { Corners, Coord } from \"@turf/helpers\";\nimport { FeatureCollection, GeoJSON, GeometryCollection } from \"geojson\";\nimport { clone } from \"@turf/clone\";\nimport { center } from \"@turf/center\";\nimport { centroid } from \"@turf/centroid\";\nimport { bbox as turfBBox } from \"@turf/bbox\";\nimport { rhumbBearing } from \"@turf/rhumb-bearing\";\nimport { rhumbDistance } from \"@turf/rhumb-distance\";\nimport { rhumbDestination } from \"@turf/rhumb-destination\";\nimport { coordEach, featureEach } from \"@turf/meta\";\nimport { point, isObject } from \"@turf/helpers\";\nimport { getCoord, getCoords, getType } from \"@turf/invariant\";\n\n/**\n * Scale GeoJSON objects from a given point by a scaling factor e.g. factor=2\n * would make each object 200% larger.\n * If a FeatureCollection is provided, the origin point will be calculated\n * based on each individual feature _unless_ an exact\n *\n * @function\n * @param {GeoJSON|GeometryCollection} geojson objects to be scaled\n * @param {number} factor of scaling, positive values greater than 0. Numbers between 0 and 1 will shrink the geojson, numbers greater than 1 will expand it, a factor of 1 will not change the geojson.\n * @param {Object} [options={}] Optional parameters\n * @param {Corners|Coord} [options.origin='centroid'] Point from which the scaling will occur (string options: sw/se/nw/ne/center/centroid)\n * @param {boolean} [options.mutate=false] allows GeoJSON input to be mutated (significant performance improvement if true)\n * @returns {GeoJSON|GeometryCollection} scaled GeoJSON\n * @example\n * const poly = turf.polygon([[[0,29],[3.5,29],[2.5,32],[0,29]]]);\n * const scaledPoly = turf.transformScale(poly, 3);\n *\n * //addToMap\n * const addToMap = [poly, scaledPoly];\n * scaledPoly.properties = {stroke: '#F00', 'stroke-width': 4};\n */\nfunction transformScale<T extends GeoJSON | GeometryCollection>(\n  geojson: T,\n  factor: number,\n  options?: {\n    origin?: Corners | Coord;\n    mutate?: boolean;\n  }\n): T {\n  // Optional parameters\n  options = options || {};\n  if (!isObject(options)) throw new Error(\"options is invalid\");\n  const origin = options.origin || \"centroid\";\n  const mutate = options.mutate || false;\n\n  // Input validation\n  if (!geojson) throw new Error(\"geojson required\");\n  if (typeof factor !== \"number\" || factor <= 0)\n    throw new Error(\"invalid factor\");\n  const originIsPoint = Array.isArray(origin) || typeof origin === \"object\";\n\n  // Clone geojson to avoid side effects\n  if (mutate !== true) geojson = clone(geojson);\n\n  // Scale each Feature separately if a feature collection AND the user didn't\n  // pass a single explicit point to scale the whole collection from.\n  if (geojson.type === \"FeatureCollection\" && !originIsPoint) {\n    featureEach(geojson, function (feature, index) {\n      // The type guard above is not recognised in the callback so we have to\n      // cast to accept responsibility.\n      (geojson as FeatureCollection).features[index] = scale(\n        feature,\n        factor,\n        origin\n      );\n    });\n    return geojson;\n  }\n  // Scale Feature/Geometry\n  return scale(geojson, factor, origin);\n}\n\n/**\n * Scale Feature/Geometry\n *\n * @private\n * @param {GeoJSON|GeometryCollection} feature feature or geometry collection to scale\n * @param {number} factor of scaling, positive or negative values greater than 0\n * @param {Corners|Coord} [origin=\"centroid\"] Point from which the scaling will occur (string options: sw/se/nw/ne/center/centroid)\n * @returns {GeoJSON|GeometryCollection} scaled GeoJSON Feature/Geometry\n */\nfunction scale<T extends GeoJSON | GeometryCollection>(\n  feature: T,\n  factor: number,\n  origin: Corners | Coord\n): T {\n  // Default params\n  const isPoint = getType(feature) === \"Point\";\n  // Work with a Coord equivalent of the origin from here on.\n  const originCoord: Coord = defineOrigin(feature, origin);\n\n  // Shortcut no-scaling\n  if (factor === 1 || isPoint) return feature;\n\n  // Scale each coordinate\n  coordEach(feature, function (coord) {\n    const originalDistance = rhumbDistance(originCoord, coord);\n    const bearing = rhumbBearing(originCoord, coord);\n    const newDistance = originalDistance * factor;\n    const newCoord = getCoords(\n      rhumbDestination(originCoord, newDistance, bearing)\n    );\n    coord[0] = newCoord[0];\n    coord[1] = newCoord[1];\n    if (coord.length === 3) coord[2] *= factor;\n  });\n\n  delete feature.bbox;\n\n  return feature;\n}\n\n/**\n * Define Origin\n *\n * @private\n * @param {GeoJSON|GeometryCollection} geojson GeoJSON\n * @param {Corners|Coord} origin sw/se/nw/ne/center/centroid\n * @returns {Feature<Point>} Point origin\n */\nfunction defineOrigin(\n  geojson: GeoJSON | GeometryCollection,\n  origin: Corners | Coord\n): Coord {\n  // Default params\n  if (origin === undefined || origin === null) origin = \"centroid\";\n\n  // Input Coord\n  if (Array.isArray(origin) || typeof origin === \"object\")\n    return getCoord(origin);\n\n  // Define BBox\n  const bbox = geojson.bbox\n    ? geojson.bbox\n    : turfBBox(geojson, { recompute: true });\n  const west = bbox[0];\n  const south = bbox[1];\n  const east = bbox[2];\n  const north = bbox[3];\n\n  // Having to disable eslint below for lines which fail the no-fallthrough\n  // rule, though only because of the ts-expect-error rules. Once we remove\n  // southeast, bottomright, rightbottom, etc we should be able to remove all\n  // these supressions.\n  /* eslint-disable no-fallthrough */\n  switch (origin) {\n    case \"sw\":\n    // @ts-expect-error undocumented, to be removed for v8 #techdebt\n    case \"southwest\":\n    // @ts-expect-error undocumented, to be removed for v8 #techdebt\n    case \"westsouth\":\n    // @ts-expect-error undocumented, to be removed for v8 #techdebt\n    case \"bottomleft\":\n      return point([west, south]);\n    case \"se\":\n    // @ts-expect-error undocumented, to be removed for v8 #techdebt\n    case \"southeast\":\n    // @ts-expect-error undocumented, to be removed for v8 #techdebt\n    case \"eastsouth\":\n    // @ts-expect-error undocumented, to be removed for v8 #techdebt\n    case \"bottomright\":\n      return point([east, south]);\n    case \"nw\":\n    // @ts-expect-error undocumented, to be removed for v8 #techdebt\n    case \"northwest\":\n    // @ts-expect-error undocumented, to be removed for v8 #techdebt\n    case \"westnorth\":\n    // @ts-expect-error undocumented, to be removed for v8 #techdebt\n    case \"topleft\":\n      return point([west, north]);\n    case \"ne\":\n    // @ts-expect-error undocumented, to be removed for v8 #techdebt\n    case \"northeast\":\n    // @ts-expect-error undocumented, to be removed for v8 #techdebt\n    case \"eastnorth\":\n    // @ts-expect-error undocumented, to be removed for v8 #techdebt\n    case \"topright\":\n      return point([east, north]);\n    case \"center\":\n      return center(geojson);\n    case undefined:\n    case null:\n    case \"centroid\":\n      return centroid(geojson);\n    default:\n      throw new Error(\"invalid origin\");\n  }\n  /* eslint-enable no-fallthrough */\n}\n\nexport { transformScale };\nexport default transformScale;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}