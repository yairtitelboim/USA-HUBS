{"ast":null,"code":"// index.ts\nimport { getGeom } from \"@turf/invariant\";\nimport { polygon, lineString } from \"@turf/helpers\";\nimport { booleanDisjoint } from \"@turf/boolean-disjoint\";\nimport { booleanCrosses } from \"@turf/boolean-crosses\";\nimport { lineIntersect } from \"@turf/line-intersect\";\nimport { booleanPointOnLine as isPointOnLine } from \"@turf/boolean-point-on-line\";\nfunction booleanValid(feature) {\n  if (!feature.type) return false;\n  const geom = getGeom(feature);\n  const type = geom.type;\n  const coords = geom.coordinates;\n  switch (type) {\n    case \"Point\":\n      return coords.length > 1;\n    case \"MultiPoint\":\n      for (var i = 0; i < coords.length; i++) {\n        if (coords[i].length < 2) return false;\n      }\n      return true;\n    case \"LineString\":\n      if (coords.length < 2) return false;\n      for (var i = 0; i < coords.length; i++) {\n        if (coords[i].length < 2) return false;\n      }\n      return true;\n    case \"MultiLineString\":\n      if (coords.length < 2) return false;\n      for (var i = 0; i < coords.length; i++) {\n        if (coords[i].length < 2) return false;\n      }\n      return true;\n    case \"Polygon\":\n      for (var i = 0; i < geom.coordinates.length; i++) {\n        if (coords[i].length < 4) return false;\n        if (!checkRingsClose(coords[i])) return false;\n        if (checkRingsForSpikesPunctures(coords[i])) return false;\n        if (i > 0) {\n          if (lineIntersect(polygon([coords[0]]), polygon([coords[i]])).features.length > 1) return false;\n        }\n      }\n      return true;\n    case \"MultiPolygon\":\n      for (var i = 0; i < geom.coordinates.length; i++) {\n        var poly = geom.coordinates[i];\n        for (var ii = 0; ii < poly.length; ii++) {\n          if (poly[ii].length < 4) return false;\n          if (!checkRingsClose(poly[ii])) return false;\n          if (checkRingsForSpikesPunctures(poly[ii])) return false;\n          if (ii === 0) {\n            if (!checkPolygonAgainstOthers(poly, geom.coordinates, i)) return false;\n          }\n          if (ii > 0) {\n            if (lineIntersect(polygon([poly[0]]), polygon([poly[ii]])).features.length > 1) return false;\n          }\n        }\n      }\n      return true;\n    default:\n      return false;\n  }\n}\nfunction checkRingsClose(geom) {\n  return geom[0][0] === geom[geom.length - 1][0] && geom[0][1] === geom[geom.length - 1][1];\n}\nfunction checkRingsForSpikesPunctures(geom) {\n  for (var i = 0; i < geom.length - 1; i++) {\n    var point = geom[i];\n    for (var ii = i + 1; ii < geom.length - 2; ii++) {\n      var seg = [geom[ii], geom[ii + 1]];\n      if (isPointOnLine(point, lineString(seg))) return true;\n    }\n  }\n  return false;\n}\nfunction checkPolygonAgainstOthers(poly, geom, index) {\n  var polyToCheck = polygon(poly);\n  for (var i = index + 1; i < geom.length; i++) {\n    if (!booleanDisjoint(polyToCheck, polygon(geom[i]))) {\n      if (booleanCrosses(polyToCheck, lineString(geom[i][0]))) return false;\n    }\n  }\n  return true;\n}\nvar turf_boolean_valid_default = booleanValid;\nexport { booleanValid, turf_boolean_valid_default as default };","map":{"version":3,"names":["getGeom","polygon","lineString","booleanDisjoint","booleanCrosses","lineIntersect","booleanPointOnLine","isPointOnLine","booleanValid","feature","type","geom","coords","coordinates","length","i","checkRingsClose","checkRingsForSpikesPunctures","features","poly","ii","checkPolygonAgainstOthers","point","seg","index","polyToCheck","turf_boolean_valid_default"],"sources":["/Users/yairtitelboim/Documents/Kernel/ALLAPPS/LOGhub/loghub/county-map-app/node_modules/@turf/boolean-valid/index.ts"],"sourcesContent":["import { Feature, Geometry, Position } from \"geojson\";\nimport { getGeom } from \"@turf/invariant\";\nimport { polygon, lineString } from \"@turf/helpers\";\nimport { booleanDisjoint } from \"@turf/boolean-disjoint\";\nimport { booleanCrosses } from \"@turf/boolean-crosses\";\nimport { lineIntersect } from \"@turf/line-intersect\";\nimport { booleanPointOnLine as isPointOnLine } from \"@turf/boolean-point-on-line\";\n\n/**\n * booleanValid checks if the geometry is a valid according to the OGC Simple Feature Specification.\n *\n * @function\n * @param {Geometry|Feature<any>} feature GeoJSON Feature or Geometry\n * @returns {boolean} true/false\n * @example\n * var line = turf.lineString([[1, 1], [1, 2], [1, 3], [1, 4]]);\n *\n * turf.booleanValid(line); // => true\n * turf.booleanValid({foo: \"bar\"}); // => false\n */\nfunction booleanValid(feature: Feature<any> | Geometry) {\n  // Automatic False\n  if (!feature.type) return false;\n\n  // Parse GeoJSON\n  const geom = getGeom(feature);\n  const type = geom.type;\n  const coords = geom.coordinates;\n\n  switch (type) {\n    case \"Point\":\n      return coords.length > 1;\n    case \"MultiPoint\":\n      for (var i = 0; i < coords.length; i++) {\n        if (coords[i].length < 2) return false;\n      }\n      return true;\n    case \"LineString\":\n      if (coords.length < 2) return false;\n      for (var i = 0; i < coords.length; i++) {\n        if (coords[i].length < 2) return false;\n      }\n      return true;\n    case \"MultiLineString\":\n      if (coords.length < 2) return false;\n      for (var i = 0; i < coords.length; i++) {\n        if (coords[i].length < 2) return false;\n      }\n      return true;\n    case \"Polygon\":\n      for (var i = 0; i < geom.coordinates.length; i++) {\n        if (coords[i].length < 4) return false;\n        if (!checkRingsClose(coords[i])) return false;\n        if (checkRingsForSpikesPunctures(coords[i])) return false;\n        if (i > 0) {\n          if (\n            lineIntersect(polygon([coords[0]]), polygon([coords[i]])).features\n              .length > 1\n          )\n            return false;\n        }\n      }\n      return true;\n    case \"MultiPolygon\":\n      for (var i = 0; i < geom.coordinates.length; i++) {\n        var poly: any = geom.coordinates[i];\n\n        for (var ii = 0; ii < poly.length; ii++) {\n          if (poly[ii].length < 4) return false;\n          if (!checkRingsClose(poly[ii])) return false;\n          if (checkRingsForSpikesPunctures(poly[ii])) return false;\n          if (ii === 0) {\n            if (!checkPolygonAgainstOthers(poly, geom.coordinates, i))\n              return false;\n          }\n          if (ii > 0) {\n            if (\n              lineIntersect(polygon([poly[0]]), polygon([poly[ii]])).features\n                .length > 1\n            )\n              return false;\n          }\n        }\n      }\n      return true;\n    default:\n      return false;\n  }\n}\n\nfunction checkRingsClose(geom: Position[]) {\n  return (\n    geom[0][0] === geom[geom.length - 1][0] &&\n    geom[0][1] === geom[geom.length - 1][1]\n  );\n}\n\nfunction checkRingsForSpikesPunctures(geom: Position[]) {\n  for (var i = 0; i < geom.length - 1; i++) {\n    var point = geom[i];\n    for (var ii = i + 1; ii < geom.length - 2; ii++) {\n      var seg = [geom[ii], geom[ii + 1]];\n      if (isPointOnLine(point, lineString(seg))) return true;\n    }\n  }\n  return false;\n}\n\nfunction checkPolygonAgainstOthers(\n  poly: Position[][],\n  geom: Position[][][],\n  index: number\n) {\n  var polyToCheck = polygon(poly);\n  for (var i = index + 1; i < geom.length; i++) {\n    if (!booleanDisjoint(polyToCheck, polygon(geom[i]))) {\n      if (booleanCrosses(polyToCheck, lineString(geom[i][0]))) return false;\n    }\n  }\n  return true;\n}\n\nexport { booleanValid };\nexport default booleanValid;\n"],"mappings":";AACA,SAASA,OAAA,QAAe;AACxB,SAASC,OAAA,EAASC,UAAA,QAAkB;AACpC,SAASC,eAAA,QAAuB;AAChC,SAASC,cAAA,QAAsB;AAC/B,SAASC,aAAA,QAAqB;AAC9B,SAASC,kBAAA,IAAsBC,aAAA,QAAqB;AAcpD,SAASC,aAAaC,OAAA,EAAkC;EAEtD,IAAI,CAACA,OAAA,CAAQC,IAAA,EAAM,OAAO;EAG1B,MAAMC,IAAA,GAAOX,OAAA,CAAQS,OAAO;EAC5B,MAAMC,IAAA,GAAOC,IAAA,CAAKD,IAAA;EAClB,MAAME,MAAA,GAASD,IAAA,CAAKE,WAAA;EAEpB,QAAQH,IAAA;IACN,KAAK;MACH,OAAOE,MAAA,CAAOE,MAAA,GAAS;IACzB,KAAK;MACH,SAASC,CAAA,GAAI,GAAGA,CAAA,GAAIH,MAAA,CAAOE,MAAA,EAAQC,CAAA,IAAK;QACtC,IAAIH,MAAA,CAAOG,CAAC,EAAED,MAAA,GAAS,GAAG,OAAO;MACnC;MACA,OAAO;IACT,KAAK;MACH,IAAIF,MAAA,CAAOE,MAAA,GAAS,GAAG,OAAO;MAC9B,SAASC,CAAA,GAAI,GAAGA,CAAA,GAAIH,MAAA,CAAOE,MAAA,EAAQC,CAAA,IAAK;QACtC,IAAIH,MAAA,CAAOG,CAAC,EAAED,MAAA,GAAS,GAAG,OAAO;MACnC;MACA,OAAO;IACT,KAAK;MACH,IAAIF,MAAA,CAAOE,MAAA,GAAS,GAAG,OAAO;MAC9B,SAASC,CAAA,GAAI,GAAGA,CAAA,GAAIH,MAAA,CAAOE,MAAA,EAAQC,CAAA,IAAK;QACtC,IAAIH,MAAA,CAAOG,CAAC,EAAED,MAAA,GAAS,GAAG,OAAO;MACnC;MACA,OAAO;IACT,KAAK;MACH,SAASC,CAAA,GAAI,GAAGA,CAAA,GAAIJ,IAAA,CAAKE,WAAA,CAAYC,MAAA,EAAQC,CAAA,IAAK;QAChD,IAAIH,MAAA,CAAOG,CAAC,EAAED,MAAA,GAAS,GAAG,OAAO;QACjC,IAAI,CAACE,eAAA,CAAgBJ,MAAA,CAAOG,CAAC,CAAC,GAAG,OAAO;QACxC,IAAIE,4BAAA,CAA6BL,MAAA,CAAOG,CAAC,CAAC,GAAG,OAAO;QACpD,IAAIA,CAAA,GAAI,GAAG;UACT,IACEV,aAAA,CAAcJ,OAAA,CAAQ,CAACW,MAAA,CAAO,CAAC,CAAC,CAAC,GAAGX,OAAA,CAAQ,CAACW,MAAA,CAAOG,CAAC,CAAC,CAAC,CAAC,EAAEG,QAAA,CACvDJ,MAAA,GAAS,GAEZ,OAAO;QACX;MACF;MACA,OAAO;IACT,KAAK;MACH,SAASC,CAAA,GAAI,GAAGA,CAAA,GAAIJ,IAAA,CAAKE,WAAA,CAAYC,MAAA,EAAQC,CAAA,IAAK;QAChD,IAAII,IAAA,GAAYR,IAAA,CAAKE,WAAA,CAAYE,CAAC;QAElC,SAASK,EAAA,GAAK,GAAGA,EAAA,GAAKD,IAAA,CAAKL,MAAA,EAAQM,EAAA,IAAM;UACvC,IAAID,IAAA,CAAKC,EAAE,EAAEN,MAAA,GAAS,GAAG,OAAO;UAChC,IAAI,CAACE,eAAA,CAAgBG,IAAA,CAAKC,EAAE,CAAC,GAAG,OAAO;UACvC,IAAIH,4BAAA,CAA6BE,IAAA,CAAKC,EAAE,CAAC,GAAG,OAAO;UACnD,IAAIA,EAAA,KAAO,GAAG;YACZ,IAAI,CAACC,yBAAA,CAA0BF,IAAA,EAAMR,IAAA,CAAKE,WAAA,EAAaE,CAAC,GACtD,OAAO;UACX;UACA,IAAIK,EAAA,GAAK,GAAG;YACV,IACEf,aAAA,CAAcJ,OAAA,CAAQ,CAACkB,IAAA,CAAK,CAAC,CAAC,CAAC,GAAGlB,OAAA,CAAQ,CAACkB,IAAA,CAAKC,EAAE,CAAC,CAAC,CAAC,EAAEF,QAAA,CACpDJ,MAAA,GAAS,GAEZ,OAAO;UACX;QACF;MACF;MACA,OAAO;IACT;MACE,OAAO;EACX;AACF;AAEA,SAASE,gBAAgBL,IAAA,EAAkB;EACzC,OACEA,IAAA,CAAK,CAAC,EAAE,CAAC,MAAMA,IAAA,CAAKA,IAAA,CAAKG,MAAA,GAAS,CAAC,EAAE,CAAC,KACtCH,IAAA,CAAK,CAAC,EAAE,CAAC,MAAMA,IAAA,CAAKA,IAAA,CAAKG,MAAA,GAAS,CAAC,EAAE,CAAC;AAE1C;AAEA,SAASG,6BAA6BN,IAAA,EAAkB;EACtD,SAASI,CAAA,GAAI,GAAGA,CAAA,GAAIJ,IAAA,CAAKG,MAAA,GAAS,GAAGC,CAAA,IAAK;IACxC,IAAIO,KAAA,GAAQX,IAAA,CAAKI,CAAC;IAClB,SAASK,EAAA,GAAKL,CAAA,GAAI,GAAGK,EAAA,GAAKT,IAAA,CAAKG,MAAA,GAAS,GAAGM,EAAA,IAAM;MAC/C,IAAIG,GAAA,GAAM,CAACZ,IAAA,CAAKS,EAAE,GAAGT,IAAA,CAAKS,EAAA,GAAK,CAAC,CAAC;MACjC,IAAIb,aAAA,CAAce,KAAA,EAAOpB,UAAA,CAAWqB,GAAG,CAAC,GAAG,OAAO;IACpD;EACF;EACA,OAAO;AACT;AAEA,SAASF,0BACPF,IAAA,EACAR,IAAA,EACAa,KAAA,EACA;EACA,IAAIC,WAAA,GAAcxB,OAAA,CAAQkB,IAAI;EAC9B,SAASJ,CAAA,GAAIS,KAAA,GAAQ,GAAGT,CAAA,GAAIJ,IAAA,CAAKG,MAAA,EAAQC,CAAA,IAAK;IAC5C,IAAI,CAACZ,eAAA,CAAgBsB,WAAA,EAAaxB,OAAA,CAAQU,IAAA,CAAKI,CAAC,CAAC,CAAC,GAAG;MACnD,IAAIX,cAAA,CAAeqB,WAAA,EAAavB,UAAA,CAAWS,IAAA,CAAKI,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,OAAO;IAClE;EACF;EACA,OAAO;AACT;AAGA,IAAOW,0BAAA,GAAQlB,YAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}