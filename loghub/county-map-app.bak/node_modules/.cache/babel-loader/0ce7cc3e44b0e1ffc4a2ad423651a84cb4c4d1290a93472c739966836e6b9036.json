{"ast":null,"code":"// index.ts\nimport { feature, featureCollection } from \"@turf/helpers\";\nimport { featureEach } from \"@turf/meta\";\nfunction combine(fc) {\n  var groups = {\n    MultiPoint: {\n      coordinates: [],\n      properties: []\n    },\n    MultiLineString: {\n      coordinates: [],\n      properties: []\n    },\n    MultiPolygon: {\n      coordinates: [],\n      properties: []\n    }\n  };\n  featureEach(fc, feature2 => {\n    var _a;\n    switch ((_a = feature2.geometry) == null ? void 0 : _a.type) {\n      case \"Point\":\n        groups.MultiPoint.coordinates.push(feature2.geometry.coordinates);\n        groups.MultiPoint.properties.push(feature2.properties);\n        break;\n      case \"MultiPoint\":\n        groups.MultiPoint.coordinates.push(...feature2.geometry.coordinates);\n        groups.MultiPoint.properties.push(feature2.properties);\n        break;\n      case \"LineString\":\n        groups.MultiLineString.coordinates.push(feature2.geometry.coordinates);\n        groups.MultiLineString.properties.push(feature2.properties);\n        break;\n      case \"MultiLineString\":\n        groups.MultiLineString.coordinates.push(...feature2.geometry.coordinates);\n        groups.MultiLineString.properties.push(feature2.properties);\n        break;\n      case \"Polygon\":\n        groups.MultiPolygon.coordinates.push(feature2.geometry.coordinates);\n        groups.MultiPolygon.properties.push(feature2.properties);\n        break;\n      case \"MultiPolygon\":\n        groups.MultiPolygon.coordinates.push(...feature2.geometry.coordinates);\n        groups.MultiPolygon.properties.push(feature2.properties);\n        break;\n      default:\n        break;\n    }\n  });\n  return featureCollection(Object.keys(groups).filter(function (key) {\n    return groups[key].coordinates.length;\n  }).sort().map(function (key) {\n    var geometry = {\n      type: key,\n      coordinates: groups[key].coordinates\n    };\n    var properties = {\n      collectedProperties: groups[key].properties\n    };\n    return feature(geometry, properties);\n  }));\n}\nvar turf_combine_default = combine;\nexport { combine, turf_combine_default as default };","map":{"version":3,"names":["feature","featureCollection","featureEach","combine","fc","groups","MultiPoint","coordinates","properties","MultiLineString","MultiPolygon","feature2","_a","geometry","type","push","Object","keys","filter","key","length","sort","map","collectedProperties","turf_combine_default"],"sources":["/Users/yairtitelboim/Documents/Kernel/ALLAPPS/LOGhub/loghub/county-map-app/node_modules/@turf/combine/index.ts"],"sourcesContent":["import {\n  GeoJsonProperties,\n  FeatureCollection,\n  LineString,\n  MultiLineString,\n  MultiPoint,\n  MultiPolygon,\n  Point,\n  Polygon,\n} from \"geojson\";\nimport { feature, featureCollection } from \"@turf/helpers\";\nimport { featureEach } from \"@turf/meta\";\n\n/**\n * Combines a {@link FeatureCollection} of {@link Point}, {@link LineString}, or {@link Polygon} features\n * into {@link MultiPoint}, {@link MultiLineString}, or {@link MultiPolygon} features.\n *\n * @function\n * @param {FeatureCollection<Point|LineString|Polygon>} fc a FeatureCollection of any type\n * @returns {FeatureCollection<MultiPoint|MultiLineString|MultiPolygon>} a FeatureCollection of corresponding type to input\n * @example\n * var fc = turf.featureCollection([\n *   turf.point([19.026432, 47.49134]),\n *   turf.point([19.074497, 47.509548])\n * ]);\n *\n * var combined = turf.combine(fc);\n *\n * //addToMap\n * var addToMap = [combined]\n */\nfunction combine(\n  fc: FeatureCollection<\n    Point | MultiPoint | LineString | MultiLineString | Polygon | MultiPolygon\n  >\n) {\n  var groups = {\n    MultiPoint: {\n      coordinates: [] as number[][],\n      properties: [] as GeoJsonProperties[],\n    },\n    MultiLineString: {\n      coordinates: [] as number[][][],\n      properties: [] as GeoJsonProperties[],\n    },\n    MultiPolygon: {\n      coordinates: [] as number[][][][],\n      properties: [] as GeoJsonProperties[],\n    },\n  };\n\n  featureEach(fc, (feature) => {\n    switch (feature.geometry?.type) {\n      case \"Point\":\n        groups.MultiPoint.coordinates.push(feature.geometry.coordinates);\n        groups.MultiPoint.properties.push(feature.properties);\n        break;\n      case \"MultiPoint\":\n        groups.MultiPoint.coordinates.push(...feature.geometry.coordinates);\n        groups.MultiPoint.properties.push(feature.properties);\n        break;\n      case \"LineString\":\n        groups.MultiLineString.coordinates.push(feature.geometry.coordinates);\n        groups.MultiLineString.properties.push(feature.properties);\n        break;\n      case \"MultiLineString\":\n        groups.MultiLineString.coordinates.push(\n          ...feature.geometry.coordinates\n        );\n        groups.MultiLineString.properties.push(feature.properties);\n        break;\n      case \"Polygon\":\n        groups.MultiPolygon.coordinates.push(feature.geometry.coordinates);\n        groups.MultiPolygon.properties.push(feature.properties);\n        break;\n      case \"MultiPolygon\":\n        groups.MultiPolygon.coordinates.push(...feature.geometry.coordinates);\n        groups.MultiPolygon.properties.push(feature.properties);\n        break;\n      default:\n        break;\n    }\n  });\n\n  return featureCollection(\n    (Object.keys(groups) as (keyof typeof groups)[])\n      .filter(function (key) {\n        return groups[key].coordinates.length;\n      })\n      .sort()\n      .map(function (key) {\n        var geometry = { type: key, coordinates: groups[key].coordinates } as\n          | MultiPoint\n          | MultiLineString\n          | MultiPolygon;\n        var properties = { collectedProperties: groups[key].properties };\n        return feature(geometry, properties);\n      })\n  );\n}\n\nexport { combine };\nexport default combine;\n"],"mappings":";AAUA,SAASA,OAAA,EAASC,iBAAA,QAAyB;AAC3C,SAASC,WAAA,QAAmB;AAoB5B,SAASC,QACPC,EAAA,EAGA;EACA,IAAIC,MAAA,GAAS;IACXC,UAAA,EAAY;MACVC,WAAA,EAAa,EAAC;MACdC,UAAA,EAAY;IACd;IACAC,eAAA,EAAiB;MACfF,WAAA,EAAa,EAAC;MACdC,UAAA,EAAY;IACd;IACAE,YAAA,EAAc;MACZH,WAAA,EAAa,EAAC;MACdC,UAAA,EAAY;IACd;EACF;EAEAN,WAAA,CAAYE,EAAA,EAAKO,QAAA,IAAY;IAnD/B,IAAAC,EAAA;IAoDI,SAAQA,EAAA,GAAAD,QAAA,CAAQE,QAAA,KAAR,gBAAAD,EAAA,CAAkBE,IAAA;MACxB,KAAK;QACHT,MAAA,CAAOC,UAAA,CAAWC,WAAA,CAAYQ,IAAA,CAAKJ,QAAA,CAAQE,QAAA,CAASN,WAAW;QAC/DF,MAAA,CAAOC,UAAA,CAAWE,UAAA,CAAWO,IAAA,CAAKJ,QAAA,CAAQH,UAAU;QACpD;MACF,KAAK;QACHH,MAAA,CAAOC,UAAA,CAAWC,WAAA,CAAYQ,IAAA,CAAK,GAAGJ,QAAA,CAAQE,QAAA,CAASN,WAAW;QAClEF,MAAA,CAAOC,UAAA,CAAWE,UAAA,CAAWO,IAAA,CAAKJ,QAAA,CAAQH,UAAU;QACpD;MACF,KAAK;QACHH,MAAA,CAAOI,eAAA,CAAgBF,WAAA,CAAYQ,IAAA,CAAKJ,QAAA,CAAQE,QAAA,CAASN,WAAW;QACpEF,MAAA,CAAOI,eAAA,CAAgBD,UAAA,CAAWO,IAAA,CAAKJ,QAAA,CAAQH,UAAU;QACzD;MACF,KAAK;QACHH,MAAA,CAAOI,eAAA,CAAgBF,WAAA,CAAYQ,IAAA,CACjC,GAAGJ,QAAA,CAAQE,QAAA,CAASN,WACtB;QACAF,MAAA,CAAOI,eAAA,CAAgBD,UAAA,CAAWO,IAAA,CAAKJ,QAAA,CAAQH,UAAU;QACzD;MACF,KAAK;QACHH,MAAA,CAAOK,YAAA,CAAaH,WAAA,CAAYQ,IAAA,CAAKJ,QAAA,CAAQE,QAAA,CAASN,WAAW;QACjEF,MAAA,CAAOK,YAAA,CAAaF,UAAA,CAAWO,IAAA,CAAKJ,QAAA,CAAQH,UAAU;QACtD;MACF,KAAK;QACHH,MAAA,CAAOK,YAAA,CAAaH,WAAA,CAAYQ,IAAA,CAAK,GAAGJ,QAAA,CAAQE,QAAA,CAASN,WAAW;QACpEF,MAAA,CAAOK,YAAA,CAAaF,UAAA,CAAWO,IAAA,CAAKJ,QAAA,CAAQH,UAAU;QACtD;MACF;QACE;IACJ;EACF,CAAC;EAED,OAAOP,iBAAA,CACJe,MAAA,CAAOC,IAAA,CAAKZ,MAAM,EAChBa,MAAA,CAAO,UAAUC,GAAA,EAAK;IACrB,OAAOd,MAAA,CAAOc,GAAG,EAAEZ,WAAA,CAAYa,MAAA;EACjC,CAAC,EACAC,IAAA,CAAK,EACLC,GAAA,CAAI,UAAUH,GAAA,EAAK;IAClB,IAAIN,QAAA,GAAW;MAAEC,IAAA,EAAMK,GAAA;MAAKZ,WAAA,EAAaF,MAAA,CAAOc,GAAG,EAAEZ;IAAY;IAIjE,IAAIC,UAAA,GAAa;MAAEe,mBAAA,EAAqBlB,MAAA,CAAOc,GAAG,EAAEX;IAAW;IAC/D,OAAOR,OAAA,CAAQa,QAAA,EAAUL,UAAU;EACrC,CAAC,CACL;AACF;AAGA,IAAOgB,oBAAA,GAAQrB,OAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}