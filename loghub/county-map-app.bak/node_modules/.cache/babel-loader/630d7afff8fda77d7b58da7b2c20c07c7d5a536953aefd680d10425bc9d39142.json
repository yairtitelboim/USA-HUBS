{"ast":null,"code":"// index.ts\nimport { featureCollection } from \"@turf/helpers\";\nfunction sample(fc, num) {\n  if (!fc) throw new Error(\"fc is required\");\n  if (num === null || num === void 0) throw new Error(\"num is required\");\n  if (typeof num !== \"number\") throw new Error(\"num must be a number\");\n  var outFC = featureCollection(getRandomSubarray(fc.features, num));\n  return outFC;\n}\nfunction getRandomSubarray(arr, size) {\n  var shuffled = arr.slice(0),\n    i = arr.length,\n    min = i - size,\n    temp,\n    index;\n  while (i-- > min) {\n    index = Math.floor((i + 1) * Math.random());\n    temp = shuffled[index];\n    shuffled[index] = shuffled[i];\n    shuffled[i] = temp;\n  }\n  return shuffled.slice(min);\n}\nvar turf_sample_default = sample;\nexport { turf_sample_default as default, sample };","map":{"version":3,"names":["featureCollection","sample","fc","num","Error","outFC","getRandomSubarray","features","arr","size","shuffled","slice","i","length","min","temp","index","Math","floor","random","turf_sample_default"],"sources":["/Users/yairtitelboim/Documents/Kernel/ALLAPPS/LOGhub/loghub/county-map-app/node_modules/@turf/sample/index.ts"],"sourcesContent":["// http://stackoverflow.com/questions/11935175/sampling-a-random-subset-from-an-array\nimport { Feature, FeatureCollection, Geometry, GeometryObject } from \"geojson\";\nimport { featureCollection } from \"@turf/helpers\";\n\n/**\n * Takes a {@link FeatureCollection} and returns a FeatureCollection with given number of {@link Feature|features} at random.\n *\n * @function\n * @param {FeatureCollection} featurecollection set of input features\n * @param {number} num number of features to select\n * @returns {FeatureCollection} a FeatureCollection with `n` features\n * @example\n * var points = turf.randomPoint(100, {bbox: [-80, 30, -60, 60]});\n *\n * var sample = turf.sample(points, 5);\n *\n * //addToMap\n * var addToMap = [points, sample]\n * turf.featureEach(sample, function (currentFeature) {\n *   currentFeature.properties['marker-size'] = 'large';\n *   currentFeature.properties['marker-color'] = '#000';\n * });\n */\nfunction sample<T extends GeometryObject>(\n  fc: FeatureCollection<T>,\n  num: number\n): FeatureCollection<T> {\n  if (!fc) throw new Error(\"fc is required\");\n  if (num === null || num === undefined) throw new Error(\"num is required\");\n  if (typeof num !== \"number\") throw new Error(\"num must be a number\");\n  var outFC = featureCollection(getRandomSubarray(fc.features, num));\n  return outFC;\n}\n\nfunction getRandomSubarray<T extends Geometry>(\n  arr: Feature<T>[],\n  size: number\n) {\n  var shuffled = arr.slice(0),\n    i = arr.length,\n    min = i - size,\n    temp,\n    index;\n  while (i-- > min) {\n    index = Math.floor((i + 1) * Math.random());\n    temp = shuffled[index];\n    shuffled[index] = shuffled[i];\n    shuffled[i] = temp;\n  }\n  return shuffled.slice(min);\n}\n\nexport { sample };\nexport default sample;\n"],"mappings":";AAEA,SAASA,iBAAA,QAAyB;AAqBlC,SAASC,OACPC,EAAA,EACAC,GAAA,EACsB;EACtB,IAAI,CAACD,EAAA,EAAI,MAAM,IAAIE,KAAA,CAAM,gBAAgB;EACzC,IAAID,GAAA,KAAQ,QAAQA,GAAA,KAAQ,QAAW,MAAM,IAAIC,KAAA,CAAM,iBAAiB;EACxE,IAAI,OAAOD,GAAA,KAAQ,UAAU,MAAM,IAAIC,KAAA,CAAM,sBAAsB;EACnE,IAAIC,KAAA,GAAQL,iBAAA,CAAkBM,iBAAA,CAAkBJ,EAAA,CAAGK,QAAA,EAAUJ,GAAG,CAAC;EACjE,OAAOE,KAAA;AACT;AAEA,SAASC,kBACPE,GAAA,EACAC,IAAA,EACA;EACA,IAAIC,QAAA,GAAWF,GAAA,CAAIG,KAAA,CAAM,CAAC;IACxBC,CAAA,GAAIJ,GAAA,CAAIK,MAAA;IACRC,GAAA,GAAMF,CAAA,GAAIH,IAAA;IACVM,IAAA;IACAC,KAAA;EACF,OAAOJ,CAAA,KAAME,GAAA,EAAK;IAChBE,KAAA,GAAQC,IAAA,CAAKC,KAAA,EAAON,CAAA,GAAI,KAAKK,IAAA,CAAKE,MAAA,CAAO,CAAC;IAC1CJ,IAAA,GAAOL,QAAA,CAASM,KAAK;IACrBN,QAAA,CAASM,KAAK,IAAIN,QAAA,CAASE,CAAC;IAC5BF,QAAA,CAASE,CAAC,IAAIG,IAAA;EAChB;EACA,OAAOL,QAAA,CAASC,KAAA,CAAMG,GAAG;AAC3B;AAGA,IAAOM,mBAAA,GAAQnB,MAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}