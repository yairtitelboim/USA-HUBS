{"ast":null,"code":"// index.ts\nimport { coordEach } from \"@turf/meta\";\nfunction bbox(geojson, options = {}) {\n  if (geojson.bbox != null && true !== options.recompute) {\n    return geojson.bbox;\n  }\n  const result = [Infinity, Infinity, -Infinity, -Infinity];\n  coordEach(geojson, coord => {\n    if (result[0] > coord[0]) {\n      result[0] = coord[0];\n    }\n    if (result[1] > coord[1]) {\n      result[1] = coord[1];\n    }\n    if (result[2] < coord[0]) {\n      result[2] = coord[0];\n    }\n    if (result[3] < coord[1]) {\n      result[3] = coord[1];\n    }\n  });\n  return result;\n}\nvar turf_bbox_default = bbox;\nexport { bbox, turf_bbox_default as default };","map":{"version":3,"names":["coordEach","bbox","geojson","options","recompute","result","Infinity","coord","turf_bbox_default"],"sources":["/Users/yairtitelboim/Documents/Kernel/ALLAPPS/LOGhub/loghub/county-map-app/node_modules/@turf/bbox/index.ts"],"sourcesContent":["import { BBox } from \"geojson\";\nimport { AllGeoJSON } from \"@turf/helpers\";\nimport { coordEach } from \"@turf/meta\";\n\n/**\n * Calculates the bounding box for any GeoJSON object, including FeatureCollection.\n * Uses geojson.bbox if available and options.recompute is not set.\n *\n * @function\n * @param {GeoJSON} geojson any GeoJSON object\n * @param {Object} [options={}] Optional parameters\n * @param {boolean} [options.recompute] Whether to ignore an existing bbox property on geojson\n * @returns {BBox} bbox extent in [minX, minY, maxX, maxY] order\n * @example\n * var line = turf.lineString([[-74, 40], [-78, 42], [-82, 35]]);\n * var bbox = turf.bbox(line);\n * var bboxPolygon = turf.bboxPolygon(bbox);\n *\n * //addToMap\n * var addToMap = [line, bboxPolygon]\n */\nfunction bbox(\n  geojson: AllGeoJSON,\n  options: {\n    recompute?: boolean;\n  } = {}\n): BBox {\n  if (geojson.bbox != null && true !== options.recompute) {\n    return geojson.bbox;\n  }\n  const result: BBox = [Infinity, Infinity, -Infinity, -Infinity];\n  coordEach(geojson, (coord) => {\n    if (result[0] > coord[0]) {\n      result[0] = coord[0];\n    }\n    if (result[1] > coord[1]) {\n      result[1] = coord[1];\n    }\n    if (result[2] < coord[0]) {\n      result[2] = coord[0];\n    }\n    if (result[3] < coord[1]) {\n      result[3] = coord[1];\n    }\n  });\n  return result;\n}\n\nexport { bbox };\nexport default bbox;\n"],"mappings":";AAEA,SAASA,SAAA,QAAiB;AAmB1B,SAASC,KACPC,OAAA,EACAC,OAAA,GAEI,CAAC,GACC;EACN,IAAID,OAAA,CAAQD,IAAA,IAAQ,QAAQ,SAASE,OAAA,CAAQC,SAAA,EAAW;IACtD,OAAOF,OAAA,CAAQD,IAAA;EACjB;EACA,MAAMI,MAAA,GAAe,CAACC,QAAA,EAAUA,QAAA,EAAU,CAAAA,QAAA,EAAW,CAAAA,QAAS;EAC9DN,SAAA,CAAUE,OAAA,EAAUK,KAAA,IAAU;IAC5B,IAAIF,MAAA,CAAO,CAAC,IAAIE,KAAA,CAAM,CAAC,GAAG;MACxBF,MAAA,CAAO,CAAC,IAAIE,KAAA,CAAM,CAAC;IACrB;IACA,IAAIF,MAAA,CAAO,CAAC,IAAIE,KAAA,CAAM,CAAC,GAAG;MACxBF,MAAA,CAAO,CAAC,IAAIE,KAAA,CAAM,CAAC;IACrB;IACA,IAAIF,MAAA,CAAO,CAAC,IAAIE,KAAA,CAAM,CAAC,GAAG;MACxBF,MAAA,CAAO,CAAC,IAAIE,KAAA,CAAM,CAAC;IACrB;IACA,IAAIF,MAAA,CAAO,CAAC,IAAIE,KAAA,CAAM,CAAC,GAAG;MACxBF,MAAA,CAAO,CAAC,IAAIE,KAAA,CAAM,CAAC;IACrB;EACF,CAAC;EACD,OAAOF,MAAA;AACT;AAGA,IAAOG,iBAAA,GAAQP,IAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}