{"ast":null,"code":"// index.ts\nimport { destination } from \"@turf/destination\";\nimport { polygon } from \"@turf/helpers\";\nfunction circle(center, radius, options = {}) {\n  const steps = options.steps || 64;\n  const properties = options.properties ? options.properties : !Array.isArray(center) && center.type === \"Feature\" && center.properties ? center.properties : {};\n  const coordinates = [];\n  for (let i = 0; i < steps; i++) {\n    coordinates.push(destination(center, radius, i * -360 / steps, options).geometry.coordinates);\n  }\n  coordinates.push(coordinates[0]);\n  return polygon([coordinates], properties);\n}\nvar turf_circle_default = circle;\nexport { circle, turf_circle_default as default };","map":{"version":3,"names":["destination","polygon","circle","center","radius","options","steps","properties","Array","isArray","type","coordinates","i","push","geometry","turf_circle_default"],"sources":["/Users/yairtitelboim/Documents/Kernel/ALLAPPS/LOGhub/loghub/county-map-app/node_modules/@turf/circle/index.ts"],"sourcesContent":["import { GeoJsonProperties, Feature, Point, Polygon } from \"geojson\";\nimport { destination } from \"@turf/destination\";\nimport { polygon, Units } from \"@turf/helpers\";\n\n/**\n * Takes a {@link Point} and calculates the circle polygon given a radius in degrees, radians, miles, or kilometers; and steps for precision.\n *\n * @function\n * @param {Feature<Point>|number[]} center center point\n * @param {number} radius radius of the circle\n * @param {Object} [options={}] Optional parameters\n * @param {number} [options.steps=64] number of steps\n * @param {string} [options.units='kilometers'] miles, kilometers, degrees, or radians\n * @param {Object} [options.properties={}] properties\n * @returns {Feature<Polygon>} circle polygon\n * @example\n * var center = [-75.343, 39.984];\n * var radius = 5;\n * var options = {steps: 10, units: 'kilometers', properties: {foo: 'bar'}};\n * var circle = turf.circle(center, radius, options);\n *\n * //addToMap\n * var addToMap = [turf.point(center), circle]\n */\nfunction circle<P extends GeoJsonProperties = GeoJsonProperties>(\n  center: number[] | Point | Feature<Point, P>,\n  radius: number,\n  options: {\n    steps?: number;\n    units?: Units;\n    properties?: P;\n  } = {}\n): Feature<Polygon, P> {\n  // default params\n  const steps = options.steps || 64;\n  const properties: any = options.properties\n    ? options.properties\n    : !Array.isArray(center) && center.type === \"Feature\" && center.properties\n      ? center.properties\n      : {};\n\n  // main\n  const coordinates = [];\n  for (let i = 0; i < steps; i++) {\n    coordinates.push(\n      destination(center, radius, (i * -360) / steps, options).geometry\n        .coordinates\n    );\n  }\n  coordinates.push(coordinates[0]);\n\n  return polygon([coordinates], properties);\n}\n\nexport { circle };\nexport default circle;\n"],"mappings":";AACA,SAASA,WAAA,QAAmB;AAC5B,SAASC,OAAA,QAAsB;AAsB/B,SAASC,OACPC,MAAA,EACAC,MAAA,EACAC,OAAA,GAII,CAAC,GACgB;EAErB,MAAMC,KAAA,GAAQD,OAAA,CAAQC,KAAA,IAAS;EAC/B,MAAMC,UAAA,GAAkBF,OAAA,CAAQE,UAAA,GAC5BF,OAAA,CAAQE,UAAA,GACR,CAACC,KAAA,CAAMC,OAAA,CAAQN,MAAM,KAAKA,MAAA,CAAOO,IAAA,KAAS,aAAaP,MAAA,CAAOI,UAAA,GAC5DJ,MAAA,CAAOI,UAAA,GACP,CAAC;EAGP,MAAMI,WAAA,GAAc,EAAC;EACrB,SAASC,CAAA,GAAI,GAAGA,CAAA,GAAIN,KAAA,EAAOM,CAAA,IAAK;IAC9BD,WAAA,CAAYE,IAAA,CACVb,WAAA,CAAYG,MAAA,EAAQC,MAAA,EAASQ,CAAA,GAAI,OAAQN,KAAA,EAAOD,OAAO,EAAES,QAAA,CACtDH,WACL;EACF;EACAA,WAAA,CAAYE,IAAA,CAAKF,WAAA,CAAY,CAAC,CAAC;EAE/B,OAAOV,OAAA,CAAQ,CAACU,WAAW,GAAGJ,UAAU;AAC1C;AAGA,IAAOQ,mBAAA,GAAQb,MAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}