{"ast":null,"code":"// index.ts\nimport { getCoord, getGeom } from \"@turf/invariant\";\nfunction planepoint(point, triangle) {\n  const coord = getCoord(point);\n  const geom = getGeom(triangle);\n  const coords = geom.coordinates;\n  const outer = coords[0];\n  if (outer.length < 4) throw new Error(\"OuterRing of a Polygon must have 4 or more Positions.\");\n  const properties = triangle.type === \"Feature\" && triangle.properties || {};\n  const a = properties.a;\n  const b = properties.b;\n  const c = properties.c;\n  const x = coord[0];\n  const y = coord[1];\n  const x1 = outer[0][0];\n  const y1 = outer[0][1];\n  const z1 = a !== void 0 ? a : outer[0][2];\n  const x2 = outer[1][0];\n  const y2 = outer[1][1];\n  const z2 = b !== void 0 ? b : outer[1][2];\n  const x3 = outer[2][0];\n  const y3 = outer[2][1];\n  const z3 = c !== void 0 ? c : outer[2][2];\n  const z = (z3 * (x - x1) * (y - y2) + z1 * (x - x2) * (y - y3) + z2 * (x - x3) * (y - y1) - z2 * (x - x1) * (y - y3) - z3 * (x - x2) * (y - y1) - z1 * (x - x3) * (y - y2)) / ((x - x1) * (y - y2) + (x - x2) * (y - y3) + (x - x3) * (y - y1) - (x - x1) * (y - y3) - (x - x2) * (y - y1) - (x - x3) * (y - y2));\n  return z;\n}\nvar turf_planepoint_default = planepoint;\nexport { turf_planepoint_default as default, planepoint };","map":{"version":3,"names":["getCoord","getGeom","planepoint","point","triangle","coord","geom","coords","coordinates","outer","length","Error","properties","type","a","b","c","x","y","x1","y1","z1","x2","y2","z2","x3","y3","z3","z","turf_planepoint_default"],"sources":["/Users/yairtitelboim/Documents/Kernel/ALLAPPS/LOGhub/loghub/county-map-app/node_modules/@turf/planepoint/index.ts"],"sourcesContent":["import { Feature, Polygon } from \"geojson\";\nimport { getCoord, getGeom } from \"@turf/invariant\";\nimport { Coord } from \"@turf/helpers\";\n\n/**\n * Takes a triangular plane as a polygon and a point within that triangle, and\n * returns the z-value at that point.\n *\n * The Polygon should have properties `a`, `b`, and `c`\n * that define the values at its three corners. Alternatively, the z-values\n * of each triangle point can be provided by their respective 3rd coordinate\n * if their values are not provided as properties.\n *\n * @function\n * @param {Coord} point the Point for which a z-value will be calculated\n * @param {Feature<Polygon>} triangle a Polygon feature with three vertices\n * @returns {number} the z-value for `interpolatedPoint`\n * @example\n * const point = turf.point([-75.3221, 39.529]);\n * // \"a\", \"b\", and \"c\" values represent the values of the coordinates in order.\n * const triangle = turf.polygon([[\n *   [-75.1221, 39.57],\n *   [-75.58, 39.18],\n *   [-75.97, 39.86],\n *   [-75.1221, 39.57]\n * ]], {\n *   \"a\": 11,\n *   \"b\": 122,\n *   \"c\": 44\n * });\n *\n * const zValue = turf.planepoint(point, triangle);\n * point.properties.zValue = zValue;\n *\n * //addToMap\n * const addToMap = [triangle, point];\n */\nfunction planepoint(\n  point: Coord,\n  triangle: Feature<Polygon> | Polygon\n): number {\n  // Normalize input\n  const coord = getCoord(point);\n  const geom = getGeom(triangle);\n  const coords = geom.coordinates;\n  const outer = coords[0];\n  if (outer.length < 4)\n    throw new Error(\"OuterRing of a Polygon must have 4 or more Positions.\");\n  const properties = (triangle.type === \"Feature\" && triangle.properties) || {};\n  const a = properties.a;\n  const b = properties.b;\n  const c = properties.c;\n\n  // Planepoint\n  const x = coord[0];\n  const y = coord[1];\n  const x1 = outer[0][0];\n  const y1 = outer[0][1];\n  const z1 = a !== undefined ? a : outer[0][2];\n  const x2 = outer[1][0];\n  const y2 = outer[1][1];\n  const z2 = b !== undefined ? b : outer[1][2];\n  const x3 = outer[2][0];\n  const y3 = outer[2][1];\n  const z3 = c !== undefined ? c : outer[2][2];\n  const z =\n    (z3 * (x - x1) * (y - y2) +\n      z1 * (x - x2) * (y - y3) +\n      z2 * (x - x3) * (y - y1) -\n      z2 * (x - x1) * (y - y3) -\n      z3 * (x - x2) * (y - y1) -\n      z1 * (x - x3) * (y - y2)) /\n    ((x - x1) * (y - y2) +\n      (x - x2) * (y - y3) +\n      (x - x3) * (y - y1) -\n      (x - x1) * (y - y3) -\n      (x - x2) * (y - y1) -\n      (x - x3) * (y - y2));\n\n  return z;\n}\n\nexport { planepoint };\nexport default planepoint;\n"],"mappings":";AACA,SAASA,QAAA,EAAUC,OAAA,QAAe;AAoClC,SAASC,WACPC,KAAA,EACAC,QAAA,EACQ;EAER,MAAMC,KAAA,GAAQL,QAAA,CAASG,KAAK;EAC5B,MAAMG,IAAA,GAAOL,OAAA,CAAQG,QAAQ;EAC7B,MAAMG,MAAA,GAASD,IAAA,CAAKE,WAAA;EACpB,MAAMC,KAAA,GAAQF,MAAA,CAAO,CAAC;EACtB,IAAIE,KAAA,CAAMC,MAAA,GAAS,GACjB,MAAM,IAAIC,KAAA,CAAM,uDAAuD;EACzE,MAAMC,UAAA,GAAcR,QAAA,CAASS,IAAA,KAAS,aAAaT,QAAA,CAASQ,UAAA,IAAe,CAAC;EAC5E,MAAME,CAAA,GAAIF,UAAA,CAAWE,CAAA;EACrB,MAAMC,CAAA,GAAIH,UAAA,CAAWG,CAAA;EACrB,MAAMC,CAAA,GAAIJ,UAAA,CAAWI,CAAA;EAGrB,MAAMC,CAAA,GAAIZ,KAAA,CAAM,CAAC;EACjB,MAAMa,CAAA,GAAIb,KAAA,CAAM,CAAC;EACjB,MAAMc,EAAA,GAAKV,KAAA,CAAM,CAAC,EAAE,CAAC;EACrB,MAAMW,EAAA,GAAKX,KAAA,CAAM,CAAC,EAAE,CAAC;EACrB,MAAMY,EAAA,GAAKP,CAAA,KAAM,SAAYA,CAAA,GAAIL,KAAA,CAAM,CAAC,EAAE,CAAC;EAC3C,MAAMa,EAAA,GAAKb,KAAA,CAAM,CAAC,EAAE,CAAC;EACrB,MAAMc,EAAA,GAAKd,KAAA,CAAM,CAAC,EAAE,CAAC;EACrB,MAAMe,EAAA,GAAKT,CAAA,KAAM,SAAYA,CAAA,GAAIN,KAAA,CAAM,CAAC,EAAE,CAAC;EAC3C,MAAMgB,EAAA,GAAKhB,KAAA,CAAM,CAAC,EAAE,CAAC;EACrB,MAAMiB,EAAA,GAAKjB,KAAA,CAAM,CAAC,EAAE,CAAC;EACrB,MAAMkB,EAAA,GAAKX,CAAA,KAAM,SAAYA,CAAA,GAAIP,KAAA,CAAM,CAAC,EAAE,CAAC;EAC3C,MAAMmB,CAAA,IACHD,EAAA,IAAMV,CAAA,GAAIE,EAAA,KAAOD,CAAA,GAAIK,EAAA,IACpBF,EAAA,IAAMJ,CAAA,GAAIK,EAAA,KAAOJ,CAAA,GAAIQ,EAAA,IACrBF,EAAA,IAAMP,CAAA,GAAIQ,EAAA,KAAOP,CAAA,GAAIE,EAAA,IACrBI,EAAA,IAAMP,CAAA,GAAIE,EAAA,KAAOD,CAAA,GAAIQ,EAAA,IACrBC,EAAA,IAAMV,CAAA,GAAIK,EAAA,KAAOJ,CAAA,GAAIE,EAAA,IACrBC,EAAA,IAAMJ,CAAA,GAAIQ,EAAA,KAAOP,CAAA,GAAIK,EAAA,OACrBN,CAAA,GAAIE,EAAA,KAAOD,CAAA,GAAIK,EAAA,KACdN,CAAA,GAAIK,EAAA,KAAOJ,CAAA,GAAIQ,EAAA,KACfT,CAAA,GAAIQ,EAAA,KAAOP,CAAA,GAAIE,EAAA,KACfH,CAAA,GAAIE,EAAA,KAAOD,CAAA,GAAIQ,EAAA,KACfT,CAAA,GAAIK,EAAA,KAAOJ,CAAA,GAAIE,EAAA,KACfH,CAAA,GAAIQ,EAAA,KAAOP,CAAA,GAAIK,EAAA;EAEpB,OAAOK,CAAA;AACT;AAGA,IAAOC,uBAAA,GAAQ3B,UAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}