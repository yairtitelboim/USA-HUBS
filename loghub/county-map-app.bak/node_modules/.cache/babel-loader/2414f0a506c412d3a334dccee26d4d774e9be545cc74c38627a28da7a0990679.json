{"ast":null,"code":"var _jsxFileName = \"/Users/yairtitelboim/Documents/Kernel/ALLAPPS/LOGhub/loghub/county-map-app/src/components/CountyMap.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from 'react';\nimport mapboxgl from 'mapbox-gl';\nimport * as turf from '@turf/turf';\nimport 'mapbox-gl/dist/mapbox-gl.css';\n\n// Mapbox token\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nmapboxgl.accessToken = 'pk.eyJ1IjoieWFpcnRpdGVsIiwiYSI6ImNsZm1wODZuNzAyNmIzcHAydTRsaWlpOTIifQ.OG_0yvbvyo6gbqOJuP1Q3g';\nconst CountyMap = () => {\n  _s();\n  const mapContainer = useRef(null);\n  const map = useRef(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Color scale for obsolescence score\n  const colorScale = [[0, [44, 123, 182]],\n  // Low (blue)\n  [0.5, [255, 255, 191]],\n  // Medium (yellow)\n  [1, [215, 25, 28]] // High (red)\n  ];\n\n  // Function to interpolate colors based on score\n  const interpolateColor = value => {\n    // Find the color range\n    let lowerIndex = 0;\n    for (let i = 1; i < colorScale.length; i++) {\n      if (value <= colorScale[i][0]) {\n        lowerIndex = i - 1;\n        break;\n      }\n    }\n    const lowerValue = colorScale[lowerIndex][0];\n    const upperValue = colorScale[lowerIndex + 1][0];\n    const lowerColor = colorScale[lowerIndex][1];\n    const upperColor = colorScale[lowerIndex + 1][1];\n\n    // Calculate interpolation factor\n    const range = upperValue - lowerValue;\n    const factor = (value - lowerValue) / range;\n\n    // Interpolate RGB values\n    return [Math.round(lowerColor[0] + factor * (upperColor[0] - lowerColor[0])), Math.round(lowerColor[1] + factor * (upperColor[1] - lowerColor[1])), Math.round(lowerColor[2] + factor * (upperColor[2] - lowerColor[2]))];\n  };\n\n  // Generate mock county data for testing\n  const generateMockCountyData = () => {\n    console.log(\"Generating mock county data\");\n    const mockData = {\n      type: 'FeatureCollection',\n      features: []\n    };\n\n    // Generate mock features for US counties across the country\n    const counties = [\n    // West Coast\n    {\n      name: 'Los Angeles County',\n      state: 'CA',\n      geoid: '06037',\n      lon: -118.2437,\n      lat: 34.0522,\n      score: 0.82,\n      confidence: 0.95,\n      tiles: 18\n    }, {\n      name: 'San Diego County',\n      state: 'CA',\n      geoid: '06073',\n      lon: -117.1611,\n      lat: 32.7157,\n      score: 0.57,\n      confidence: 0.82,\n      tiles: 9\n    }, {\n      name: 'King County',\n      state: 'WA',\n      geoid: '53033',\n      lon: -122.3321,\n      lat: 47.5480,\n      score: 0.44,\n      confidence: 0.71,\n      tiles: 8\n    },\n    // Midwest\n    {\n      name: 'Cook County',\n      state: 'IL',\n      geoid: '17031',\n      lon: -87.6298,\n      lat: 41.8781,\n      score: 0.75,\n      confidence: 0.92,\n      tiles: 15\n    }, {\n      name: 'Wayne County',\n      state: 'MI',\n      geoid: '26163',\n      lon: -83.2454,\n      lat: 42.2791,\n      score: 0.58,\n      confidence: 0.83,\n      tiles: 9\n    },\n    // South\n    {\n      name: 'Harris County',\n      state: 'TX',\n      geoid: '48201',\n      lon: -95.3698,\n      lat: 29.7604,\n      score: 0.68,\n      confidence: 0.88,\n      tiles: 12\n    }, {\n      name: 'Miami-Dade County',\n      state: 'FL',\n      geoid: '12086',\n      lon: -80.1918,\n      lat: 25.7617,\n      score: 0.48,\n      confidence: 0.76,\n      tiles: 7\n    },\n    // Northeast\n    {\n      name: 'New York County',\n      state: 'NY',\n      geoid: '36061',\n      lon: -73.9712,\n      lat: 40.7831,\n      score: 0.72,\n      confidence: 0.90,\n      tiles: 14\n    }, {\n      name: 'Philadelphia County',\n      state: 'PA',\n      geoid: '42101',\n      lon: -75.1652,\n      lat: 39.9526,\n      score: 0.51,\n      confidence: 0.78,\n      tiles: 8\n    }];\n\n    // Create a feature for each county\n    counties.forEach(county => {\n      // Create a circle for the county using Turf.js\n      const center = [county.lon, county.lat];\n      const radius = 1; // Radius in degrees\n      const options = {\n        steps: 64,\n        units: 'degrees'\n      };\n      const circle = turf.circle(center, radius, options);\n\n      // Add properties to the feature\n      circle.properties = {\n        NAME: county.name,\n        STATEFP: county.state,\n        GEOID: county.geoid,\n        obsolescence_score: county.score,\n        confidence: county.confidence,\n        tile_count: county.tiles\n      };\n      mockData.features.push(circle);\n    });\n    console.log(`Generated ${mockData.features.length} mock counties`);\n    return mockData;\n  };\n\n  // Initialize the map\n  useEffect(() => {\n    if (map.current) return; // Initialize map only once\n\n    try {\n      // Create the map\n      map.current = new mapboxgl.Map({\n        container: mapContainer.current,\n        style: 'mapbox://styles/mapbox/dark-v11',\n        center: [-98.5795, 39.8283],\n        // Center of the US\n        zoom: 3.5,\n        pitch: 60,\n        // Start with 3D view\n        bearing: 30 // Add some rotation for better 3D perspective\n      });\n\n      // Add navigation controls\n      map.current.addControl(new mapboxgl.NavigationControl());\n\n      // Wait for the map to load\n      map.current.on('load', () => {\n        // Generate mock data or fetch real data\n        const geojsonData = generateMockCountyData();\n\n        // Add a source for the county data\n        map.current.addSource('counties', {\n          type: 'geojson',\n          data: geojsonData\n        });\n\n        // Add a fill-extrusion layer for 3D counties\n        map.current.addLayer({\n          id: 'county-extrusions',\n          type: 'fill-extrusion',\n          source: 'counties',\n          paint: {\n            'fill-extrusion-color': ['interpolate', ['linear'], ['get', 'obsolescence_score'], 0, 'rgb(44, 123, 182)', 0.5, 'rgb(255, 255, 191)', 1, 'rgb(215, 25, 28)'],\n            'fill-extrusion-height': ['*', ['get', 'confidence'], 500000 // Scale factor for height\n            ],\n            'fill-extrusion-base': 0,\n            'fill-extrusion-opacity': 0.8\n          }\n        });\n\n        // Add a line layer for county boundaries with thick white lines\n        map.current.addLayer({\n          id: 'county-borders',\n          type: 'line',\n          source: 'counties',\n          paint: {\n            'line-color': 'white',\n            'line-width': 2,\n            'line-opacity': 0.9\n          }\n        });\n\n        // Create a popup for county information\n        const popup = new mapboxgl.Popup({\n          closeButton: false,\n          closeOnClick: false\n        });\n\n        // Show popup on hover\n        map.current.on('mouseenter', 'county-extrusions', e => {\n          map.current.getCanvas().style.cursor = 'pointer';\n          const feature = e.features[0];\n          const props = feature.properties;\n\n          // Get the center of the county for popup placement\n          const coordinates = e.lngLat;\n\n          // Create popup content\n          const html = `\n            <div style=\"color: #333;\">\n              <strong>${props.NAME}, ${props.STATEFP}</strong><br>\n              Obsolescence Score: <strong>${parseFloat(props.obsolescence_score).toFixed(2)}</strong><br>\n              Confidence: ${parseFloat(props.confidence).toFixed(2)}<br>\n              Tile Count: ${props.tile_count}\n            </div>\n          `;\n          popup.setLngLat(coordinates).setHTML(html).addTo(map.current);\n        });\n\n        // Hide popup on mouseleave\n        map.current.on('mouseleave', 'county-extrusions', () => {\n          map.current.getCanvas().style.cursor = '';\n          popup.remove();\n        });\n\n        // Loading complete\n        setLoading(false);\n      });\n    } catch (err) {\n      console.error('Error initializing map:', err);\n      setError(err.message);\n      setLoading(false);\n    }\n\n    // Clean up on unmount\n    return () => {\n      if (map.current) {\n        map.current.remove();\n      }\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"map-container\",\n    children: [loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading-overlay\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"spinner\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading map...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 9\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Error: \", error]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: mapContainer,\n      className: \"map\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 224,\n    columnNumber: 5\n  }, this);\n};\n_s(CountyMap, \"mpz7zwM5zNQJrzp5EVgiMhySGmg=\");\n_c = CountyMap;\nexport default CountyMap;\nvar _c;\n$RefreshReg$(_c, \"CountyMap\");","map":{"version":3,"names":["React","useRef","useEffect","useState","mapboxgl","turf","jsxDEV","_jsxDEV","accessToken","CountyMap","_s","mapContainer","map","loading","setLoading","error","setError","colorScale","interpolateColor","value","lowerIndex","i","length","lowerValue","upperValue","lowerColor","upperColor","range","factor","Math","round","generateMockCountyData","console","log","mockData","type","features","counties","name","state","geoid","lon","lat","score","confidence","tiles","forEach","county","center","radius","options","steps","units","circle","properties","NAME","STATEFP","GEOID","obsolescence_score","tile_count","push","current","Map","container","style","zoom","pitch","bearing","addControl","NavigationControl","on","geojsonData","addSource","data","addLayer","id","source","paint","popup","Popup","closeButton","closeOnClick","e","getCanvas","cursor","feature","props","coordinates","lngLat","html","parseFloat","toFixed","setLngLat","setHTML","addTo","remove","err","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","_c","$RefreshReg$"],"sources":["/Users/yairtitelboim/Documents/Kernel/ALLAPPS/LOGhub/loghub/county-map-app/src/components/CountyMap.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport mapboxgl from 'mapbox-gl';\nimport * as turf from '@turf/turf';\nimport 'mapbox-gl/dist/mapbox-gl.css';\n\n// Mapbox token\nmapboxgl.accessToken = 'pk.eyJ1IjoieWFpcnRpdGVsIiwiYSI6ImNsZm1wODZuNzAyNmIzcHAydTRsaWlpOTIifQ.OG_0yvbvyo6gbqOJuP1Q3g';\n\nconst CountyMap = () => {\n  const mapContainer = useRef(null);\n  const map = useRef(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Color scale for obsolescence score\n  const colorScale = [\n    [0, [44, 123, 182]], // Low (blue)\n    [0.5, [255, 255, 191]], // Medium (yellow)\n    [1, [215, 25, 28]] // High (red)\n  ];\n\n  // Function to interpolate colors based on score\n  const interpolateColor = (value) => {\n    // Find the color range\n    let lowerIndex = 0;\n    for (let i = 1; i < colorScale.length; i++) {\n      if (value <= colorScale[i][0]) {\n        lowerIndex = i - 1;\n        break;\n      }\n    }\n\n    const lowerValue = colorScale[lowerIndex][0];\n    const upperValue = colorScale[lowerIndex + 1][0];\n    const lowerColor = colorScale[lowerIndex][1];\n    const upperColor = colorScale[lowerIndex + 1][1];\n\n    // Calculate interpolation factor\n    const range = upperValue - lowerValue;\n    const factor = (value - lowerValue) / range;\n\n    // Interpolate RGB values\n    return [\n      Math.round(lowerColor[0] + factor * (upperColor[0] - lowerColor[0])),\n      Math.round(lowerColor[1] + factor * (upperColor[1] - lowerColor[1])),\n      Math.round(lowerColor[2] + factor * (upperColor[2] - lowerColor[2]))\n    ];\n  };\n\n  // Generate mock county data for testing\n  const generateMockCountyData = () => {\n    console.log(\"Generating mock county data\");\n\n    const mockData = {\n      type: 'FeatureCollection',\n      features: []\n    };\n\n    // Generate mock features for US counties across the country\n    const counties = [\n      // West Coast\n      { name: 'Los Angeles County', state: 'CA', geoid: '06037', lon: -118.2437, lat: 34.0522, score: 0.82, confidence: 0.95, tiles: 18 },\n      { name: 'San Diego County', state: 'CA', geoid: '06073', lon: -117.1611, lat: 32.7157, score: 0.57, confidence: 0.82, tiles: 9 },\n      { name: 'King County', state: 'WA', geoid: '53033', lon: -122.3321, lat: 47.5480, score: 0.44, confidence: 0.71, tiles: 8 },\n      \n      // Midwest\n      { name: 'Cook County', state: 'IL', geoid: '17031', lon: -87.6298, lat: 41.8781, score: 0.75, confidence: 0.92, tiles: 15 },\n      { name: 'Wayne County', state: 'MI', geoid: '26163', lon: -83.2454, lat: 42.2791, score: 0.58, confidence: 0.83, tiles: 9 },\n      \n      // South\n      { name: 'Harris County', state: 'TX', geoid: '48201', lon: -95.3698, lat: 29.7604, score: 0.68, confidence: 0.88, tiles: 12 },\n      { name: 'Miami-Dade County', state: 'FL', geoid: '12086', lon: -80.1918, lat: 25.7617, score: 0.48, confidence: 0.76, tiles: 7 },\n      \n      // Northeast\n      { name: 'New York County', state: 'NY', geoid: '36061', lon: -73.9712, lat: 40.7831, score: 0.72, confidence: 0.90, tiles: 14 },\n      { name: 'Philadelphia County', state: 'PA', geoid: '42101', lon: -75.1652, lat: 39.9526, score: 0.51, confidence: 0.78, tiles: 8 }\n    ];\n\n    // Create a feature for each county\n    counties.forEach(county => {\n      // Create a circle for the county using Turf.js\n      const center = [county.lon, county.lat];\n      const radius = 1; // Radius in degrees\n      const options = {steps: 64, units: 'degrees'};\n      const circle = turf.circle(center, radius, options);\n      \n      // Add properties to the feature\n      circle.properties = {\n        NAME: county.name,\n        STATEFP: county.state,\n        GEOID: county.geoid,\n        obsolescence_score: county.score,\n        confidence: county.confidence,\n        tile_count: county.tiles\n      };\n      \n      mockData.features.push(circle);\n    });\n\n    console.log(`Generated ${mockData.features.length} mock counties`);\n    return mockData;\n  };\n\n  // Initialize the map\n  useEffect(() => {\n    if (map.current) return; // Initialize map only once\n\n    try {\n      // Create the map\n      map.current = new mapboxgl.Map({\n        container: mapContainer.current,\n        style: 'mapbox://styles/mapbox/dark-v11',\n        center: [-98.5795, 39.8283], // Center of the US\n        zoom: 3.5,\n        pitch: 60, // Start with 3D view\n        bearing: 30 // Add some rotation for better 3D perspective\n      });\n\n      // Add navigation controls\n      map.current.addControl(new mapboxgl.NavigationControl());\n\n      // Wait for the map to load\n      map.current.on('load', () => {\n        // Generate mock data or fetch real data\n        const geojsonData = generateMockCountyData();\n        \n        // Add a source for the county data\n        map.current.addSource('counties', {\n          type: 'geojson',\n          data: geojsonData\n        });\n\n        // Add a fill-extrusion layer for 3D counties\n        map.current.addLayer({\n          id: 'county-extrusions',\n          type: 'fill-extrusion',\n          source: 'counties',\n          paint: {\n            'fill-extrusion-color': [\n              'interpolate',\n              ['linear'],\n              ['get', 'obsolescence_score'],\n              0, 'rgb(44, 123, 182)',\n              0.5, 'rgb(255, 255, 191)',\n              1, 'rgb(215, 25, 28)'\n            ],\n            'fill-extrusion-height': [\n              '*',\n              ['get', 'confidence'],\n              500000 // Scale factor for height\n            ],\n            'fill-extrusion-base': 0,\n            'fill-extrusion-opacity': 0.8\n          }\n        });\n\n        // Add a line layer for county boundaries with thick white lines\n        map.current.addLayer({\n          id: 'county-borders',\n          type: 'line',\n          source: 'counties',\n          paint: {\n            'line-color': 'white',\n            'line-width': 2,\n            'line-opacity': 0.9\n          }\n        });\n\n        // Create a popup for county information\n        const popup = new mapboxgl.Popup({\n          closeButton: false,\n          closeOnClick: false\n        });\n\n        // Show popup on hover\n        map.current.on('mouseenter', 'county-extrusions', (e) => {\n          map.current.getCanvas().style.cursor = 'pointer';\n          \n          const feature = e.features[0];\n          const props = feature.properties;\n          \n          // Get the center of the county for popup placement\n          const coordinates = e.lngLat;\n          \n          // Create popup content\n          const html = `\n            <div style=\"color: #333;\">\n              <strong>${props.NAME}, ${props.STATEFP}</strong><br>\n              Obsolescence Score: <strong>${parseFloat(props.obsolescence_score).toFixed(2)}</strong><br>\n              Confidence: ${parseFloat(props.confidence).toFixed(2)}<br>\n              Tile Count: ${props.tile_count}\n            </div>\n          `;\n          \n          popup.setLngLat(coordinates)\n            .setHTML(html)\n            .addTo(map.current);\n        });\n\n        // Hide popup on mouseleave\n        map.current.on('mouseleave', 'county-extrusions', () => {\n          map.current.getCanvas().style.cursor = '';\n          popup.remove();\n        });\n\n        // Loading complete\n        setLoading(false);\n      });\n    } catch (err) {\n      console.error('Error initializing map:', err);\n      setError(err.message);\n      setLoading(false);\n    }\n\n    // Clean up on unmount\n    return () => {\n      if (map.current) {\n        map.current.remove();\n      }\n    };\n  }, []);\n\n  return (\n    <div className=\"map-container\">\n      {loading && (\n        <div className=\"loading-overlay\">\n          <div className=\"spinner\"></div>\n          <p>Loading map...</p>\n        </div>\n      )}\n      {error && (\n        <div className=\"error-message\">\n          <p>Error: {error}</p>\n        </div>\n      )}\n      <div ref={mapContainer} className=\"map\" />\n    </div>\n  );\n};\n\nexport default CountyMap;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}