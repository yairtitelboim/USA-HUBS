{"ast":null,"code":"// index.ts\nimport { feature, featureCollection, point } from \"@turf/helpers\";\n\n// lib/sweepline-intersections-export.ts\nimport lib from \"sweepline-intersections\";\nvar sweeplineIntersections = lib;\n\n// index.ts\nfunction lineIntersect(line1, line2, options = {}) {\n  const {\n    removeDuplicates = true,\n    ignoreSelfIntersections = true\n  } = options;\n  let features = [];\n  if (line1.type === \"FeatureCollection\") features = features.concat(line1.features);else if (line1.type === \"Feature\") features.push(line1);else if (line1.type === \"LineString\" || line1.type === \"Polygon\" || line1.type === \"MultiLineString\" || line1.type === \"MultiPolygon\") {\n    features.push(feature(line1));\n  }\n  if (line2.type === \"FeatureCollection\") features = features.concat(line2.features);else if (line2.type === \"Feature\") features.push(line2);else if (line2.type === \"LineString\" || line2.type === \"Polygon\" || line2.type === \"MultiLineString\" || line2.type === \"MultiPolygon\") {\n    features.push(feature(line2));\n  }\n  const intersections = sweeplineIntersections(featureCollection(features), ignoreSelfIntersections);\n  let results = [];\n  if (removeDuplicates) {\n    const unique = {};\n    intersections.forEach(intersection => {\n      const key = intersection.join(\",\");\n      if (!unique[key]) {\n        unique[key] = true;\n        results.push(intersection);\n      }\n    });\n  } else {\n    results = intersections;\n  }\n  return featureCollection(results.map(r => point(r)));\n}\nvar turf_line_intersect_default = lineIntersect;\nexport { turf_line_intersect_default as default, lineIntersect };","map":{"version":3,"names":["feature","featureCollection","point","lib","sweeplineIntersections","lineIntersect","line1","line2","options","removeDuplicates","ignoreSelfIntersections","features","type","concat","push","intersections","results","unique","forEach","intersection","key","join","map","r","turf_line_intersect_default"],"sources":["/Users/yairtitelboim/Documents/Kernel/ALLAPPS/LOGhub/loghub/county-map-app/node_modules/@turf/line-intersect/index.ts","/Users/yairtitelboim/Documents/Kernel/ALLAPPS/LOGhub/loghub/county-map-app/node_modules/@turf/line-intersect/lib/sweepline-intersections-export.ts"],"sourcesContent":["import { feature, featureCollection, point } from \"@turf/helpers\";\nimport {\n  Feature,\n  FeatureCollection,\n  LineString,\n  MultiLineString,\n  MultiPolygon,\n  Point,\n  Polygon,\n} from \"geojson\";\nimport type { Intersection } from \"sweepline-intersections\";\nimport { sweeplineIntersections as findIntersections } from \"./lib/sweepline-intersections-export.js\";\n\n/**\n * Takes any LineString or Polygon GeoJSON and returns the intersecting point(s).\n *\n * @function\n * @param {GeoJSON} line1 any LineString or Polygon\n * @param {GeoJSON} line2 any LineString or Polygon\n * @param {Object} [options={}] Optional parameters\n * @param {boolean} [options.removeDuplicates=true] remove duplicate intersections\n * @param {boolean} [options.ignoreSelfIntersections=true] ignores self-intersections on input features\n * @returns {FeatureCollection<Point>} point(s) that intersect both\n * @example\n * var line1 = turf.lineString([[126, -11], [129, -21]]);\n * var line2 = turf.lineString([[123, -18], [131, -14]]);\n * var intersects = turf.lineIntersect(line1, line2);\n *\n * //addToMap\n * var addToMap = [line1, line2, intersects]\n */\nfunction lineIntersect<\n  G1 extends LineString | MultiLineString | Polygon | MultiPolygon,\n  G2 extends LineString | MultiLineString | Polygon | MultiPolygon,\n>(\n  line1: FeatureCollection<G1> | Feature<G1> | G1,\n  line2: FeatureCollection<G2> | Feature<G2> | G2,\n  options: {\n    removeDuplicates?: boolean;\n    ignoreSelfIntersections?: boolean;\n  } = {}\n): FeatureCollection<Point> {\n  const { removeDuplicates = true, ignoreSelfIntersections = true } = options;\n  let features: Feature<G1 | G2>[] = [];\n  if (line1.type === \"FeatureCollection\")\n    features = features.concat(line1.features);\n  else if (line1.type === \"Feature\") features.push(line1);\n  else if (\n    line1.type === \"LineString\" ||\n    line1.type === \"Polygon\" ||\n    line1.type === \"MultiLineString\" ||\n    line1.type === \"MultiPolygon\"\n  ) {\n    features.push(feature(line1));\n  }\n\n  if (line2.type === \"FeatureCollection\")\n    features = features.concat(line2.features);\n  else if (line2.type === \"Feature\") features.push(line2);\n  else if (\n    line2.type === \"LineString\" ||\n    line2.type === \"Polygon\" ||\n    line2.type === \"MultiLineString\" ||\n    line2.type === \"MultiPolygon\"\n  ) {\n    features.push(feature(line2));\n  }\n\n  const intersections = findIntersections(\n    featureCollection(features),\n    ignoreSelfIntersections\n  );\n\n  let results: Intersection[] = [];\n  if (removeDuplicates) {\n    const unique: Record<string, boolean> = {};\n    intersections.forEach((intersection) => {\n      const key = intersection.join(\",\");\n      if (!unique[key]) {\n        unique[key] = true;\n        results.push(intersection);\n      }\n    });\n  } else {\n    results = intersections;\n  }\n  return featureCollection(results.map((r) => point(r)));\n}\n\nexport { lineIntersect };\nexport default lineIntersect;\n","// Get around problems with moduleResolution node16 and some older libraries.\n// Manifests as \"This expression is not callable ... has no call signatures\"\n// https://stackoverflow.com/a/74709714\n\nimport lib from \"sweepline-intersections\";\n\nexport const sweeplineIntersections = lib as unknown as typeof lib.default;\n"],"mappings":";AAAA,SAASA,OAAA,EAASC,iBAAA,EAAmBC,KAAA,QAAa;;;ACIlD,OAAOC,GAAA,MAAS;AAET,IAAMC,sBAAA,GAAyBD,GAAA;;;ADyBtC,SAASE,cAIPC,KAAA,EACAC,KAAA,EACAC,OAAA,GAGI,CAAC,GACqB;EAC1B,MAAM;IAAEC,gBAAA,GAAmB;IAAMC,uBAAA,GAA0B;EAAK,IAAIF,OAAA;EACpE,IAAIG,QAAA,GAA+B,EAAC;EACpC,IAAIL,KAAA,CAAMM,IAAA,KAAS,qBACjBD,QAAA,GAAWA,QAAA,CAASE,MAAA,CAAOP,KAAA,CAAMK,QAAQ,WAClCL,KAAA,CAAMM,IAAA,KAAS,WAAWD,QAAA,CAASG,IAAA,CAAKR,KAAK,WAEpDA,KAAA,CAAMM,IAAA,KAAS,gBACfN,KAAA,CAAMM,IAAA,KAAS,aACfN,KAAA,CAAMM,IAAA,KAAS,qBACfN,KAAA,CAAMM,IAAA,KAAS,gBACf;IACAD,QAAA,CAASG,IAAA,CAAKd,OAAA,CAAQM,KAAK,CAAC;EAC9B;EAEA,IAAIC,KAAA,CAAMK,IAAA,KAAS,qBACjBD,QAAA,GAAWA,QAAA,CAASE,MAAA,CAAON,KAAA,CAAMI,QAAQ,WAClCJ,KAAA,CAAMK,IAAA,KAAS,WAAWD,QAAA,CAASG,IAAA,CAAKP,KAAK,WAEpDA,KAAA,CAAMK,IAAA,KAAS,gBACfL,KAAA,CAAMK,IAAA,KAAS,aACfL,KAAA,CAAMK,IAAA,KAAS,qBACfL,KAAA,CAAMK,IAAA,KAAS,gBACf;IACAD,QAAA,CAASG,IAAA,CAAKd,OAAA,CAAQO,KAAK,CAAC;EAC9B;EAEA,MAAMQ,aAAA,GAAgBX,sBAAA,CACpBH,iBAAA,CAAkBU,QAAQ,GAC1BD,uBACF;EAEA,IAAIM,OAAA,GAA0B,EAAC;EAC/B,IAAIP,gBAAA,EAAkB;IACpB,MAAMQ,MAAA,GAAkC,CAAC;IACzCF,aAAA,CAAcG,OAAA,CAASC,YAAA,IAAiB;MACtC,MAAMC,GAAA,GAAMD,YAAA,CAAaE,IAAA,CAAK,GAAG;MACjC,IAAI,CAACJ,MAAA,CAAOG,GAAG,GAAG;QAChBH,MAAA,CAAOG,GAAG,IAAI;QACdJ,OAAA,CAAQF,IAAA,CAAKK,YAAY;MAC3B;IACF,CAAC;EACH,OAAO;IACLH,OAAA,GAAUD,aAAA;EACZ;EACA,OAAOd,iBAAA,CAAkBe,OAAA,CAAQM,GAAA,CAAKC,CAAA,IAAMrB,KAAA,CAAMqB,CAAC,CAAC,CAAC;AACvD;AAGA,IAAOC,2BAAA,GAAQnB,aAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}