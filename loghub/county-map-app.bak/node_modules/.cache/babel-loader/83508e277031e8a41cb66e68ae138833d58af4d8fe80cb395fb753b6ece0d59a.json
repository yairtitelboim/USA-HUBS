{"ast":null,"code":"// index.ts\nimport { geojsonEquality } from \"geojson-equality-ts\";\nimport { cleanCoords } from \"@turf/clean-coords\";\nimport { getGeom } from \"@turf/invariant\";\nfunction booleanEqual(feature1, feature2, options = {}) {\n  let precision = options.precision;\n  precision = precision === void 0 || precision === null || isNaN(precision) ? 6 : precision;\n  if (typeof precision !== \"number\" || !(precision >= 0)) {\n    throw new Error(\"precision must be a positive number\");\n  }\n  const type1 = getGeom(feature1).type;\n  const type2 = getGeom(feature2).type;\n  if (type1 !== type2) return false;\n  return geojsonEquality(cleanCoords(feature1), cleanCoords(feature2), {\n    precision\n  });\n}\nvar turf_boolean_equal_default = booleanEqual;\nexport { booleanEqual, turf_boolean_equal_default as default };","map":{"version":3,"names":["geojsonEquality","cleanCoords","getGeom","booleanEqual","feature1","feature2","options","precision","isNaN","Error","type1","type","type2","turf_boolean_equal_default"],"sources":["/Users/yairtitelboim/Documents/Kernel/ALLAPPS/LOGhub/loghub/county-map-app/node_modules/@turf/boolean-equal/index.ts"],"sourcesContent":["import { Feature, Geometry } from \"geojson\";\nimport { geojsonEquality } from \"geojson-equality-ts\";\nimport { cleanCoords } from \"@turf/clean-coords\";\nimport { getGeom } from \"@turf/invariant\";\n\n/**\n * Determine whether two geometries of the same type have identical X,Y coordinate values.\n * See http://edndoc.esri.com/arcsde/9.0/general_topics/understand_spatial_relations.htm\n *\n * @function\n * @param {Geometry|Feature} feature1 GeoJSON input\n * @param {Geometry|Feature} feature2 GeoJSON input\n * @param {Object} [options={}] Optional parameters\n * @param {number} [options.precision=6] decimal precision to use when comparing coordinates\n * @returns {boolean} true if the objects are equal, false otherwise\n * @example\n * var pt1 = turf.point([0, 0]);\n * var pt2 = turf.point([0, 0]);\n * var pt3 = turf.point([1, 1]);\n *\n * turf.booleanEqual(pt1, pt2);\n * //= true\n * turf.booleanEqual(pt2, pt3);\n * //= false\n */\nfunction booleanEqual(\n  feature1: Feature<any> | Geometry,\n  feature2: Feature<any> | Geometry,\n  options: {\n    precision?: number;\n  } = {}\n): boolean {\n  let precision = options.precision;\n\n  precision =\n    precision === undefined || precision === null || isNaN(precision)\n      ? 6\n      : precision;\n\n  if (typeof precision !== \"number\" || !(precision >= 0)) {\n    throw new Error(\"precision must be a positive number\");\n  }\n\n  const type1 = getGeom(feature1).type;\n  const type2 = getGeom(feature2).type;\n  if (type1 !== type2) return false;\n\n  return geojsonEquality(cleanCoords(feature1), cleanCoords(feature2), {\n    precision,\n  });\n}\n\nexport { booleanEqual };\nexport default booleanEqual;\n"],"mappings":";AACA,SAASA,eAAA,QAAuB;AAChC,SAASC,WAAA,QAAmB;AAC5B,SAASC,OAAA,QAAe;AAsBxB,SAASC,aACPC,QAAA,EACAC,QAAA,EACAC,OAAA,GAEI,CAAC,GACI;EACT,IAAIC,SAAA,GAAYD,OAAA,CAAQC,SAAA;EAExBA,SAAA,GACEA,SAAA,KAAc,UAAaA,SAAA,KAAc,QAAQC,KAAA,CAAMD,SAAS,IAC5D,IACAA,SAAA;EAEN,IAAI,OAAOA,SAAA,KAAc,YAAY,EAAEA,SAAA,IAAa,IAAI;IACtD,MAAM,IAAIE,KAAA,CAAM,qCAAqC;EACvD;EAEA,MAAMC,KAAA,GAAQR,OAAA,CAAQE,QAAQ,EAAEO,IAAA;EAChC,MAAMC,KAAA,GAAQV,OAAA,CAAQG,QAAQ,EAAEM,IAAA;EAChC,IAAID,KAAA,KAAUE,KAAA,EAAO,OAAO;EAE5B,OAAOZ,eAAA,CAAgBC,WAAA,CAAYG,QAAQ,GAAGH,WAAA,CAAYI,QAAQ,GAAG;IACnEE;EACF,CAAC;AACH;AAGA,IAAOM,0BAAA,GAAQV,YAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}