{"ast":null,"code":"// index.ts\nimport { multiPolygon, polygon } from \"@turf/helpers\";\nimport { geomEach } from \"@turf/meta\";\nimport * as polyclip from \"polyclip-ts\";\nfunction intersect(features, options = {}) {\n  const geoms = [];\n  geomEach(features, geom => {\n    geoms.push(geom.coordinates);\n  });\n  if (geoms.length < 2) {\n    throw new Error(\"Must specify at least 2 geometries\");\n  }\n  const intersection2 = polyclip.intersection(geoms[0], ...geoms.slice(1));\n  if (intersection2.length === 0) return null;\n  if (intersection2.length === 1) return polygon(intersection2[0], options.properties);\n  return multiPolygon(intersection2, options.properties);\n}\nvar turf_intersect_default = intersect;\nexport { turf_intersect_default as default, intersect };","map":{"version":3,"names":["multiPolygon","polygon","geomEach","polyclip","intersect","features","options","geoms","geom","push","coordinates","length","Error","intersection2","intersection","slice","properties","turf_intersect_default"],"sources":["/Users/yairtitelboim/Documents/Kernel/ALLAPPS/LOGhub/loghub/county-map-app/node_modules/@turf/intersect/index.ts"],"sourcesContent":["import {\n  Feature,\n  GeoJsonProperties,\n  MultiPolygon,\n  Polygon,\n  FeatureCollection,\n} from \"geojson\";\nimport { multiPolygon, polygon } from \"@turf/helpers\";\nimport { geomEach } from \"@turf/meta\";\nimport * as polyclip from \"polyclip-ts\";\n\n/**\n * Takes {@link Polygon|polygon} or {@link MultiPolygon|multi-polygon} geometries and\n * finds their polygonal intersection. If they don't intersect, returns null.\n *\n * @function\n * @param {FeatureCollection<Polygon | MultiPolygon>} features the features to intersect\n * @param {Object} [options={}] Optional Parameters\n * @param {Object} [options.properties={}] Translate GeoJSON Properties to Feature\n * @returns {Feature|null} returns a feature representing the area they share (either a {@link Polygon} or\n * {@link MultiPolygon}). If they do not share any area, returns `null`.\n * @example\n * var poly1 = turf.polygon([[\n *   [-122.801742, 45.48565],\n *   [-122.801742, 45.60491],\n *   [-122.584762, 45.60491],\n *   [-122.584762, 45.48565],\n *   [-122.801742, 45.48565]\n * ]]);\n *\n * var poly2 = turf.polygon([[\n *   [-122.520217, 45.535693],\n *   [-122.64038, 45.553967],\n *   [-122.720031, 45.526554],\n *   [-122.669906, 45.507309],\n *   [-122.723464, 45.446643],\n *   [-122.532577, 45.408574],\n *   [-122.487258, 45.477466],\n *   [-122.520217, 45.535693]\n * ]]);\n *\n * var intersection = turf.intersect(turf.featureCollection([poly1, poly2]));\n *\n * //addToMap\n * var addToMap = [poly1, poly2, intersection];\n */\nfunction intersect<P extends GeoJsonProperties = GeoJsonProperties>(\n  features: FeatureCollection<Polygon | MultiPolygon>,\n  options: {\n    properties?: P;\n  } = {}\n): Feature<Polygon | MultiPolygon, P> | null {\n  const geoms: polyclip.Geom[] = [];\n\n  geomEach(features, (geom) => {\n    geoms.push(geom.coordinates as polyclip.Geom);\n  });\n\n  if (geoms.length < 2) {\n    throw new Error(\"Must specify at least 2 geometries\");\n  }\n  const intersection = polyclip.intersection(geoms[0], ...geoms.slice(1));\n  if (intersection.length === 0) return null;\n  if (intersection.length === 1)\n    return polygon(intersection[0], options.properties);\n  return multiPolygon(intersection, options.properties);\n}\n\nexport { intersect };\nexport default intersect;\n"],"mappings":";AAOA,SAASA,YAAA,EAAcC,OAAA,QAAe;AACtC,SAASC,QAAA,QAAgB;AACzB,YAAYC,QAAA,MAAc;AAqC1B,SAASC,UACPC,QAAA,EACAC,OAAA,GAEI,CAAC,GACsC;EAC3C,MAAMC,KAAA,GAAyB,EAAC;EAEhCL,QAAA,CAASG,QAAA,EAAWG,IAAA,IAAS;IAC3BD,KAAA,CAAME,IAAA,CAAKD,IAAA,CAAKE,WAA4B;EAC9C,CAAC;EAED,IAAIH,KAAA,CAAMI,MAAA,GAAS,GAAG;IACpB,MAAM,IAAIC,KAAA,CAAM,oCAAoC;EACtD;EACA,MAAMC,aAAA,GAAwBV,QAAA,CAAAW,YAAA,CAAaP,KAAA,CAAM,CAAC,GAAG,GAAGA,KAAA,CAAMQ,KAAA,CAAM,CAAC,CAAC;EACtE,IAAIF,aAAA,CAAaF,MAAA,KAAW,GAAG,OAAO;EACtC,IAAIE,aAAA,CAAaF,MAAA,KAAW,GAC1B,OAAOV,OAAA,CAAQY,aAAA,CAAa,CAAC,GAAGP,OAAA,CAAQU,UAAU;EACpD,OAAOhB,YAAA,CAAaa,aAAA,EAAcP,OAAA,CAAQU,UAAU;AACtD;AAGA,IAAOC,sBAAA,GAAQb,SAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}