{"ast":null,"code":"// index.ts\nimport { coordAll, featureEach } from \"@turf/meta\";\nimport { getCoords } from \"@turf/invariant\";\nimport { featureCollection, isObject, isNumber } from \"@turf/helpers\";\nimport { centerMean } from \"@turf/center-mean\";\nimport { pointsWithinPolygon } from \"@turf/points-within-polygon\";\nimport { ellipse } from \"@turf/ellipse\";\nfunction standardDeviationalEllipse(points, options) {\n  var _a;\n  options = options || {};\n  if (!isObject(options)) throw new Error(\"options is invalid\");\n  const steps = options.steps || 64;\n  const weightTerm = options.weight;\n  const properties = options.properties || {};\n  if (!isNumber(steps)) throw new Error(\"steps must be a number\");\n  if (!isObject(properties)) throw new Error(\"properties must be a number\");\n  const numberOfFeatures = coordAll(points).length;\n  const meanCenter = centerMean(points, {\n    weight: weightTerm\n  });\n  let xDeviationSquaredSum = 0;\n  let yDeviationSquaredSum = 0;\n  let xyDeviationSum = 0;\n  featureEach(points, function (point) {\n    var _a2;\n    const weight = weightTerm ? ((_a2 = point.properties) == null ? void 0 : _a2[weightTerm]) || 1 : 1;\n    const deviation = getDeviations(getCoords(point), getCoords(meanCenter));\n    xDeviationSquaredSum += Math.pow(deviation.x, 2) * weight;\n    yDeviationSquaredSum += Math.pow(deviation.y, 2) * weight;\n    xyDeviationSum += deviation.x * deviation.y * weight;\n  });\n  const bigA = xDeviationSquaredSum - yDeviationSquaredSum;\n  const bigB = Math.sqrt(Math.pow(bigA, 2) + 4 * Math.pow(xyDeviationSum, 2));\n  const bigC = 2 * xyDeviationSum;\n  const theta = Math.atan((bigA + bigB) / bigC);\n  const thetaDeg = theta * 180 / Math.PI;\n  let sigmaXsum = 0;\n  let sigmaYsum = 0;\n  let weightsum = 0;\n  featureEach(points, function (point) {\n    var _a2;\n    const weight = weightTerm ? ((_a2 = point.properties) == null ? void 0 : _a2[weightTerm]) || 1 : 1;\n    const deviation = getDeviations(getCoords(point), getCoords(meanCenter));\n    sigmaXsum += Math.pow(deviation.x * Math.cos(theta) - deviation.y * Math.sin(theta), 2) * weight;\n    sigmaYsum += Math.pow(deviation.x * Math.sin(theta) + deviation.y * Math.cos(theta), 2) * weight;\n    weightsum += weight;\n  });\n  const sigmaX = Math.sqrt(2 * sigmaXsum / weightsum);\n  const sigmaY = Math.sqrt(2 * sigmaYsum / weightsum);\n  const theEllipse = ellipse(meanCenter, sigmaX, sigmaY, {\n    units: \"degrees\",\n    angle: thetaDeg,\n    steps,\n    properties\n  });\n  const pointsWithinEllipse = pointsWithinPolygon(points, featureCollection([theEllipse]));\n  const standardDeviationalEllipseProperties = {\n    meanCenterCoordinates: getCoords(meanCenter),\n    semiMajorAxis: sigmaX,\n    semiMinorAxis: sigmaY,\n    numberOfFeatures,\n    angle: thetaDeg,\n    percentageWithinEllipse: 100 * coordAll(pointsWithinEllipse).length / numberOfFeatures\n  };\n  theEllipse.properties = (_a = theEllipse.properties) != null ? _a : {};\n  theEllipse.properties.standardDeviationalEllipse = standardDeviationalEllipseProperties;\n  return theEllipse;\n}\nfunction getDeviations(coordinates, center) {\n  return {\n    x: coordinates[0] - center[0],\n    y: coordinates[1] - center[1]\n  };\n}\nvar turf_standard_deviational_ellipse_default = standardDeviationalEllipse;\nexport { turf_standard_deviational_ellipse_default as default, standardDeviationalEllipse };","map":{"version":3,"names":["coordAll","featureEach","getCoords","featureCollection","isObject","isNumber","centerMean","pointsWithinPolygon","ellipse","standardDeviationalEllipse","points","options","_a","Error","steps","weightTerm","weight","properties","numberOfFeatures","length","meanCenter","xDeviationSquaredSum","yDeviationSquaredSum","xyDeviationSum","point","_a2","deviation","getDeviations","Math","pow","x","y","bigA","bigB","sqrt","bigC","theta","atan","thetaDeg","PI","sigmaXsum","sigmaYsum","weightsum","cos","sin","sigmaX","sigmaY","theEllipse","units","angle","pointsWithinEllipse","standardDeviationalEllipseProperties","meanCenterCoordinates","semiMajorAxis","semiMinorAxis","percentageWithinEllipse","coordinates","center","turf_standard_deviational_ellipse_default"],"sources":["/Users/yairtitelboim/Documents/Kernel/ALLAPPS/LOGhub/loghub/county-map-app/node_modules/@turf/standard-deviational-ellipse/index.ts"],"sourcesContent":["import {\n  FeatureCollection,\n  Feature,\n  Position,\n  Polygon,\n  GeoJsonProperties,\n  Point,\n} from \"geojson\";\nimport { coordAll, featureEach } from \"@turf/meta\";\nimport { getCoords } from \"@turf/invariant\";\nimport { featureCollection, isObject, isNumber } from \"@turf/helpers\";\nimport { centerMean } from \"@turf/center-mean\";\nimport { pointsWithinPolygon } from \"@turf/points-within-polygon\";\nimport { ellipse } from \"@turf/ellipse\";\n\ndeclare interface SDEProps {\n  meanCenterCoordinates: Position;\n  semiMajorAxis: number;\n  semiMinorAxis: number;\n  numberOfFeatures: number;\n  angle: number;\n  percentageWithinEllipse: number;\n}\n\ndeclare interface StandardDeviationalEllipse extends Feature<Polygon> {\n  properties: {\n    standardDeviationalEllipse: SDEProps;\n    [key: string]: any;\n  } | null;\n}\n\n/**\n * Takes a collection of features and returns a standard deviational ellipse,\n * also known as a “directional distribution.” The standard deviational ellipse\n * aims to show the direction and the distribution of a dataset by drawing\n * an ellipse that contains about one standard deviation’s worth (~ 70%) of the\n * data.\n *\n * This module mirrors the functionality of {@link http://desktop.arcgis.com/en/arcmap/10.3/tools/spatial-statistics-toolbox/directional-distribution.htm|Directional Distribution}\n * in ArcGIS and the {@link http://arken.nmbu.no/~havatv/gis/qgisplugins/SDEllipse/|QGIS Standard Deviational Ellipse Plugin}\n *\n * **Bibliography**\n *\n * • Robert S. Yuill, “The Standard Deviational Ellipse; An Updated Tool for\n * Spatial Description,” _Geografiska Annaler_ 53, no. 1 (1971): 28–39,\n * doi:{@link https://doi.org/10.2307/490885|10.2307/490885}.\n *\n * • Paul Hanly Furfey, “A Note on Lefever’s “Standard Deviational Ellipse,”\n * _American Journal of Sociology_ 33, no. 1 (1927): 94—98,\n * doi:{@link https://doi.org/10.1086/214336|10.1086/214336}.\n *\n *\n * @function\n * @param {FeatureCollection<Point>} points GeoJSON points\n * @param {Object} [options={}] Optional parameters\n * @param {string} [options.weight] the property name used to weight the center\n * @param {number} [options.steps=64] number of steps for the polygon\n * @param {Object} [options.properties={}] properties to pass to the resulting ellipse\n * @returns {Feature<Polygon>} an elliptical Polygon that includes approximately 1 SD of the dataset within it.\n * @example\n *\n * const bbox = [-74, 40.72, -73.98, 40.74];\n * const points = turf.randomPoint(400, {bbox: bbox});\n * const sdEllipse = turf.standardDeviationalEllipse(points);\n *\n * //addToMap\n * const addToMap = [points, sdEllipse];\n *\n */\nfunction standardDeviationalEllipse(\n  points: FeatureCollection<Point>,\n  options?: {\n    properties?: GeoJsonProperties;\n    weight?: string;\n    steps?: number;\n  }\n): StandardDeviationalEllipse {\n  // Optional params\n  options = options || {};\n  if (!isObject(options)) throw new Error(\"options is invalid\");\n  const steps = options.steps || 64;\n  const weightTerm = options.weight;\n  const properties = options.properties || {};\n\n  // Validation:\n  if (!isNumber(steps)) throw new Error(\"steps must be a number\");\n  if (!isObject(properties)) throw new Error(\"properties must be a number\");\n\n  // Calculate mean center & number of features:\n  const numberOfFeatures = coordAll(points).length;\n  const meanCenter = centerMean(points, { weight: weightTerm });\n\n  // Calculate angle of rotation:\n  // [X, Y] = mean center of all [x, y].\n  // theta = arctan( (A + B) / C )\n  // A = sum((x - X)^2) - sum((y - Y)^2)\n  // B = sqrt(A^2 + 4(sum((x - X)(y - Y))^2))\n  // C = 2(sum((x - X)(y - Y)))\n\n  let xDeviationSquaredSum = 0;\n  let yDeviationSquaredSum = 0;\n  let xyDeviationSum = 0;\n\n  featureEach(points, function (point) {\n    // weightTerm or point.properties might be undefined, hence this check.\n    const weight = weightTerm ? point.properties?.[weightTerm] || 1 : 1;\n    const deviation = getDeviations(getCoords(point), getCoords(meanCenter));\n    xDeviationSquaredSum += Math.pow(deviation.x, 2) * weight;\n    yDeviationSquaredSum += Math.pow(deviation.y, 2) * weight;\n    xyDeviationSum += deviation.x * deviation.y * weight;\n  });\n\n  const bigA = xDeviationSquaredSum - yDeviationSquaredSum;\n  const bigB = Math.sqrt(Math.pow(bigA, 2) + 4 * Math.pow(xyDeviationSum, 2));\n  const bigC = 2 * xyDeviationSum;\n  const theta = Math.atan((bigA + bigB) / bigC);\n  const thetaDeg = (theta * 180) / Math.PI;\n\n  // Calculate axes:\n  // sigmaX = sqrt((1 / n - 2) * sum((((x - X) * cos(theta)) - ((y - Y) * sin(theta)))^2))\n  // sigmaY = sqrt((1 / n - 2) * sum((((x - X) * sin(theta)) - ((y - Y) * cos(theta)))^2))\n  let sigmaXsum = 0;\n  let sigmaYsum = 0;\n  let weightsum = 0;\n  featureEach(points, function (point) {\n    // weightTerm or point.properties might be undefined, hence this check.\n    const weight = weightTerm ? point.properties?.[weightTerm] || 1 : 1;\n    const deviation = getDeviations(getCoords(point), getCoords(meanCenter));\n    sigmaXsum +=\n      Math.pow(\n        deviation.x * Math.cos(theta) - deviation.y * Math.sin(theta),\n        2\n      ) * weight;\n    sigmaYsum +=\n      Math.pow(\n        deviation.x * Math.sin(theta) + deviation.y * Math.cos(theta),\n        2\n      ) * weight;\n    weightsum += weight;\n  });\n\n  const sigmaX = Math.sqrt((2 * sigmaXsum) / weightsum);\n  const sigmaY = Math.sqrt((2 * sigmaYsum) / weightsum);\n\n  const theEllipse: Feature<Polygon> = ellipse(meanCenter, sigmaX, sigmaY, {\n    units: \"degrees\",\n    angle: thetaDeg,\n    steps: steps,\n    properties: properties,\n  });\n  const pointsWithinEllipse = pointsWithinPolygon(\n    points,\n    featureCollection([theEllipse])\n  );\n  const standardDeviationalEllipseProperties = {\n    meanCenterCoordinates: getCoords(meanCenter),\n    semiMajorAxis: sigmaX,\n    semiMinorAxis: sigmaY,\n    numberOfFeatures: numberOfFeatures,\n    angle: thetaDeg,\n    percentageWithinEllipse:\n      (100 * coordAll(pointsWithinEllipse).length) / numberOfFeatures,\n  };\n  // Make sure properties object exists.\n  theEllipse.properties = theEllipse.properties ?? {};\n  theEllipse.properties.standardDeviationalEllipse =\n    standardDeviationalEllipseProperties;\n\n  // We have added the StandardDeviationalEllipse specific properties, so\n  // confirm this to Typescript with a cast.\n  return theEllipse as StandardDeviationalEllipse;\n}\n\n/**\n * Get x_i - X and y_i - Y\n *\n * @private\n * @param {Position} coordinates Array of [x_i, y_i]\n * @param {Position} center Array of [X, Y]\n * @returns {Object} { x: n, y: m }\n */\nfunction getDeviations(coordinates: Position, center: Position) {\n  return {\n    x: coordinates[0] - center[0],\n    y: coordinates[1] - center[1],\n  };\n}\n\nexport { standardDeviationalEllipse, SDEProps, StandardDeviationalEllipse };\nexport default standardDeviationalEllipse;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}