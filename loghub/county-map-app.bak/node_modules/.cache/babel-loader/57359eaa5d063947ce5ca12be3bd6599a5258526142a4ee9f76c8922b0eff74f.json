{"ast":null,"code":"// index.ts\nimport { coordEach } from \"@turf/meta\";\nimport { isObject } from \"@turf/helpers\";\nimport { clone } from \"@turf/clone\";\nfunction flip(geojson, options) {\n  var _a;\n  options = options || {};\n  if (!isObject(options)) throw new Error(\"options is invalid\");\n  const mutate = (_a = options.mutate) != null ? _a : false;\n  if (!geojson) throw new Error(\"geojson is required\");\n  if (mutate === false || mutate === void 0) geojson = clone(geojson);\n  coordEach(geojson, function (coord) {\n    var x = coord[0];\n    var y = coord[1];\n    coord[0] = y;\n    coord[1] = x;\n  });\n  return geojson;\n}\nvar turf_flip_default = flip;\nexport { turf_flip_default as default, flip };","map":{"version":3,"names":["coordEach","isObject","clone","flip","geojson","options","_a","Error","mutate","coord","x","y","turf_flip_default"],"sources":["/Users/yairtitelboim/Documents/Kernel/ALLAPPS/LOGhub/loghub/county-map-app/node_modules/@turf/flip/index.ts"],"sourcesContent":["import { coordEach } from \"@turf/meta\";\nimport { isObject, AllGeoJSON } from \"@turf/helpers\";\nimport { clone } from \"@turf/clone\";\n\n/**\n * Takes input features and flips all of their coordinates from `[x, y]` to `[y, x]`.\n *\n * @function\n * @param {GeoJSON} geojson input features\n * @param {Object} [options={}] Optional parameters\n * @param {boolean} [options.mutate=false] allows GeoJSON input to be mutated (significant performance increase if true)\n * @returns {GeoJSON} a feature or set of features of the same type as `input` with flipped coordinates\n * @example\n * var serbia = turf.point([20.566406, 43.421008]);\n *\n * var saudiArabia = turf.flip(serbia);\n *\n * //addToMap\n * var addToMap = [serbia, saudiArabia];\n */\nfunction flip<T extends AllGeoJSON>(\n  geojson: T,\n  options?: {\n    mutate?: boolean;\n  }\n): T {\n  // Optional parameters\n  options = options || {};\n  if (!isObject(options)) throw new Error(\"options is invalid\");\n  const mutate = options.mutate ?? false;\n\n  if (!geojson) throw new Error(\"geojson is required\");\n  // ensure that we don't modify features in-place and changes to the\n  // output do not change the previous feature, including changes to nested\n  // properties.\n  if (mutate === false || mutate === undefined) geojson = clone(geojson);\n\n  coordEach(geojson, function (coord) {\n    var x = coord[0];\n    var y = coord[1];\n    coord[0] = y;\n    coord[1] = x;\n  });\n  return geojson;\n}\n\nexport { flip };\nexport default flip;\n"],"mappings":";AAAA,SAASA,SAAA,QAAiB;AAC1B,SAASC,QAAA,QAA4B;AACrC,SAASC,KAAA,QAAa;AAkBtB,SAASC,KACPC,OAAA,EACAC,OAAA,EAGG;EAzBL,IAAAC,EAAA;EA2BED,OAAA,GAAUA,OAAA,IAAW,CAAC;EACtB,IAAI,CAACJ,QAAA,CAASI,OAAO,GAAG,MAAM,IAAIE,KAAA,CAAM,oBAAoB;EAC5D,MAAMC,MAAA,IAASF,EAAA,GAAAD,OAAA,CAAQG,MAAA,KAAR,OAAAF,EAAA,GAAkB;EAEjC,IAAI,CAACF,OAAA,EAAS,MAAM,IAAIG,KAAA,CAAM,qBAAqB;EAInD,IAAIC,MAAA,KAAW,SAASA,MAAA,KAAW,QAAWJ,OAAA,GAAUF,KAAA,CAAME,OAAO;EAErEJ,SAAA,CAAUI,OAAA,EAAS,UAAUK,KAAA,EAAO;IAClC,IAAIC,CAAA,GAAID,KAAA,CAAM,CAAC;IACf,IAAIE,CAAA,GAAIF,KAAA,CAAM,CAAC;IACfA,KAAA,CAAM,CAAC,IAAIE,CAAA;IACXF,KAAA,CAAM,CAAC,IAAIC,CAAA;EACb,CAAC;EACD,OAAON,OAAA;AACT;AAGA,IAAOQ,iBAAA,GAAQT,IAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}