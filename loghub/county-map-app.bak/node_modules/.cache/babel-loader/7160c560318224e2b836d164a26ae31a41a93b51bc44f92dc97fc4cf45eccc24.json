{"ast":null,"code":"// index.ts\nimport { geomEach, coordEach } from \"@turf/meta\";\nimport { isNumber, point } from \"@turf/helpers\";\nfunction centerMean(geojson, options = {}) {\n  let sumXs = 0;\n  let sumYs = 0;\n  let sumNs = 0;\n  geomEach(geojson, function (geom, featureIndex, properties) {\n    let weight = options.weight ? properties == null ? void 0 : properties[options.weight] : void 0;\n    weight = weight === void 0 || weight === null ? 1 : weight;\n    if (!isNumber(weight)) throw new Error(\"weight value must be a number for feature index \" + featureIndex);\n    weight = Number(weight);\n    if (weight > 0) {\n      coordEach(geom, function (coord) {\n        sumXs += coord[0] * weight;\n        sumYs += coord[1] * weight;\n        sumNs += weight;\n      });\n    }\n  });\n  return point([sumXs / sumNs, sumYs / sumNs], options.properties, options);\n}\nvar turf_center_mean_default = centerMean;\nexport { centerMean, turf_center_mean_default as default };","map":{"version":3,"names":["geomEach","coordEach","isNumber","point","centerMean","geojson","options","sumXs","sumYs","sumNs","geom","featureIndex","properties","weight","Error","Number","coord","turf_center_mean_default"],"sources":["/Users/yairtitelboim/Documents/Kernel/ALLAPPS/LOGhub/loghub/county-map-app/node_modules/@turf/center-mean/index.ts"],"sourcesContent":["import { BBox, Feature, Point, GeoJsonProperties } from \"geojson\";\nimport { geomEach, coordEach } from \"@turf/meta\";\nimport { isNumber, point, Id } from \"@turf/helpers\";\n\n/**\n * Takes a {@link Feature} or {@link FeatureCollection} and returns the mean center. Can be weighted.\n *\n * @function\n * @param {GeoJSON} geojson GeoJSON to be centered\n * @param {Object} [options={}] Optional parameters\n * @param {Object} [options.properties={}] Translate GeoJSON Properties to Point\n * @param {Object} [options.bbox={}] Translate GeoJSON BBox to Point\n * @param {Object} [options.id={}] Translate GeoJSON Id to Point\n * @param {string} [options.weight] the property name used to weight the center\n * @returns {Feature<Point>} a Point feature at the mean center point of all input features\n * @example\n * var features = turf.featureCollection([\n *   turf.point([-97.522259, 35.4691], {value: 10}),\n *   turf.point([-97.502754, 35.463455], {value: 3}),\n *   turf.point([-97.508269, 35.463245], {value: 5})\n * ]);\n *\n * var options = {weight: \"value\"}\n * var mean = turf.centerMean(features, options);\n *\n * //addToMap\n * var addToMap = [features, mean]\n * mean.properties['marker-size'] = 'large';\n * mean.properties['marker-color'] = '#000';\n */\nfunction centerMean<P extends GeoJsonProperties = GeoJsonProperties>(\n  geojson: any, // To-Do include Typescript AllGeoJSON\n  options: { properties?: P; bbox?: BBox; id?: Id; weight?: string } = {}\n): Feature<Point, P> {\n  let sumXs = 0;\n  let sumYs = 0;\n  let sumNs = 0;\n  geomEach(geojson, function (geom, featureIndex, properties) {\n    let weight = options.weight ? properties?.[options.weight] : undefined;\n    weight = weight === undefined || weight === null ? 1 : weight;\n    if (!isNumber(weight))\n      throw new Error(\n        \"weight value must be a number for feature index \" + featureIndex\n      );\n    weight = Number(weight);\n    if (weight > 0) {\n      coordEach(geom, function (coord) {\n        sumXs += coord[0] * weight;\n        sumYs += coord[1] * weight;\n        sumNs += weight;\n      });\n    }\n  });\n  return point([sumXs / sumNs, sumYs / sumNs], options.properties, options);\n}\n\nexport { centerMean };\nexport default centerMean;\n"],"mappings":";AACA,SAASA,QAAA,EAAUC,SAAA,QAAiB;AACpC,SAASC,QAAA,EAAUC,KAAA,QAAiB;AA4BpC,SAASC,WACPC,OAAA,EACAC,OAAA,GAAqE,CAAC,GACnD;EACnB,IAAIC,KAAA,GAAQ;EACZ,IAAIC,KAAA,GAAQ;EACZ,IAAIC,KAAA,GAAQ;EACZT,QAAA,CAASK,OAAA,EAAS,UAAUK,IAAA,EAAMC,YAAA,EAAcC,UAAA,EAAY;IAC1D,IAAIC,MAAA,GAASP,OAAA,CAAQO,MAAA,GAASD,UAAA,oBAAAA,UAAA,CAAaN,OAAA,CAAQO,MAAA,IAAU;IAC7DA,MAAA,GAASA,MAAA,KAAW,UAAaA,MAAA,KAAW,OAAO,IAAIA,MAAA;IACvD,IAAI,CAACX,QAAA,CAASW,MAAM,GAClB,MAAM,IAAIC,KAAA,CACR,qDAAqDH,YACvD;IACFE,MAAA,GAASE,MAAA,CAAOF,MAAM;IACtB,IAAIA,MAAA,GAAS,GAAG;MACdZ,SAAA,CAAUS,IAAA,EAAM,UAAUM,KAAA,EAAO;QAC/BT,KAAA,IAASS,KAAA,CAAM,CAAC,IAAIH,MAAA;QACpBL,KAAA,IAASQ,KAAA,CAAM,CAAC,IAAIH,MAAA;QACpBJ,KAAA,IAASI,MAAA;MACX,CAAC;IACH;EACF,CAAC;EACD,OAAOV,KAAA,CAAM,CAACI,KAAA,GAAQE,KAAA,EAAOD,KAAA,GAAQC,KAAK,GAAGH,OAAA,CAAQM,UAAA,EAAYN,OAAO;AAC1E;AAGA,IAAOW,wBAAA,GAAQb,UAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}