{"ast":null,"code":"// index.ts\nimport { convertLength, earthRadius } from \"@turf/helpers\";\nimport { getCoord } from \"@turf/invariant\";\nfunction rhumbDistance(from, to, options = {}) {\n  const origin = getCoord(from);\n  const destination = getCoord(to);\n  destination[0] += destination[0] - origin[0] > 180 ? -360 : origin[0] - destination[0] > 180 ? 360 : 0;\n  const distanceInMeters = calculateRhumbDistance(origin, destination);\n  const distance = convertLength(distanceInMeters, \"meters\", options.units);\n  return distance;\n}\nfunction calculateRhumbDistance(origin, destination, radius) {\n  radius = radius === void 0 ? earthRadius : Number(radius);\n  const R = radius;\n  const phi1 = origin[1] * Math.PI / 180;\n  const phi2 = destination[1] * Math.PI / 180;\n  const DeltaPhi = phi2 - phi1;\n  let DeltaLambda = Math.abs(destination[0] - origin[0]) * Math.PI / 180;\n  if (DeltaLambda > Math.PI) {\n    DeltaLambda -= 2 * Math.PI;\n  }\n  const DeltaPsi = Math.log(Math.tan(phi2 / 2 + Math.PI / 4) / Math.tan(phi1 / 2 + Math.PI / 4));\n  const q = Math.abs(DeltaPsi) > 1e-11 ? DeltaPhi / DeltaPsi : Math.cos(phi1);\n  const delta = Math.sqrt(DeltaPhi * DeltaPhi + q * q * DeltaLambda * DeltaLambda);\n  const dist = delta * R;\n  return dist;\n}\nvar turf_rhumb_distance_default = rhumbDistance;\nexport { turf_rhumb_distance_default as default, rhumbDistance };","map":{"version":3,"names":["convertLength","earthRadius","getCoord","rhumbDistance","from","to","options","origin","destination","distanceInMeters","calculateRhumbDistance","distance","units","radius","Number","R","phi1","Math","PI","phi2","DeltaPhi","DeltaLambda","abs","DeltaPsi","log","tan","q","cos","delta","sqrt","dist","turf_rhumb_distance_default"],"sources":["/Users/yairtitelboim/Documents/Kernel/ALLAPPS/LOGhub/loghub/county-map-app/node_modules/@turf/rhumb-distance/index.ts"],"sourcesContent":["// https://en.wikipedia.org/wiki/Rhumb_line\nimport { convertLength, Coord, earthRadius, Units } from \"@turf/helpers\";\nimport { getCoord } from \"@turf/invariant\";\n\n/**\n * Calculates the distance along a rhumb line between two {@link Point|points} in degrees, radians,\n * miles, or kilometers.\n *\n * @function\n * @param {Coord} from origin point\n * @param {Coord} to destination point\n * @param {Object} [options] Optional parameters\n * @param {string} [options.units=\"kilometers\"] can be degrees, radians, miles, or kilometers\n * @returns {number} distance between the two points\n * @example\n * var from = turf.point([-75.343, 39.984]);\n * var to = turf.point([-75.534, 39.123]);\n * var options = {units: 'miles'};\n *\n * var distance = turf.rhumbDistance(from, to, options);\n *\n * //addToMap\n * var addToMap = [from, to];\n * from.properties.distance = distance;\n * to.properties.distance = distance;\n */\nfunction rhumbDistance(\n  from: Coord,\n  to: Coord,\n  options: {\n    units?: Units;\n  } = {}\n): number {\n  const origin = getCoord(from);\n  const destination = getCoord(to);\n\n  // compensate the crossing of the 180th meridian (https://macwright.org/2016/09/26/the-180th-meridian.html)\n  // solution from https://github.com/mapbox/mapbox-gl-js/issues/3250#issuecomment-294887678\n  destination[0] +=\n    destination[0] - origin[0] > 180\n      ? -360\n      : origin[0] - destination[0] > 180\n        ? 360\n        : 0;\n  const distanceInMeters = calculateRhumbDistance(origin, destination);\n  const distance = convertLength(distanceInMeters, \"meters\", options.units);\n  return distance;\n}\n\n/**\n * Returns the distance travelling from ‘this’ point to destination point along a rhumb line.\n * Adapted from Geodesy: https://github.com/chrisveness/geodesy/blob/master/latlon-spherical.js\n *\n * @private\n * @param   {Array<number>} origin point.\n * @param   {Array<number>} destination point.\n * @param   {number} [radius=6371e3] - (Mean) radius of earth (defaults to radius in metres).\n * @returns {number} Distance in km between this point and destination point (same units as radius).\n *\n * @example\n *     var p1 = new LatLon(51.127, 1.338);\n *     var p2 = new LatLon(50.964, 1.853);\n *     var d = p1.distanceTo(p2); // 40.31 km\n */\nfunction calculateRhumbDistance(\n  origin: number[],\n  destination: number[],\n  radius?: number\n) {\n  // φ => phi\n  // λ => lambda\n  // ψ => psi\n  // Δ => Delta\n  // δ => delta\n  // θ => theta\n\n  radius = radius === undefined ? earthRadius : Number(radius);\n  // see www.edwilliams.org/avform.htm#Rhumb\n\n  const R = radius;\n  const phi1 = (origin[1] * Math.PI) / 180;\n  const phi2 = (destination[1] * Math.PI) / 180;\n  const DeltaPhi = phi2 - phi1;\n  let DeltaLambda = (Math.abs(destination[0] - origin[0]) * Math.PI) / 180;\n  // if dLon over 180° take shorter rhumb line across the anti-meridian:\n  if (DeltaLambda > Math.PI) {\n    DeltaLambda -= 2 * Math.PI;\n  }\n\n  // on Mercator projection, longitude distances shrink by latitude; q is the 'stretch factor'\n  // q becomes ill-conditioned along E-W line (0/0); use empirical tolerance to avoid it\n  const DeltaPsi = Math.log(\n    Math.tan(phi2 / 2 + Math.PI / 4) / Math.tan(phi1 / 2 + Math.PI / 4)\n  );\n  const q = Math.abs(DeltaPsi) > 10e-12 ? DeltaPhi / DeltaPsi : Math.cos(phi1);\n\n  // distance is pythagoras on 'stretched' Mercator projection\n  const delta = Math.sqrt(\n    DeltaPhi * DeltaPhi + q * q * DeltaLambda * DeltaLambda\n  ); // angular distance in radians\n  const dist = delta * R;\n\n  return dist;\n}\n\nexport { rhumbDistance };\nexport default rhumbDistance;\n"],"mappings":";AACA,SAASA,aAAA,EAAsBC,WAAA,QAA0B;AACzD,SAASC,QAAA,QAAgB;AAwBzB,SAASC,cACPC,IAAA,EACAC,EAAA,EACAC,OAAA,GAEI,CAAC,GACG;EACR,MAAMC,MAAA,GAASL,QAAA,CAASE,IAAI;EAC5B,MAAMI,WAAA,GAAcN,QAAA,CAASG,EAAE;EAI/BG,WAAA,CAAY,CAAC,KACXA,WAAA,CAAY,CAAC,IAAID,MAAA,CAAO,CAAC,IAAI,MACzB,OACAA,MAAA,CAAO,CAAC,IAAIC,WAAA,CAAY,CAAC,IAAI,MAC3B,MACA;EACR,MAAMC,gBAAA,GAAmBC,sBAAA,CAAuBH,MAAA,EAAQC,WAAW;EACnE,MAAMG,QAAA,GAAWX,aAAA,CAAcS,gBAAA,EAAkB,UAAUH,OAAA,CAAQM,KAAK;EACxE,OAAOD,QAAA;AACT;AAiBA,SAASD,uBACPH,MAAA,EACAC,WAAA,EACAK,MAAA,EACA;EAQAA,MAAA,GAASA,MAAA,KAAW,SAAYZ,WAAA,GAAca,MAAA,CAAOD,MAAM;EAG3D,MAAME,CAAA,GAAIF,MAAA;EACV,MAAMG,IAAA,GAAQT,MAAA,CAAO,CAAC,IAAIU,IAAA,CAAKC,EAAA,GAAM;EACrC,MAAMC,IAAA,GAAQX,WAAA,CAAY,CAAC,IAAIS,IAAA,CAAKC,EAAA,GAAM;EAC1C,MAAME,QAAA,GAAWD,IAAA,GAAOH,IAAA;EACxB,IAAIK,WAAA,GAAeJ,IAAA,CAAKK,GAAA,CAAId,WAAA,CAAY,CAAC,IAAID,MAAA,CAAO,CAAC,CAAC,IAAIU,IAAA,CAAKC,EAAA,GAAM;EAErE,IAAIG,WAAA,GAAcJ,IAAA,CAAKC,EAAA,EAAI;IACzBG,WAAA,IAAe,IAAIJ,IAAA,CAAKC,EAAA;EAC1B;EAIA,MAAMK,QAAA,GAAWN,IAAA,CAAKO,GAAA,CACpBP,IAAA,CAAKQ,GAAA,CAAIN,IAAA,GAAO,IAAIF,IAAA,CAAKC,EAAA,GAAK,CAAC,IAAID,IAAA,CAAKQ,GAAA,CAAIT,IAAA,GAAO,IAAIC,IAAA,CAAKC,EAAA,GAAK,CAAC,CACpE;EACA,MAAMQ,CAAA,GAAIT,IAAA,CAAKK,GAAA,CAAIC,QAAQ,IAAI,QAASH,QAAA,GAAWG,QAAA,GAAWN,IAAA,CAAKU,GAAA,CAAIX,IAAI;EAG3E,MAAMY,KAAA,GAAQX,IAAA,CAAKY,IAAA,CACjBT,QAAA,GAAWA,QAAA,GAAWM,CAAA,GAAIA,CAAA,GAAIL,WAAA,GAAcA,WAC9C;EACA,MAAMS,IAAA,GAAOF,KAAA,GAAQb,CAAA;EAErB,OAAOe,IAAA;AACT;AAGA,IAAOC,2BAAA,GAAQ5B,aAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}