{"ast":null,"code":"// index.ts\nimport * as polyclip from \"polyclip-ts\";\nimport { multiPolygon, polygon } from \"@turf/helpers\";\nimport { geomEach } from \"@turf/meta\";\nfunction union2(features, options = {}) {\n  const geoms = [];\n  geomEach(features, geom => {\n    geoms.push(geom.coordinates);\n  });\n  if (geoms.length < 2) {\n    throw new Error(\"Must have at least 2 geometries\");\n  }\n  const unioned = polyclip.union(geoms[0], ...geoms.slice(1));\n  if (unioned.length === 0) return null;\n  if (unioned.length === 1) return polygon(unioned[0], options.properties);else return multiPolygon(unioned, options.properties);\n}\nvar turf_union_default = union2;\nexport { turf_union_default as default, union2 as union };","map":{"version":3,"names":["polyclip","multiPolygon","polygon","geomEach","union2","features","options","geoms","geom","push","coordinates","length","Error","unioned","union","slice","properties","turf_union_default"],"sources":["/Users/yairtitelboim/Documents/Kernel/ALLAPPS/LOGhub/loghub/county-map-app/node_modules/@turf/union/index.ts"],"sourcesContent":["import * as polyclip from \"polyclip-ts\";\nimport { multiPolygon, polygon } from \"@turf/helpers\";\nimport { geomEach } from \"@turf/meta\";\nimport {\n  FeatureCollection,\n  Feature,\n  Polygon,\n  MultiPolygon,\n  GeoJsonProperties,\n} from \"geojson\";\n\n/**\n * Takes a collection of input polygons and returns a combined polygon. If the\n * input polygons are not contiguous, this function returns a multi-polygon\n * feature.\n *\n * @function\n * @param {FeatureCollection<Polygon|MultiPolygon>} features input polygon features\n * @param {Object} [options={}] Optional Parameters\n * @param {GeoJsonProperties} [options.properties={}] properties to assign to output feature\n * @returns {Feature<(Polygon|MultiPolygon)>|null} a combined polygon or multi-polygon feature, or null if there were no input polygons to combine\n * @example\n *\n * const poly1 = turf.polygon(\n *   [\n *     [\n *       [-82.574787, 35.594087],\n *       [-82.574787, 35.615581],\n *       [-82.545261, 35.615581],\n *       [-82.545261, 35.594087],\n *       [-82.574787, 35.594087],\n *     ],\n *   ],\n *   { fill: \"#0f0\" }\n * );\n *\n * const poly2 = turf.polygon(\n *   [\n *     [\n *       [-82.560024, 35.585153],\n *       [-82.560024, 35.602602],\n *       [-82.52964, 35.602602],\n *       [-82.52964, 35.585153],\n *       [-82.560024, 35.585153],\n *     ],\n *   ],\n * );\n *\n * const union = turf.union(turf.featureCollection([poly1, poly2]));\n *\n * //addToMap\n * const addToMap = { poly1, poly2, union };\n *\n * poly1.properties.fill = \"#0f0\";\n * poly2.properties.fill = \"#00f\";\n * union.properties.stroke = \"red\";\n * union.properties[\"stroke-width\"] = 4;\n * union.properties.fill = \"transparent\";\n */\nfunction union<P extends GeoJsonProperties = GeoJsonProperties>(\n  features: FeatureCollection<Polygon | MultiPolygon>,\n  options: { properties?: P } = {}\n): Feature<Polygon | MultiPolygon, P> | null {\n  const geoms: polyclip.Geom[] = [];\n  geomEach(features, (geom) => {\n    geoms.push(geom.coordinates as polyclip.Geom);\n  });\n\n  if (geoms.length < 2) {\n    throw new Error(\"Must have at least 2 geometries\");\n  }\n\n  const unioned = polyclip.union(geoms[0], ...geoms.slice(1));\n  if (unioned.length === 0) return null;\n  if (unioned.length === 1) return polygon(unioned[0], options.properties);\n  else return multiPolygon(unioned, options.properties);\n}\n\nexport { union };\nexport default union;\n"],"mappings":";AAAA,YAAYA,QAAA,MAAc;AAC1B,SAASC,YAAA,EAAcC,OAAA,QAAe;AACtC,SAASC,QAAA,QAAgB;AAyDzB,SAASC,OACPC,QAAA,EACAC,OAAA,GAA8B,CAAC,GACY;EAC3C,MAAMC,KAAA,GAAyB,EAAC;EAChCJ,QAAA,CAASE,QAAA,EAAWG,IAAA,IAAS;IAC3BD,KAAA,CAAME,IAAA,CAAKD,IAAA,CAAKE,WAA4B;EAC9C,CAAC;EAED,IAAIH,KAAA,CAAMI,MAAA,GAAS,GAAG;IACpB,MAAM,IAAIC,KAAA,CAAM,iCAAiC;EACnD;EAEA,MAAMC,OAAA,GAAmBb,QAAA,CAAAc,KAAA,CAAMP,KAAA,CAAM,CAAC,GAAG,GAAGA,KAAA,CAAMQ,KAAA,CAAM,CAAC,CAAC;EAC1D,IAAIF,OAAA,CAAQF,MAAA,KAAW,GAAG,OAAO;EACjC,IAAIE,OAAA,CAAQF,MAAA,KAAW,GAAG,OAAOT,OAAA,CAAQW,OAAA,CAAQ,CAAC,GAAGP,OAAA,CAAQU,UAAU,OAClE,OAAOf,YAAA,CAAaY,OAAA,EAASP,OAAA,CAAQU,UAAU;AACtD;AAGA,IAAOC,kBAAA,GAAQb,MAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}