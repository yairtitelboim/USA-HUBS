{"ast":null,"code":"// index.ts\nimport { convertLength, feature, lineString, point } from \"@turf/helpers\";\nimport { nearestPointOnLine } from \"@turf/nearest-point-on-line\";\nimport { featureOf } from \"@turf/invariant\";\nimport { segmentEach } from \"@turf/meta\";\nimport { rhumbDistance } from \"@turf/rhumb-distance\";\nfunction pointToLineDistance(pt, line, options = {}) {\n  var _a, _b;\n  const method = (_a = options.method) != null ? _a : \"geodesic\";\n  const units = (_b = options.units) != null ? _b : \"kilometers\";\n  if (!pt) {\n    throw new Error(\"pt is required\");\n  }\n  if (Array.isArray(pt)) {\n    pt = point(pt);\n  } else if (pt.type === \"Point\") {\n    pt = feature(pt);\n  } else {\n    featureOf(pt, \"Point\", \"point\");\n  }\n  if (!line) {\n    throw new Error(\"line is required\");\n  }\n  if (Array.isArray(line)) {\n    line = lineString(line);\n  } else if (line.type === \"LineString\") {\n    line = feature(line);\n  } else {\n    featureOf(line, \"LineString\", \"line\");\n  }\n  let distance = Infinity;\n  const p = pt.geometry.coordinates;\n  segmentEach(line, segment => {\n    if (segment) {\n      const a = segment.geometry.coordinates[0];\n      const b = segment.geometry.coordinates[1];\n      const d = distanceToSegment(p, a, b, {\n        method\n      });\n      if (d < distance) {\n        distance = d;\n      }\n    }\n  });\n  return convertLength(distance, \"degrees\", units);\n}\nfunction distanceToSegment(p, a, b, options) {\n  if (options.method === \"geodesic\") {\n    const nearest = nearestPointOnLine(lineString([a, b]).geometry, p, {\n      units: \"degrees\"\n    });\n    return nearest.properties.dist;\n  }\n  const v = [b[0] - a[0], b[1] - a[1]];\n  const w = [p[0] - a[0], p[1] - a[1]];\n  const c1 = dot(w, v);\n  if (c1 <= 0) {\n    return rhumbDistance(p, a, {\n      units: \"degrees\"\n    });\n  }\n  const c2 = dot(v, v);\n  if (c2 <= c1) {\n    return rhumbDistance(p, b, {\n      units: \"degrees\"\n    });\n  }\n  const b2 = c1 / c2;\n  const Pb = [a[0] + b2 * v[0], a[1] + b2 * v[1]];\n  return rhumbDistance(p, Pb, {\n    units: \"degrees\"\n  });\n}\nfunction dot(u, v) {\n  return u[0] * v[0] + u[1] * v[1];\n}\nvar turf_point_to_line_distance_default = pointToLineDistance;\nexport { turf_point_to_line_distance_default as default, pointToLineDistance };","map":{"version":3,"names":["convertLength","feature","lineString","point","nearestPointOnLine","featureOf","segmentEach","rhumbDistance","pointToLineDistance","pt","line","options","_a","_b","method","units","Error","Array","isArray","type","distance","Infinity","p","geometry","coordinates","segment","a","b","d","distanceToSegment","nearest","properties","dist","v","w","c1","dot","c2","b2","Pb","u","turf_point_to_line_distance_default"],"sources":["/Users/yairtitelboim/Documents/Kernel/ALLAPPS/LOGhub/loghub/county-map-app/node_modules/@turf/point-to-line-distance/index.ts"],"sourcesContent":["// Taken from http://geomalgorithms.com/a02-_lines.html\nimport { Feature, LineString } from \"geojson\";\nimport {\n  convertLength,\n  Coord,\n  feature,\n  lineString,\n  point,\n  Units,\n} from \"@turf/helpers\";\nimport { nearestPointOnLine } from \"@turf/nearest-point-on-line\";\nimport { featureOf } from \"@turf/invariant\";\nimport { segmentEach } from \"@turf/meta\";\nimport { rhumbDistance } from \"@turf/rhumb-distance\";\n\n/**\n * Calculates the distance between a given point and the nearest point on a\n * line. Sometimes referred to as the cross track distance.\n *\n * @function\n * @param {Feature<Point>|Array<number>} pt Feature or Geometry\n * @param {Feature<LineString>} line GeoJSON Feature or Geometry\n * @param {Object} [options={}] Optional parameters\n * @param {string} [options.units=\"kilometers\"] can be anything supported by turf/convertLength\n * (ex: degrees, radians, miles, or kilometers)\n * @param {string} [options.method=\"geodesic\"] whether to calculate the distance based on geodesic (spheroid) or\n * planar (flat) method. Valid options are 'geodesic' or 'planar'.\n * @returns {number} distance between point and line\n * @example\n * var pt = turf.point([0, 0]);\n * var line = turf.lineString([[1, 1],[-1, 1]]);\n *\n * var distance = turf.pointToLineDistance(pt, line, {units: 'miles'});\n * //=69.11854715938406\n */\nfunction pointToLineDistance(\n  pt: Coord,\n  line: Feature<LineString> | LineString,\n  options: {\n    units?: Units;\n    method?: \"geodesic\" | \"planar\";\n  } = {}\n): number {\n  // Optional parameters\n  const method = options.method ?? \"geodesic\";\n  const units = options.units ?? \"kilometers\";\n\n  // validation\n  if (!pt) {\n    throw new Error(\"pt is required\");\n  }\n  if (Array.isArray(pt)) {\n    pt = point(pt);\n  } else if (pt.type === \"Point\") {\n    pt = feature(pt);\n  } else {\n    featureOf(pt, \"Point\", \"point\");\n  }\n\n  if (!line) {\n    throw new Error(\"line is required\");\n  }\n  if (Array.isArray(line)) {\n    line = lineString(line);\n  } else if (line.type === \"LineString\") {\n    line = feature(line);\n  } else {\n    featureOf(line, \"LineString\", \"line\");\n  }\n\n  let distance = Infinity;\n  const p = pt.geometry.coordinates;\n  segmentEach(line, (segment) => {\n    if (segment) {\n      const a = segment.geometry.coordinates[0];\n      const b = segment.geometry.coordinates[1];\n      const d = distanceToSegment(p, a, b, { method });\n      if (d < distance) {\n        distance = d;\n      }\n    }\n  });\n  return convertLength(distance, \"degrees\", units);\n}\n\n/**\n * Returns the distance between a point P on a segment AB.\n *\n * @private\n * @param {Array<number>} p external point\n * @param {Array<number>} a first segment point\n * @param {Array<number>} b second segment point\n * @param {Object} [options={}] Optional parameters\n * @returns {number} distance\n */\nfunction distanceToSegment(\n  p: number[], // point to measure from\n  a: number[], // start point of the segment to measure to\n  b: number[], // end point of the segment to measure to\n  options: {\n    method: \"geodesic\" | \"planar\";\n  }\n) {\n  // Internally just use degrees, and then convert to the user's requested units\n  // in the calling function.\n  if (options.method === \"geodesic\") {\n    // Use nearestPointOnLine to properly calculate distances on a spherical\n    // Earth.\n    const nearest = nearestPointOnLine(lineString([a, b]).geometry, p, {\n      units: \"degrees\",\n    });\n    return nearest.properties.dist;\n  }\n\n  // Perform scalar calculations instead using rhumb lines.\n  const v = [b[0] - a[0], b[1] - a[1]];\n  const w = [p[0] - a[0], p[1] - a[1]];\n\n  const c1 = dot(w, v);\n  if (c1 <= 0) {\n    return rhumbDistance(p, a, { units: \"degrees\" });\n  }\n  const c2 = dot(v, v);\n  if (c2 <= c1) {\n    return rhumbDistance(p, b, { units: \"degrees\" });\n  }\n  const b2 = c1 / c2;\n  const Pb = [a[0] + b2 * v[0], a[1] + b2 * v[1]];\n\n  return rhumbDistance(p, Pb, { units: \"degrees\" });\n}\n\nfunction dot(u: number[], v: number[]) {\n  return u[0] * v[0] + u[1] * v[1];\n}\n\nexport { pointToLineDistance };\nexport default pointToLineDistance;\n"],"mappings":";AAEA,SACEA,aAAA,EAEAC,OAAA,EACAC,UAAA,EACAC,KAAA,QAEK;AACP,SAASC,kBAAA,QAA0B;AACnC,SAASC,SAAA,QAAiB;AAC1B,SAASC,WAAA,QAAmB;AAC5B,SAASC,aAAA,QAAqB;AAsB9B,SAASC,oBACPC,EAAA,EACAC,IAAA,EACAC,OAAA,GAGI,CAAC,GACG;EA1CV,IAAAC,EAAA,EAAAC,EAAA;EA4CE,MAAMC,MAAA,IAASF,EAAA,GAAAD,OAAA,CAAQG,MAAA,KAAR,OAAAF,EAAA,GAAkB;EACjC,MAAMG,KAAA,IAAQF,EAAA,GAAAF,OAAA,CAAQI,KAAA,KAAR,OAAAF,EAAA,GAAiB;EAG/B,IAAI,CAACJ,EAAA,EAAI;IACP,MAAM,IAAIO,KAAA,CAAM,gBAAgB;EAClC;EACA,IAAIC,KAAA,CAAMC,OAAA,CAAQT,EAAE,GAAG;IACrBA,EAAA,GAAKN,KAAA,CAAMM,EAAE;EACf,WAAWA,EAAA,CAAGU,IAAA,KAAS,SAAS;IAC9BV,EAAA,GAAKR,OAAA,CAAQQ,EAAE;EACjB,OAAO;IACLJ,SAAA,CAAUI,EAAA,EAAI,SAAS,OAAO;EAChC;EAEA,IAAI,CAACC,IAAA,EAAM;IACT,MAAM,IAAIM,KAAA,CAAM,kBAAkB;EACpC;EACA,IAAIC,KAAA,CAAMC,OAAA,CAAQR,IAAI,GAAG;IACvBA,IAAA,GAAOR,UAAA,CAAWQ,IAAI;EACxB,WAAWA,IAAA,CAAKS,IAAA,KAAS,cAAc;IACrCT,IAAA,GAAOT,OAAA,CAAQS,IAAI;EACrB,OAAO;IACLL,SAAA,CAAUK,IAAA,EAAM,cAAc,MAAM;EACtC;EAEA,IAAIU,QAAA,GAAWC,QAAA;EACf,MAAMC,CAAA,GAAIb,EAAA,CAAGc,QAAA,CAASC,WAAA;EACtBlB,WAAA,CAAYI,IAAA,EAAOe,OAAA,IAAY;IAC7B,IAAIA,OAAA,EAAS;MACX,MAAMC,CAAA,GAAID,OAAA,CAAQF,QAAA,CAASC,WAAA,CAAY,CAAC;MACxC,MAAMG,CAAA,GAAIF,OAAA,CAAQF,QAAA,CAASC,WAAA,CAAY,CAAC;MACxC,MAAMI,CAAA,GAAIC,iBAAA,CAAkBP,CAAA,EAAGI,CAAA,EAAGC,CAAA,EAAG;QAAEb;MAAO,CAAC;MAC/C,IAAIc,CAAA,GAAIR,QAAA,EAAU;QAChBA,QAAA,GAAWQ,CAAA;MACb;IACF;EACF,CAAC;EACD,OAAO5B,aAAA,CAAcoB,QAAA,EAAU,WAAWL,KAAK;AACjD;AAYA,SAASc,kBACPP,CAAA,EACAI,CAAA,EACAC,CAAA,EACAhB,OAAA,EAGA;EAGA,IAAIA,OAAA,CAAQG,MAAA,KAAW,YAAY;IAGjC,MAAMgB,OAAA,GAAU1B,kBAAA,CAAmBF,UAAA,CAAW,CAACwB,CAAA,EAAGC,CAAC,CAAC,EAAEJ,QAAA,EAAUD,CAAA,EAAG;MACjEP,KAAA,EAAO;IACT,CAAC;IACD,OAAOe,OAAA,CAAQC,UAAA,CAAWC,IAAA;EAC5B;EAGA,MAAMC,CAAA,GAAI,CAACN,CAAA,CAAE,CAAC,IAAID,CAAA,CAAE,CAAC,GAAGC,CAAA,CAAE,CAAC,IAAID,CAAA,CAAE,CAAC,CAAC;EACnC,MAAMQ,CAAA,GAAI,CAACZ,CAAA,CAAE,CAAC,IAAII,CAAA,CAAE,CAAC,GAAGJ,CAAA,CAAE,CAAC,IAAII,CAAA,CAAE,CAAC,CAAC;EAEnC,MAAMS,EAAA,GAAKC,GAAA,CAAIF,CAAA,EAAGD,CAAC;EACnB,IAAIE,EAAA,IAAM,GAAG;IACX,OAAO5B,aAAA,CAAce,CAAA,EAAGI,CAAA,EAAG;MAAEX,KAAA,EAAO;IAAU,CAAC;EACjD;EACA,MAAMsB,EAAA,GAAKD,GAAA,CAAIH,CAAA,EAAGA,CAAC;EACnB,IAAII,EAAA,IAAMF,EAAA,EAAI;IACZ,OAAO5B,aAAA,CAAce,CAAA,EAAGK,CAAA,EAAG;MAAEZ,KAAA,EAAO;IAAU,CAAC;EACjD;EACA,MAAMuB,EAAA,GAAKH,EAAA,GAAKE,EAAA;EAChB,MAAME,EAAA,GAAK,CAACb,CAAA,CAAE,CAAC,IAAIY,EAAA,GAAKL,CAAA,CAAE,CAAC,GAAGP,CAAA,CAAE,CAAC,IAAIY,EAAA,GAAKL,CAAA,CAAE,CAAC,CAAC;EAE9C,OAAO1B,aAAA,CAAce,CAAA,EAAGiB,EAAA,EAAI;IAAExB,KAAA,EAAO;EAAU,CAAC;AAClD;AAEA,SAASqB,IAAII,CAAA,EAAaP,CAAA,EAAa;EACrC,OAAOO,CAAA,CAAE,CAAC,IAAIP,CAAA,CAAE,CAAC,IAAIO,CAAA,CAAE,CAAC,IAAIP,CAAA,CAAE,CAAC;AACjC;AAGA,IAAOQ,mCAAA,GAAQjC,mBAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}