{"ast":null,"code":"// index.ts\nimport { booleanPointInPolygon } from \"@turf/boolean-point-in-polygon\";\nimport { clone } from \"@turf/clone\";\nimport { featureEach } from \"@turf/meta\";\nfunction tag(points, polygons, field, outField) {\n  points = clone(points);\n  polygons = clone(polygons);\n  featureEach(points, function (pt) {\n    if (!pt.properties) pt.properties = {};\n    featureEach(polygons, function (poly) {\n      if (pt.properties && poly.properties) {\n        if (pt.properties[outField] === void 0) {\n          if (booleanPointInPolygon(pt, poly)) pt.properties[outField] = poly.properties[field];\n        }\n      }\n    });\n  });\n  return points;\n}\nvar turf_tag_default = tag;\nexport { turf_tag_default as default, tag };","map":{"version":3,"names":["booleanPointInPolygon","clone","featureEach","tag","points","polygons","field","outField","pt","properties","poly","turf_tag_default"],"sources":["/Users/yairtitelboim/Documents/Kernel/ALLAPPS/LOGhub/loghub/county-map-app/node_modules/@turf/tag/index.ts"],"sourcesContent":["import { Point, FeatureCollection, Polygon, MultiPolygon } from \"geojson\";\nimport { booleanPointInPolygon } from \"@turf/boolean-point-in-polygon\";\nimport { clone } from \"@turf/clone\";\nimport { featureEach } from \"@turf/meta\";\n\n/**\n * Takes a set of {@link Point|points} and a set of {@link Polygon|polygons} and/or {@link MultiPolygon|multipolygons} and performs a spatial join.\n *\n * @function\n * @param {FeatureCollection<Point>} points input points\n * @param {FeatureCollection<Polygon|MultiPolygon>} polygons input (multi)polygons\n * @param {string} field property in `polygons` to add to joined {<Point>} features\n * @param {string} outField property in `points` in which to store joined property from `polygons`\n * @returns {FeatureCollection<Point>} points with `containingPolyId` property containing values from `polyId`\n * @example\n * var pt1 = turf.point([-77, 44]);\n * var pt2 = turf.point([-77, 38]);\n * var poly1 = turf.polygon([[\n *   [-81, 41],\n *   [-81, 47],\n *   [-72, 47],\n *   [-72, 41],\n *   [-81, 41]\n * ]], {pop: 3000});\n * var poly2 = turf.polygon([[\n *   [-81, 35],\n *   [-81, 41],\n *   [-72, 41],\n *   [-72, 35],\n *   [-81, 35]\n * ]], {pop: 1000});\n *\n * var points = turf.featureCollection([pt1, pt2]);\n * var polygons = turf.featureCollection([poly1, poly2]);\n *\n * var tagged = turf.tag(points, polygons, 'pop', 'population');\n *\n * //addToMap\n * var addToMap = [tagged, polygons]\n */\nfunction tag(\n  points: FeatureCollection<Point>,\n  polygons: FeatureCollection<Polygon | MultiPolygon>,\n  field: string,\n  outField: string\n): FeatureCollection<Point> {\n  // prevent mutations\n  points = clone(points);\n  polygons = clone(polygons);\n  featureEach(points, function (pt) {\n    if (!pt.properties) pt.properties = {};\n    featureEach(polygons, function (poly) {\n      if (pt.properties && poly.properties) {\n        if (pt.properties[outField] === undefined) {\n          if (booleanPointInPolygon(pt, poly))\n            pt.properties[outField] = poly.properties[field];\n        }\n      }\n    });\n  });\n  return points;\n}\n\nexport { tag };\nexport default tag;\n"],"mappings":";AACA,SAASA,qBAAA,QAA6B;AACtC,SAASC,KAAA,QAAa;AACtB,SAASC,WAAA,QAAmB;AAqC5B,SAASC,IACPC,MAAA,EACAC,QAAA,EACAC,KAAA,EACAC,QAAA,EAC0B;EAE1BH,MAAA,GAASH,KAAA,CAAMG,MAAM;EACrBC,QAAA,GAAWJ,KAAA,CAAMI,QAAQ;EACzBH,WAAA,CAAYE,MAAA,EAAQ,UAAUI,EAAA,EAAI;IAChC,IAAI,CAACA,EAAA,CAAGC,UAAA,EAAYD,EAAA,CAAGC,UAAA,GAAa,CAAC;IACrCP,WAAA,CAAYG,QAAA,EAAU,UAAUK,IAAA,EAAM;MACpC,IAAIF,EAAA,CAAGC,UAAA,IAAcC,IAAA,CAAKD,UAAA,EAAY;QACpC,IAAID,EAAA,CAAGC,UAAA,CAAWF,QAAQ,MAAM,QAAW;UACzC,IAAIP,qBAAA,CAAsBQ,EAAA,EAAIE,IAAI,GAChCF,EAAA,CAAGC,UAAA,CAAWF,QAAQ,IAAIG,IAAA,CAAKD,UAAA,CAAWH,KAAK;QACnD;MACF;IACF,CAAC;EACH,CAAC;EACD,OAAOF,MAAA;AACT;AAGA,IAAOO,gBAAA,GAAQR,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}