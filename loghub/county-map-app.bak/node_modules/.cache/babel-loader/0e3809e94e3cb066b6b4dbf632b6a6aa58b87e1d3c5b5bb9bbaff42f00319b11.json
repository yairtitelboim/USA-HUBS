{"ast":null,"code":"// index.ts\nimport { coordEach } from \"@turf/meta\";\nimport { isNumber } from \"@turf/helpers\";\nimport { clone } from \"@turf/clone\";\nfunction toMercator(geojson, options = {}) {\n  return convert(geojson, \"mercator\", options);\n}\nfunction toWgs84(geojson, options = {}) {\n  return convert(geojson, \"wgs84\", options);\n}\nfunction convert(geojson, projection, options = {}) {\n  options = options || {};\n  var mutate = options.mutate;\n  if (!geojson) throw new Error(\"geojson is required\");\n  if (Array.isArray(geojson) && isNumber(geojson[0])) geojson = projection === \"mercator\" ? convertToMercator(geojson) : convertToWgs84(geojson);else {\n    if (mutate !== true) geojson = clone(geojson);\n    coordEach(geojson, function (coord) {\n      var newCoord = projection === \"mercator\" ? convertToMercator(coord) : convertToWgs84(coord);\n      coord[0] = newCoord[0];\n      coord[1] = newCoord[1];\n    });\n  }\n  return geojson;\n}\nfunction convertToMercator(lonLat) {\n  var D2R = Math.PI / 180,\n    A = 6378137,\n    MAXEXTENT = 20037508342789244e-9;\n  var adjusted = Math.abs(lonLat[0]) <= 180 ? lonLat[0] : lonLat[0] - sign(lonLat[0]) * 360;\n  var xy = [A * adjusted * D2R, A * Math.log(Math.tan(Math.PI * 0.25 + 0.5 * lonLat[1] * D2R))];\n  if (xy[0] > MAXEXTENT) xy[0] = MAXEXTENT;\n  if (xy[0] < -MAXEXTENT) xy[0] = -MAXEXTENT;\n  if (xy[1] > MAXEXTENT) xy[1] = MAXEXTENT;\n  if (xy[1] < -MAXEXTENT) xy[1] = -MAXEXTENT;\n  return xy;\n}\nfunction convertToWgs84(xy) {\n  var R2D = 180 / Math.PI;\n  var A = 6378137;\n  return [xy[0] * R2D / A, (Math.PI * 0.5 - 2 * Math.atan(Math.exp(-xy[1] / A))) * R2D];\n}\nfunction sign(x) {\n  return x < 0 ? -1 : x > 0 ? 1 : 0;\n}\nexport { toMercator, toWgs84 };","map":{"version":3,"names":["coordEach","isNumber","clone","toMercator","geojson","options","convert","toWgs84","projection","mutate","Error","Array","isArray","convertToMercator","convertToWgs84","coord","newCoord","lonLat","D2R","Math","PI","A","MAXEXTENT","adjusted","abs","sign","xy","log","tan","R2D","atan","exp","x"],"sources":["/Users/yairtitelboim/Documents/Kernel/ALLAPPS/LOGhub/loghub/county-map-app/node_modules/@turf/projection/index.ts"],"sourcesContent":["import { Position } from \"geojson\";\nimport { coordEach } from \"@turf/meta\";\nimport { AllGeoJSON, isNumber } from \"@turf/helpers\";\nimport { clone } from \"@turf/clone\";\n\n/**\n * Converts a WGS84 GeoJSON object into Mercator (EPSG:900913) projection\n *\n * @function\n * @param {GeoJSON|Position} geojson WGS84 GeoJSON object\n * @param {Object} [options] Optional parameters\n * @param {boolean} [options.mutate=false] allows GeoJSON input to be mutated (significant performance increase if true)\n * @returns {GeoJSON} Projected GeoJSON\n * @example\n * var pt = turf.point([-71,41]);\n * var converted = turf.toMercator(pt);\n *\n * //addToMap\n * var addToMap = [pt, converted];\n */\nfunction toMercator<G = AllGeoJSON | Position>(\n  geojson: G,\n  options: { mutate?: boolean } = {}\n): G {\n  return convert(geojson, \"mercator\", options);\n}\n\n/**\n * Converts a Mercator (EPSG:900913) GeoJSON object into WGS84 projection\n *\n * @function\n * @param {GeoJSON|Position} geojson Mercator GeoJSON object\n * @param {Object} [options] Optional parameters\n * @param {boolean} [options.mutate=false] allows GeoJSON input to be mutated (significant performance increase if true)\n * @returns {GeoJSON} Projected GeoJSON\n * @example\n * var pt = turf.point([-7903683.846322424, 5012341.663847514]);\n * var converted = turf.toWgs84(pt);\n *\n * //addToMap\n * var addToMap = [pt, converted];\n */\nfunction toWgs84<G = AllGeoJSON | Position>(\n  geojson: G,\n  options: { mutate?: boolean } = {}\n): G {\n  return convert(geojson, \"wgs84\", options);\n}\n\n/**\n * Converts a GeoJSON coordinates to the defined `projection`\n *\n * @private\n * @param {GeoJSON} geojson GeoJSON Feature or Geometry\n * @param {string} projection defines the projection system to convert the coordinates to\n * @param {Object} [options] Optional parameters\n * @param {boolean} [options.mutate=false] allows GeoJSON input to be mutated (significant performance increase if true)\n * @returns {GeoJSON} Converted GeoJSON\n */\nfunction convert(\n  geojson: any,\n  projection: string,\n  options: { mutate?: boolean } = {}\n): any {\n  // Optional parameters\n  options = options || {};\n  var mutate = options.mutate;\n\n  // Validation\n  if (!geojson) throw new Error(\"geojson is required\");\n\n  // Handle Position\n  if (Array.isArray(geojson) && isNumber(geojson[0]))\n    geojson =\n      projection === \"mercator\"\n        ? convertToMercator(geojson)\n        : convertToWgs84(geojson);\n  // Handle GeoJSON\n  else {\n    // Handle possible data mutation\n    if (mutate !== true) geojson = clone(geojson);\n\n    coordEach(geojson, function (coord) {\n      var newCoord =\n        projection === \"mercator\"\n          ? convertToMercator(coord)\n          : convertToWgs84(coord);\n      coord[0] = newCoord[0];\n      coord[1] = newCoord[1];\n    });\n  }\n  return geojson;\n}\n\n/**\n * Convert lon/lat values to 900913 x/y.\n * (from https://github.com/mapbox/sphericalmercator)\n *\n * @private\n * @param {Array<number>} lonLat WGS84 point\n * @returns {Array<number>} Mercator [x, y] point\n */\nfunction convertToMercator(lonLat: number[]) {\n  var D2R = Math.PI / 180,\n    // 900913 properties\n    A = 6378137.0,\n    MAXEXTENT = 20037508.342789244;\n\n  // compensate longitudes passing the 180th meridian\n  // from https://github.com/proj4js/proj4js/blob/master/lib/common/adjust_lon.js\n  var adjusted =\n    Math.abs(lonLat[0]) <= 180 ? lonLat[0] : lonLat[0] - sign(lonLat[0]) * 360;\n  var xy = [\n    A * adjusted * D2R,\n    A * Math.log(Math.tan(Math.PI * 0.25 + 0.5 * lonLat[1] * D2R)),\n  ];\n\n  // if xy value is beyond maxextent (e.g. poles), return maxextent\n  if (xy[0] > MAXEXTENT) xy[0] = MAXEXTENT;\n  if (xy[0] < -MAXEXTENT) xy[0] = -MAXEXTENT;\n  if (xy[1] > MAXEXTENT) xy[1] = MAXEXTENT;\n  if (xy[1] < -MAXEXTENT) xy[1] = -MAXEXTENT;\n\n  return xy;\n}\n\n/**\n * Convert 900913 x/y values to lon/lat.\n * (from https://github.com/mapbox/sphericalmercator)\n *\n * @private\n * @param {Array<number>} xy Mercator [x, y] point\n * @returns {Array<number>} WGS84 [lon, lat] point\n */\nfunction convertToWgs84(xy: number[]) {\n  // 900913 properties.\n  var R2D = 180 / Math.PI;\n  var A = 6378137.0;\n\n  return [\n    (xy[0] * R2D) / A,\n    (Math.PI * 0.5 - 2.0 * Math.atan(Math.exp(-xy[1] / A))) * R2D,\n  ];\n}\n\n/**\n * Returns the sign of the input, or zero\n *\n * @private\n * @param {number} x input\n * @returns {number} -1|0|1 output\n */\nfunction sign(x: number) {\n  return x < 0 ? -1 : x > 0 ? 1 : 0;\n}\n\nexport { toMercator, toWgs84 };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}